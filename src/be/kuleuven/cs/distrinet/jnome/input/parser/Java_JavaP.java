// $ANTLR 3.3 Nov 30, 2010 12:50:56 JavaP.g 2015-05-26 23:52:06

package be.kuleuven.cs.distrinet.jnome.input.parser;

import org.aikodi.chameleon.workspace.View;

import org.aikodi.chameleon.exception.ModelException;
import org.aikodi.chameleon.exception.ChameleonProgrammerException;

import org.aikodi.chameleon.core.document.Document;

import org.aikodi.chameleon.oo.member.DeclarationWithParametersHeader;
import org.aikodi.chameleon.oo.member.SimpleNameDeclarationWithParametersHeader;
import org.aikodi.chameleon.core.declaration.SimpleNameSignature;
import org.aikodi.chameleon.core.declaration.TargetDeclaration;
import org.aikodi.chameleon.core.declaration.DeclarationContainer;
import org.aikodi.chameleon.oo.type.*;
import be.kuleuven.cs.distrinet.jnome.core.type.*;

import org.aikodi.chameleon.core.element.Element;

import org.aikodi.chameleon.oo.expression.*;
import org.aikodi.chameleon.core.reference.*;

import org.aikodi.chameleon.core.language.Language;

import org.aikodi.chameleon.oo.member.Member;

import org.aikodi.chameleon.oo.method.*;

import org.aikodi.chameleon.oo.method.exception.*;

import org.aikodi.chameleon.core.modifier.Modifier;

import org.aikodi.chameleon.core.namespace.Namespace;
import org.aikodi.chameleon.core.namespace.RootNamespace;
import org.aikodi.chameleon.core.namespace.NamespaceReference;

import org.aikodi.chameleon.core.namespacedeclaration.NamespaceDeclaration;
import org.aikodi.chameleon.core.namespacedeclaration.Import;
import org.aikodi.chameleon.oo.namespacedeclaration.TypeImport;
import org.aikodi.chameleon.core.namespacedeclaration.DemandImport;

import org.aikodi.chameleon.core.reference.CrossReference;

import org.aikodi.chameleon.oo.statement.Block;
import org.aikodi.chameleon.oo.statement.Statement;

import org.aikodi.chameleon.oo.variable.VariableDeclaration;
import org.aikodi.chameleon.oo.variable.VariableDeclarator;

import org.aikodi.chameleon.oo.modifier.AnnotationModifier;

import org.aikodi.chameleon.oo.type.ClassBody;
import org.aikodi.chameleon.oo.type.RegularType;
import org.aikodi.chameleon.oo.type.Type;
import org.aikodi.chameleon.oo.type.ClassWithBody;
import org.aikodi.chameleon.oo.type.TypeReference;
import org.aikodi.chameleon.oo.type.TypeElement;

import org.aikodi.chameleon.oo.type.generics.TypeParameter;
import org.aikodi.chameleon.oo.type.generics.FormalTypeParameter;
import org.aikodi.chameleon.oo.type.generics.ActualTypeArgument;
import org.aikodi.chameleon.oo.type.generics.BasicTypeArgument;
import org.aikodi.chameleon.oo.type.generics.TypeConstraint;
import org.aikodi.chameleon.oo.type.generics.ExtendsConstraint;
import org.aikodi.chameleon.oo.type.generics.ExtendsWildcard;
import org.aikodi.chameleon.oo.type.generics.SuperWildcard;

import org.aikodi.chameleon.oo.type.inheritance.SubtypeRelation;

import org.aikodi.chameleon.oo.variable.*;

import org.aikodi.chameleon.input.InputProcessor;
import org.aikodi.chameleon.input.Position2D;

import org.aikodi.chameleon.support.expression.RegularLiteral;
import org.aikodi.chameleon.support.expression.NullLiteral;
import org.aikodi.chameleon.support.expression.AssignmentExpression;
import org.aikodi.chameleon.support.expression.ConditionalExpression;
import org.aikodi.chameleon.support.expression.ConditionalAndExpression;
import org.aikodi.chameleon.support.expression.ConditionalOrExpression;
import org.aikodi.chameleon.support.expression.InstanceofExpression;
import org.aikodi.chameleon.support.expression.ThisLiteral;
import org.aikodi.chameleon.support.expression.FilledArrayIndex;
import org.aikodi.chameleon.support.expression.EmptyArrayIndex;
import org.aikodi.chameleon.support.expression.ArrayIndex;
import org.aikodi.chameleon.support.expression.ClassCastExpression;
import org.aikodi.chameleon.support.expression.SuperTarget;

import org.aikodi.chameleon.support.member.simplename.method.NormalMethod;

import org.aikodi.chameleon.support.member.simplename.variable.MemberVariableDeclarator;
import org.aikodi.chameleon.support.member.simplename.operator.infix.InfixOperatorInvocation;
import org.aikodi.chameleon.support.member.simplename.operator.prefix.PrefixOperatorInvocation;
import org.aikodi.chameleon.support.member.simplename.operator.postfix.PostfixOperatorInvocation;
import org.aikodi.chameleon.support.member.simplename.method.RegularMethodInvocation;

import org.aikodi.chameleon.support.input.*;

import org.aikodi.chameleon.support.modifier.Abstract;
import org.aikodi.chameleon.support.modifier.Final;
import org.aikodi.chameleon.support.modifier.Private;
import org.aikodi.chameleon.support.modifier.Protected;
import org.aikodi.chameleon.support.modifier.Public;
import org.aikodi.chameleon.support.modifier.Static;
import org.aikodi.chameleon.support.modifier.Native;
import org.aikodi.chameleon.support.modifier.Enum;
import org.aikodi.chameleon.support.modifier.Interface;

import org.aikodi.chameleon.support.statement.StatementExpression;
import org.aikodi.chameleon.support.statement.LocalClassStatement;
import org.aikodi.chameleon.support.statement.AssertStatement;
import org.aikodi.chameleon.support.statement.IfThenElseStatement;
import org.aikodi.chameleon.support.statement.ForStatement;
import org.aikodi.chameleon.support.statement.ForControl;
import org.aikodi.chameleon.support.statement.ForInit;
import org.aikodi.chameleon.support.statement.SimpleForControl;
import org.aikodi.chameleon.support.statement.EnhancedForControl;
import org.aikodi.chameleon.support.statement.StatementExprList;
import org.aikodi.chameleon.support.statement.TryStatement;
import org.aikodi.chameleon.support.statement.CatchClause;
import org.aikodi.chameleon.support.statement.FinallyClause;
import org.aikodi.chameleon.support.statement.DoStatement;
import org.aikodi.chameleon.support.statement.WhileStatement;
import org.aikodi.chameleon.support.statement.SwitchStatement;
import org.aikodi.chameleon.support.statement.SwitchCase;
import org.aikodi.chameleon.support.statement.SwitchLabel;
import org.aikodi.chameleon.support.statement.CaseLabel;
import org.aikodi.chameleon.support.statement.DefaultLabel;
import org.aikodi.chameleon.support.statement.EnumLabel;
import org.aikodi.chameleon.support.statement.ReturnStatement;
import org.aikodi.chameleon.support.statement.ThrowStatement;
import org.aikodi.chameleon.support.statement.BreakStatement;
import org.aikodi.chameleon.support.statement.ContinueStatement;
import org.aikodi.chameleon.support.statement.SynchronizedStatement;
import org.aikodi.chameleon.support.statement.EmptyStatement;
import org.aikodi.chameleon.support.statement.LabeledStatement;

import org.aikodi.chameleon.support.type.EmptyTypeElement;
import org.aikodi.chameleon.support.type.StaticInitializer;

import org.aikodi.chameleon.support.variable.LocalVariableDeclarator;

import org.aikodi.chameleon.util.Util;

import org.aikodi.chameleon.oo.plugin.ObjectOrientedFactory;

import be.kuleuven.cs.distrinet.jnome.core.expression.invocation.*;

import be.kuleuven.cs.distrinet.jnome.core.statement.*;

import be.kuleuven.cs.distrinet.jnome.core.expression.*;
import be.kuleuven.cs.distrinet.jnome.core.expression.operator.*;

import be.kuleuven.cs.distrinet.jnome.core.imports.SingleStaticImport;
import be.kuleuven.cs.distrinet.jnome.core.imports.StaticDemandImport;
import be.kuleuven.cs.distrinet.jnome.core.imports.JavaDemandImport;

import be.kuleuven.cs.distrinet.jnome.core.language.Java7;

import be.kuleuven.cs.distrinet.jnome.core.modifier.*;

import be.kuleuven.cs.distrinet.jnome.core.type.*;

import org.aikodi.chameleon.core.reference.*;

import be.kuleuven.cs.distrinet.jnome.core.enumeration.EnumConstant;

import be.kuleuven.cs.distrinet.jnome.core.variable.JavaVariableDeclaration;
import be.kuleuven.cs.distrinet.jnome.core.variable.MultiFormalParameter;

import be.kuleuven.cs.distrinet.jnome.core.expression.*;
import be.kuleuven.cs.distrinet.jnome.input.*;

import java.util.List;
import java.util.ArrayList;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created
 *          elementValuePair and elementValuePairs rules, then used them in the
 *          annotation rule.  Allows it to recognize annotation references with
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the identifierRule portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which
 *          has the identifierRule portion in it, the parser would fail on constants in
 *          annotation definitions because it expected two identifiers.
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *          Again, JLS doesn't seem to allow this, but java.lang.Class has an example of
 *          of this construct.
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 *
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *  Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *  and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *  --a[i].foo didn't work. Fixed unaryExpression
 *
 *  Version 1.0.6 -- John Ridgway, March 17, 2008
 *      Made "assert" a switchable keyword like "enum".
 *      Fixed compilationUnit to disallow "annotation importDeclaration ...".
 *      Changed "identifierRule ('.' identifierRule)*" to "qualifiedName" in more
 *          places.
 *      Changed modifier* and/or variableModifier* to classOrInterfaceModifiers,
 *          modifiers or variableModifiers, as appropriate.
 *      Renamed "bound" to "typeBound" to better match language in the JLS.
 *      Added "memberDeclaration" which rewrites to methodDeclaration or
 *      fieldDeclaration and pulled type into memberDeclaration.  So we parse
 *          type and then move on to decide whether we're dealing with a field
 *          or a method.
 *      Modified "constructorDeclaration" to use "constructorBody" instead of
 *          "methodBody".  constructorBody starts with explicitConstructorInvocation,
 *          then goes on to blockStatement*.  Pulling explicitConstructorInvocation
 *          out of expressions allowed me to simplify "primary".
 *      Changed variableDeclarator to simplify it.
 *      Changed type to use classOrInterfaceType, thus simplifying it; of course
 *          I then had to add classOrInterfaceType, but it is used in several
 *          places.
 *      Fixed annotations, old version allowed "@X(y,z)", which is illegal.
 *      Added optional comma to end of "elementValueArrayInitializer"; as per JLS.
 *      Changed annotationTypeElementRest to use normalClassDeclaration and
 *          normalInterfaceDeclaration rather than classDeclaration and
 *          interfaceDeclaration, thus getting rid of a couple of grammar ambiguities.
 *      Split localVariableDeclaration into localVariableDeclarationStatement
 *          (includes the terminating semi-colon) and localVariableDeclaration.
 *          This allowed me to use localVariableDeclaration in "forInit" clauses,
 *           simplifying them.
 *      Changed switchBlockStatementGroup to use multiple labels.  This adds an
 *          ambiguity, but if one uses appropriately greedy parsing it yields the
 *           parse that is closest to the meaning of the switch statement.
 *      Renamed "forVarControl" to "enhancedForControl" -- JLS language.
 *      Added semantic predicates to test for shift operations rather than other
 *          things.  Thus, for instance, the string "< <" will never be treated
 *          as a left-shift operator.
 *      In "creator" we rule out "nonWildcardTypeArguments" on arrayCreation,
 *          which are illegal.
 *      Moved "nonWildcardTypeArguments into innerCreator.
 *      Removed 'super' superSuffix from explicitGenericInvocation, since that
 *          is only used in explicitConstructorInvocation at the beginning of a
 *           constructorBody.  (This is part of the simplification of expressions
 *           mentioned earlier.)
 *      Simplified primary (got rid of those things that are only used in
 *          explicitConstructorInvocation).
 *      Lexer -- removed "Exponent?" from FloatingPointLiteral choice 4, since it
 *          led to an ambiguity.
 *
 *      This grammar successfully parses every .java file in the JDK 1.5 source
 *          tree (excluding those whose file names include '-', which are not
 *          valid Java compilation units).
 *
 *  Known remaining problems:
 *      "Letter" and "JavaIDDigit" are wrong.  The actual specification of
 *      "Letter" should be "a character for which the method
 *      Character.isJavaidentifierRuleStart(int) returns true."  A "Java
 *      letter-or-digit is a character for which the method
 *      Character.isJavaidentifierRulePart(int) returns true."
 */
public class Java_JavaP extends ChameleonANTLR3Parser {
    public static final int EOF=-1;
    public static final int T__47=47;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__50=50;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__59=59;
    public static final int T__60=60;
    public static final int T__61=61;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__70=70;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__73=73;
    public static final int T__74=74;
    public static final int T__75=75;
    public static final int T__76=76;
    public static final int T__77=77;
    public static final int T__78=78;
    public static final int T__79=79;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__84=84;
    public static final int T__85=85;
    public static final int T__86=86;
    public static final int T__87=87;
    public static final int T__88=88;
    public static final int T__89=89;
    public static final int T__90=90;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__95=95;
    public static final int T__96=96;
    public static final int T__97=97;
    public static final int T__98=98;
    public static final int T__99=99;
    public static final int T__100=100;
    public static final int T__101=101;
    public static final int T__102=102;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__110=110;
    public static final int T__111=111;
    public static final int T__112=112;
    public static final int T__113=113;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__120=120;
    public static final int T__121=121;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int DecimalIntegerLiteral=4;
    public static final int HexIntegerLiteral=5;
    public static final int OctalIntegerLiteral=6;
    public static final int BinaryIntegerLiteral=7;
    public static final int IntegerLiteral=8;
    public static final int DecimalNumeral=9;
    public static final int IntegerTypeSuffix=10;
    public static final int NonZeroDigit=11;
    public static final int Digits=12;
    public static final int Digit=13;
    public static final int OctalNumeral=14;
    public static final int OctalDigits=15;
    public static final int OctalDigit=16;
    public static final int HexNumeral=17;
    public static final int HexDigits=18;
    public static final int HexDigit=19;
    public static final int BinaryNumeral=20;
    public static final int BinaryDigits=21;
    public static final int BinaryDigit=22;
    public static final int DecimalFloatingPointLiteral=23;
    public static final int HexadecimalFloatingPointLiteral=24;
    public static final int FloatingPointLiteral=25;
    public static final int ExponentPart=26;
    public static final int FloatTypeSuffix=27;
    public static final int ExponentIndicator=28;
    public static final int SignedInteger=29;
    public static final int Sign=30;
    public static final int HexSignificand=31;
    public static final int BinaryExponent=32;
    public static final int BinaryExponentIndicator=33;
    public static final int EscapeSequence=34;
    public static final int CharacterLiteral=35;
    public static final int StringLiteral=36;
    public static final int UnicodeEscape=37;
    public static final int OctalEscape=38;
    public static final int ENUM=39;
    public static final int ASSERT=40;
    public static final int Letter=41;
    public static final int JavaIDDigit=42;
    public static final int Identifier=43;
    public static final int WS=44;
    public static final int COMMENT=45;
    public static final int LINE_COMMENT=46;

    // delegates
    // delegators
    public JavaParser gJava;
    public JavaParser gParent;

    protected static class MethodScope_scope {
        Method method;
        Token start;
    }
    protected Stack MethodScope_stack = new Stack();
    protected static class TargetScope_scope {
        CrossReferenceTarget target;
        Token start;
    }
    protected Stack TargetScope_stack = new Stack();


        public Java_JavaP(TokenStream input, JavaParser gJava) {
            this(input, new RecognizerSharedState(), gJava);
        }
        public Java_JavaP(TokenStream input, RecognizerSharedState state, JavaParser gJava) {
            super(input, state);
            this.gJava = gJava;
             
            gParent = gJava;
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return JavaParser.tokenNames; }
    public String getGrammarFileName() { return "JavaP.g"; }



      public MethodInvocation invocation(String name, CrossReferenceTarget target) {
        return expressionFactory().createInvocation(name, target);
      }

      public InfixOperatorInvocation createInfixOperatorInvocation(String name,CrossReferenceTarget target) {
        return expressionFactory().createInfixOperatorInvocation(name,target);
      }

      public PrefixOperatorInvocation createPrefixOperatorInvocation(String name,CrossReferenceTarget target) {
        return expressionFactory().createPrefixOperatorInvocation(name,target);
      }

      public PostfixOperatorInvocation createPostfixOperatorInvocation(String name,CrossReferenceTarget target) {
        return expressionFactory().createPostfixOperatorInvocation(name,target);
      }

      private ExpressionFactory _expressionFactory = new JavaExpressionFactory();

      public ExpressionFactory expressionFactory() {
        return _expressionFactory;
      }

      public void setExpressionFactory(ExpressionFactory expressionFactory) {
        _expressionFactory = expressionFactory;
      }

      private Java7Factory _javaFactory = new Java7Factory();

      public Java7Factory factory() {
        return _javaFactory;
      }

      public void setFactory(Java7Factory factory) {
        _javaFactory = factory;
      }

      public CrossReferenceTarget cloneTargetOfTarget(NamedTarget target) {
        CrossReferenceTarget result = null;
        if(target != null) {
          CrossReferenceTarget targetOfTarget = target.getTarget();
          if(targetOfTarget != null) {
            result = Util.clone(targetOfTarget);
          }
        }
        return result;
      }

      public RegularType createType(String name) {
         return factory().createRegularType(name);
      }

      public RegularType createEnum(String name) {
         return factory().createEnumType(name);
      }

      public NormalMethod createNormalMethod(MethodHeader header) {
         return factory().createNormalMethod(header);
      }

      public CrossReferenceTarget cloneTarget(CrossReferenceTarget target) {
        CrossReferenceTarget result = null;
        if(target != null) {
            result = Util.clone(target);
        }
        return result;
      }

      public static class ClassCreatorRest {
        public ClassCreatorRest(List<Expression> args) {
          _args = args; // NO ENCAPSULATION, BUT IT IS JUST THE PARSER.
        }

        public List<Expression> arguments() {
          return _args;
        }

        private List<Expression> _args;

        public void setBody(ClassBody body) {
          _body = body;
        }

        public ClassBody body() {
          return _body;
        }

        private ClassBody _body;
      }


      public static class StupidVariableDeclaratorId {
           public StupidVariableDeclaratorId(String name, int dimension, CommonToken nameToken) {
             _name = name;
             _dimension = dimension;
             _token = nameToken;
           }
           private final String _name;
           private final int _dimension;

           public CommonToken nameToken() {
             return _token;
           }

           private CommonToken _token;

           public String name() {
             return _name;
           }

           public int dimension() {
             return _dimension;
           }
      }


      public void processType(NamespaceDeclaration np, Type type){
        if(np == null) {throw new IllegalArgumentException("namespace part given to processType is null.");}
        if(type == null) {return;}  //throw new IllegalArgumentException("type given to processType is null.");}
        np.add(type);
        // inherit from java.lang.Object if there is no explicit extends relation
        //String fqn = type.getFullyQualifiedName();
        //if(fqn != null) {
        //  if(type.nonMemberInheritanceRelations().isEmpty() && (! fqn.equals("java.lang.Object"))){
        //    type.addInheritanceRelation(new SubtypeRelation(createTypeReference(expressionFactory().createNamedTarget("java.lang"),"Object")));
        //  }
        //}

      }

      public JavaTypeReference myToArray(JavaTypeReference ref, StupidVariableDeclaratorId id) {
        int dim = id.dimension();
        if(dim > 0) {
          return new ArrayTypeReference(ref,dim);
        } else {
          return ref;
        }
      }

      public JavaTypeReference typeRef(String qn) {
        return java().createTypeReference(qn);
      }

      public CrossReferenceTarget createTypeReferenceTarget(String qn) {
      return java().createTypeReferenceTarget(qn);
      }

      public JavaTypeReference createTypeReference(CrossReference<? extends TargetDeclaration> target, String name) {
        return java().createTypeReference(target,name);
      }

      public JavaTypeReference createTypeReference(NamedTarget target) {
        return java().createTypeReference(target);
      }

      public NamespaceDeclaration createNamespaceDeclaration(String ns) {
        return java().plugin(ObjectOrientedFactory.class).createNamespaceDeclaration(ns);
      }

      public NamespaceDeclaration createNamespaceDeclaration() {
        return java().plugin(ObjectOrientedFactory.class).createRootNamespaceDeclaration();
      }


      public Java7 java() {
        return (Java7)language();
      }


    public static class identifierRule_return extends ParserRuleReturnScope {
        public String element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierRule"
    // JavaP.g:372:1: identifierRule returns [String element] : id= Identifier ;
    public final Java_JavaP.identifierRule_return identifierRule() throws RecognitionException {
        Java_JavaP.identifierRule_return retval = new Java_JavaP.identifierRule_return();
        retval.start = input.LT(1);
        int identifierRule_StartIndex = input.index();
        Object root_0 = null;

        Token id=null;

        Object id_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // JavaP.g:373:5: (id= Identifier )
            // JavaP.g:373:7: id= Identifier
            {
            root_0 = (Object)adaptor.nil();

            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_identifierRule96); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (Object)adaptor.create(id);
            adaptor.addChild(root_0, id_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = (id!=null?id.getText():null);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, identifierRule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierRule"

    public static class compilationUnit_return extends ParserRuleReturnScope {
        public Document element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // JavaP.g:376:1: compilationUnit returns [Document element] : ( annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* ) | (np= packageDeclaration )? (imp= importDeclaration )* (typech= typeDeclaration )* );
    public final Java_JavaP.compilationUnit_return compilationUnit() throws RecognitionException {
        Java_JavaP.compilationUnit_return retval = new Java_JavaP.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.packageDeclaration_return np = null;

        Java_JavaP.importDeclaration_return imp = null;

        Java_JavaP.typeDeclaration_return typech = null;

        Java_JavaP.classOrInterfaceDeclaration_return cd = null;

        Java_JavaP.annotations_return annotations1 = null;




        NamespaceDeclaration npp = null;
        retval.element = getDocument();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // JavaP.g:381:5: ( annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* ) | (np= packageDeclaration )? (imp= importDeclaration )* (typech= typeDeclaration )* )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // JavaP.g:381:10: annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotations_in_compilationUnit126);
                    annotations1=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotations1.getTree());
                    // JavaP.g:382:9: (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* )
                    int alt4=2;
                    int LA4_0 = input.LA(1);

                    if ( (LA4_0==47) ) {
                        alt4=1;
                    }
                    else if ( (LA4_0==ENUM||LA4_0==50||(LA4_0>=53 && LA4_0<=59)||LA4_0==68||LA4_0==96) ) {
                        alt4=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 4, 0, input);

                        throw nvae;
                    }
                    switch (alt4) {
                        case 1 :
                            // JavaP.g:382:13: np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )*
                            {
                            pushFollow(FOLLOW_packageDeclaration_in_compilationUnit142);
                            np=packageDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, np.getTree());
                            if ( state.backtracking==0 ) {
                              npp=np.element;
                                               retval.element.add(npp);
                                              
                            }
                            // JavaP.g:386:13: (imp= importDeclaration )*
                            loop1:
                            do {
                                int alt1=2;
                                int LA1_0 = input.LA(1);

                                if ( (LA1_0==49) ) {
                                    alt1=1;
                                }


                                switch (alt1) {
                            	case 1 :
                            	    // JavaP.g:386:14: imp= importDeclaration
                            	    {
                            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit177);
                            	    imp=importDeclaration();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, imp.getTree());
                            	    if ( state.backtracking==0 ) {
                            	      npp.addImport(imp.element);
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop1;
                                }
                            } while (true);

                            // JavaP.g:387:13: (typech= typeDeclaration )*
                            loop2:
                            do {
                                int alt2=2;
                                int LA2_0 = input.LA(1);

                                if ( (LA2_0==ENUM||LA2_0==48||LA2_0==50||(LA2_0>=53 && LA2_0<=59)||LA2_0==68||LA2_0==96) ) {
                                    alt2=1;
                                }


                                switch (alt2) {
                            	case 1 :
                            	    // JavaP.g:387:14: typech= typeDeclaration
                            	    {
                            	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit197);
                            	    typech=typeDeclaration();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typech.getTree());
                            	    if ( state.backtracking==0 ) {
                            	      processType(npp,typech.element);
                            	                      
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop2;
                                }
                            } while (true);


                            }
                            break;
                        case 2 :
                            // JavaP.g:391:13: cd= classOrInterfaceDeclaration (typech= typeDeclaration )*
                            {
                            pushFollow(FOLLOW_classOrInterfaceDeclaration_in_compilationUnit246);
                            cd=classOrInterfaceDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                            if ( state.backtracking==0 ) {
                              npp = createNamespaceDeclaration();
                                              retval.element.add(npp);
                                              processType(npp,cd.element);
                                             
                            }
                            // JavaP.g:396:13: (typech= typeDeclaration )*
                            loop3:
                            do {
                                int alt3=2;
                                int LA3_0 = input.LA(1);

                                if ( (LA3_0==ENUM||LA3_0==48||LA3_0==50||(LA3_0>=53 && LA3_0<=59)||LA3_0==68||LA3_0==96) ) {
                                    alt3=1;
                                }


                                switch (alt3) {
                            	case 1 :
                            	    // JavaP.g:396:14: typech= typeDeclaration
                            	    {
                            	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit280);
                            	    typech=typeDeclaration();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typech.getTree());
                            	    if ( state.backtracking==0 ) {
                            	      processType(npp,typech.element);
                            	                     
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop3;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // JavaP.g:401:9: (np= packageDeclaration )? (imp= importDeclaration )* (typech= typeDeclaration )*
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:401:9: (np= packageDeclaration )?
                    int alt5=2;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==47) ) {
                        alt5=1;
                    }
                    switch (alt5) {
                        case 1 :
                            // JavaP.g:401:10: np= packageDeclaration
                            {
                            pushFollow(FOLLOW_packageDeclaration_in_compilationUnit335);
                            np=packageDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, np.getTree());
                            if ( state.backtracking==0 ) {

                                            npp=np.element;
                                          
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                               if(npp == null) {
                                 npp = createNamespaceDeclaration();
                               }
                               retval.element.add(npp);
                              
                    }
                    // JavaP.g:412:9: (imp= importDeclaration )*
                    loop6:
                    do {
                        int alt6=2;
                        int LA6_0 = input.LA(1);

                        if ( (LA6_0==49) ) {
                            alt6=1;
                        }


                        switch (alt6) {
                    	case 1 :
                    	    // JavaP.g:412:10: imp= importDeclaration
                    	    {
                    	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit384);
                    	    imp=importDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, imp.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      npp.addImport(imp.element);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop6;
                        }
                    } while (true);

                    // JavaP.g:413:9: (typech= typeDeclaration )*
                    loop7:
                    do {
                        int alt7=2;
                        int LA7_0 = input.LA(1);

                        if ( (LA7_0==ENUM||LA7_0==48||LA7_0==50||(LA7_0>=53 && LA7_0<=59)||LA7_0==68||LA7_0==96) ) {
                            alt7=1;
                        }


                        switch (alt7) {
                    	case 1 :
                    	    // JavaP.g:413:10: typech= typeDeclaration
                    	    {
                    	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit402);
                    	    typech=typeDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typech.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      processType(npp,typech.element);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop7;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        public NamespaceDeclaration element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // JavaP.g:416:1: packageDeclaration returns [NamespaceDeclaration element] : pkgkw= 'package' qn= qualifiedName ';' ;
    public final Java_JavaP.packageDeclaration_return packageDeclaration() throws RecognitionException {
        Java_JavaP.packageDeclaration_return retval = new Java_JavaP.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token pkgkw=null;
        Token char_literal2=null;
        Java_JavaP.qualifiedName_return qn = null;


        Object pkgkw_tree=null;
        Object char_literal2_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // JavaP.g:417:5: (pkgkw= 'package' qn= qualifiedName ';' )
            // JavaP.g:417:9: pkgkw= 'package' qn= qualifiedName ';'
            {
            root_0 = (Object)adaptor.nil();

            pkgkw=(Token)match(input,47,FOLLOW_47_in_packageDeclaration432); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            pkgkw_tree = (Object)adaptor.create(pkgkw);
            adaptor.addChild(root_0, pkgkw_tree);
            }
            pushFollow(FOLLOW_qualifiedName_in_packageDeclaration436);
            qn=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qn.getTree());
            char_literal2=(Token)match(input,48,FOLLOW_48_in_packageDeclaration438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal2_tree = (Object)adaptor.create(char_literal2);
            adaptor.addChild(root_0, char_literal2_tree);
            }
            if ( state.backtracking==0 ) {

                         retval.element = createNamespaceDeclaration((qn!=null?input.toString(qn.start,qn.stop):null));
                         setKeyword(retval.element,pkgkw);
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        public Import element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // JavaP.g:424:1: importDeclaration returns [Import element] : im= 'import' (st= 'static' )? qn= qualifiedName ( '.' '*' )? ';' ;
    public final Java_JavaP.importDeclaration_return importDeclaration() throws RecognitionException {
        Java_JavaP.importDeclaration_return retval = new Java_JavaP.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token im=null;
        Token st=null;
        Token char_literal3=null;
        Token char_literal4=null;
        Token char_literal5=null;
        Java_JavaP.qualifiedName_return qn = null;


        Object im_tree=null;
        Object st_tree=null;
        Object char_literal3_tree=null;
        Object char_literal4_tree=null;
        Object char_literal5_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // JavaP.g:425:5: (im= 'import' (st= 'static' )? qn= qualifiedName ( '.' '*' )? ';' )
            // JavaP.g:425:9: im= 'import' (st= 'static' )? qn= qualifiedName ( '.' '*' )? ';'
            {
            root_0 = (Object)adaptor.nil();

            im=(Token)match(input,49,FOLLOW_49_in_importDeclaration474); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            im_tree = (Object)adaptor.create(im);
            adaptor.addChild(root_0, im_tree);
            }
            // JavaP.g:425:23: (st= 'static' )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==50) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // JavaP.g:0:0: st= 'static'
                    {
                    st=(Token)match(input,50,FOLLOW_50_in_importDeclaration478); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    st_tree = (Object)adaptor.create(st);
                    adaptor.addChild(root_0, st_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifiedName_in_importDeclaration483);
            qn=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qn.getTree());
            if ( state.backtracking==0 ) {
              if(st == null) {
                         retval.element = new TypeImport(typeRef((qn!=null?input.toString(qn.start,qn.stop):null)));
                         setKeyword(retval.element,im);
                       } else {
                         retval.element = new SingleStaticImport(typeRef(Util.getAllButLastPart((qn!=null?input.toString(qn.start,qn.stop):null))),Util.getLastPart((qn!=null?input.toString(qn.start,qn.stop):null)));
                         setKeyword(retval.element,im);
                       }
                      
            }
            // JavaP.g:434:10: ( '.' '*' )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==51) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // JavaP.g:434:11: '.' '*'
                    {
                    char_literal3=(Token)match(input,51,FOLLOW_51_in_importDeclaration505); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal3_tree = (Object)adaptor.create(char_literal3);
                    adaptor.addChild(root_0, char_literal3_tree);
                    }
                    char_literal4=(Token)match(input,52,FOLLOW_52_in_importDeclaration507); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal4_tree = (Object)adaptor.create(char_literal4);
                    adaptor.addChild(root_0, char_literal4_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element.removeAllMetadata();
                                   if(st == null) {
                                     retval.element = new JavaDemandImport(new NameReference((qn!=null?input.toString(qn.start,qn.stop):null),DeclarationContainer.class));
                                     setKeyword(retval.element,im);
                                   } else {
                                     retval.element = new StaticDemandImport(new NameReference((qn!=null?input.toString(qn.start,qn.stop):null),DeclarationContainer.class));
                                     setKeyword(retval.element,im);
                                   }
                                  
                    }

                    }
                    break;

            }

            char_literal5=(Token)match(input,48,FOLLOW_48_in_importDeclaration535); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal5_tree = (Object)adaptor.create(char_literal5);
            adaptor.addChild(root_0, char_literal5_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        public Type element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDeclaration"
    // JavaP.g:448:1: typeDeclaration returns [Type element] : (cd= classOrInterfaceDeclaration | ';' );
    public final Java_JavaP.typeDeclaration_return typeDeclaration() throws RecognitionException {
        Java_JavaP.typeDeclaration_return retval = new Java_JavaP.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal6=null;
        Java_JavaP.classOrInterfaceDeclaration_return cd = null;


        Object char_literal6_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // JavaP.g:449:5: (cd= classOrInterfaceDeclaration | ';' )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==ENUM||LA11_0==50||(LA11_0>=53 && LA11_0<=59)||LA11_0==68||LA11_0==96) ) {
                alt11=1;
            }
            else if ( (LA11_0==48) ) {
                alt11=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // JavaP.g:449:9: cd= classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration561);
                    cd=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = cd.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:450:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal6=(Token)match(input,48,FOLLOW_48_in_typeDeclaration573); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal6_tree = (Object)adaptor.create(char_literal6);
                    adaptor.addChild(root_0, char_literal6_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class classOrInterfaceDeclaration_return extends ParserRuleReturnScope {
        public Type element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceDeclaration"
    // JavaP.g:456:1: classOrInterfaceDeclaration returns [Type element] : mods= classOrInterfaceModifiers (cd= classDeclaration | id= interfaceDeclaration ) ;
    public final Java_JavaP.classOrInterfaceDeclaration_return classOrInterfaceDeclaration() throws RecognitionException {
        Java_JavaP.classOrInterfaceDeclaration_return retval = new Java_JavaP.classOrInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int classOrInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.classOrInterfaceModifiers_return mods = null;

        Java_JavaP.classDeclaration_return cd = null;

        Java_JavaP.interfaceDeclaration_return id = null;



        Token start = null;
              Token end = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // JavaP.g:463:5: (mods= classOrInterfaceModifiers (cd= classDeclaration | id= interfaceDeclaration ) )
            // JavaP.g:463:9: mods= classOrInterfaceModifiers (cd= classDeclaration | id= interfaceDeclaration )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_classOrInterfaceModifiers_in_classOrInterfaceDeclaration609);
            mods=classOrInterfaceModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
            if ( state.backtracking==0 ) {
              if(mods != null) {start=mods.start;}
            }
            // JavaP.g:465:10: (cd= classDeclaration | id= interfaceDeclaration )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ENUM||LA12_0==59) ) {
                alt12=1;
            }
            else if ( (LA12_0==68||LA12_0==96) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // JavaP.g:465:11: cd= classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_classOrInterfaceDeclaration641);
                    cd=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=cd.element; end = cd.stop; if(mods == null) {start=cd.start;}
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:467:13: id= interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration675);
                    id=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=id.element; end=id.stop; if(mods == null) {start=id.start;}
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              if(retval.element != null) {
                         for(Modifier mod:mods.element) {
                           retval.element.addModifier(mod);
                         }
                       }
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                check_null(retval.element);
                setLocation(retval.element, start, end);

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, classOrInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceDeclaration"

    public static class classOrInterfaceModifiers_return extends ParserRuleReturnScope {
        public List<Modifier> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceModifiers"
    // JavaP.g:476:1: classOrInterfaceModifiers returns [List<Modifier> element] : (mod= classOrInterfaceModifier )* ;
    public final Java_JavaP.classOrInterfaceModifiers_return classOrInterfaceModifiers() throws RecognitionException {
        Java_JavaP.classOrInterfaceModifiers_return retval = new Java_JavaP.classOrInterfaceModifiers_return();
        retval.start = input.LT(1);
        int classOrInterfaceModifiers_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.classOrInterfaceModifier_return mod = null;



        retval.element = new ArrayList<Modifier>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // JavaP.g:478:5: ( (mod= classOrInterfaceModifier )* )
            // JavaP.g:478:9: (mod= classOrInterfaceModifier )*
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:478:9: (mod= classOrInterfaceModifier )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==96) ) {
                    int LA13_2 = input.LA(2);

                    if ( (LA13_2==Identifier) ) {
                        alt13=1;
                    }


                }
                else if ( (LA13_0==50||(LA13_0>=53 && LA13_0<=58)) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // JavaP.g:478:10: mod= classOrInterfaceModifier
            	    {
            	    pushFollow(FOLLOW_classOrInterfaceModifier_in_classOrInterfaceModifiers735);
            	    mod=classOrInterfaceModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mod.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(mod.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, classOrInterfaceModifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceModifiers"

    public static class classOrInterfaceModifier_return extends ParserRuleReturnScope {
        public Modifier element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceModifier"
    // JavaP.g:481:1: classOrInterfaceModifier returns [Modifier element] : (a= annotation | 'public' | 'protected' | 'private' | 'abstract' | 'static' | 'final' | 'strictfp' );
    public final Java_JavaP.classOrInterfaceModifier_return classOrInterfaceModifier() throws RecognitionException {
        Java_JavaP.classOrInterfaceModifier_return retval = new Java_JavaP.classOrInterfaceModifier_return();
        retval.start = input.LT(1);
        int classOrInterfaceModifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal7=null;
        Token string_literal8=null;
        Token string_literal9=null;
        Token string_literal10=null;
        Token string_literal11=null;
        Token string_literal12=null;
        Token string_literal13=null;
        Java_JavaP.annotation_return a = null;


        Object string_literal7_tree=null;
        Object string_literal8_tree=null;
        Object string_literal9_tree=null;
        Object string_literal10_tree=null;
        Object string_literal11_tree=null;
        Object string_literal12_tree=null;
        Object string_literal13_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // JavaP.g:483:5: (a= annotation | 'public' | 'protected' | 'private' | 'abstract' | 'static' | 'final' | 'strictfp' )
            int alt14=8;
            switch ( input.LA(1) ) {
            case 96:
                {
                alt14=1;
                }
                break;
            case 53:
                {
                alt14=2;
                }
                break;
            case 54:
                {
                alt14=3;
                }
                break;
            case 55:
                {
                alt14=4;
                }
                break;
            case 56:
                {
                alt14=5;
                }
                break;
            case 50:
                {
                alt14=6;
                }
                break;
            case 57:
                {
                alt14=7;
                }
                break;
            case 58:
                {
                alt14=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }

            switch (alt14) {
                case 1 :
                    // JavaP.g:483:9: a= annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_classOrInterfaceModifier767);
                    a=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = a.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:484:9: 'public'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal7=(Token)match(input,53,FOLLOW_53_in_classOrInterfaceModifier781); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal7_tree = (Object)adaptor.create(string_literal7);
                    adaptor.addChild(root_0, string_literal7_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Public();
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:485:9: 'protected'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal8=(Token)match(input,54,FOLLOW_54_in_classOrInterfaceModifier797); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal8_tree = (Object)adaptor.create(string_literal8);
                    adaptor.addChild(root_0, string_literal8_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Protected();
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:486:9: 'private'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal9=(Token)match(input,55,FOLLOW_55_in_classOrInterfaceModifier810); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal9_tree = (Object)adaptor.create(string_literal9);
                    adaptor.addChild(root_0, string_literal9_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Private();
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:487:9: 'abstract'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal10=(Token)match(input,56,FOLLOW_56_in_classOrInterfaceModifier825); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal10_tree = (Object)adaptor.create(string_literal10);
                    adaptor.addChild(root_0, string_literal10_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Abstract();
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:488:9: 'static'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal11=(Token)match(input,50,FOLLOW_50_in_classOrInterfaceModifier839); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal11_tree = (Object)adaptor.create(string_literal11);
                    adaptor.addChild(root_0, string_literal11_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Static();
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:489:9: 'final'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal12=(Token)match(input,57,FOLLOW_57_in_classOrInterfaceModifier855); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal12_tree = (Object)adaptor.create(string_literal12);
                    adaptor.addChild(root_0, string_literal12_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Final();
                    }

                    }
                    break;
                case 8 :
                    // JavaP.g:490:9: 'strictfp'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal13=(Token)match(input,58,FOLLOW_58_in_classOrInterfaceModifier872); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal13_tree = (Object)adaptor.create(string_literal13);
                    adaptor.addChild(root_0, string_literal13_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new StrictFP();
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, classOrInterfaceModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceModifier"

    public static class modifiers_return extends ParserRuleReturnScope {
        public List<Modifier> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifiers"
    // JavaP.g:493:1: modifiers returns [List<Modifier> element] : (mod= modifier )* ;
    public final Java_JavaP.modifiers_return modifiers() throws RecognitionException {
        Java_JavaP.modifiers_return retval = new Java_JavaP.modifiers_return();
        retval.start = input.LT(1);
        int modifiers_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.modifier_return mod = null;



        retval.element = new ArrayList<Modifier>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // JavaP.g:495:5: ( (mod= modifier )* )
            // JavaP.g:495:9: (mod= modifier )*
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:495:9: (mod= modifier )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==96) ) {
                    int LA15_2 = input.LA(2);

                    if ( (LA15_2==Identifier) ) {
                        alt15=1;
                    }


                }
                else if ( (LA15_0==50||(LA15_0>=53 && LA15_0<=58)||(LA15_0>=74 && LA15_0<=77)) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // JavaP.g:495:10: mod= modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_modifiers907);
            	    mod=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mod.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(mod.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, modifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifiers"

    public static class classDeclaration_return extends ParserRuleReturnScope {
        public Type element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classDeclaration"
    // JavaP.g:498:1: classDeclaration returns [Type element] : (cd= normalClassDeclaration | ed= enumDeclaration );
    public final Java_JavaP.classDeclaration_return classDeclaration() throws RecognitionException {
        Java_JavaP.classDeclaration_return retval = new Java_JavaP.classDeclaration_return();
        retval.start = input.LT(1);
        int classDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.normalClassDeclaration_return cd = null;

        Java_JavaP.enumDeclaration_return ed = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // JavaP.g:500:5: (cd= normalClassDeclaration | ed= enumDeclaration )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==59) ) {
                alt16=1;
            }
            else if ( (LA16_0==ENUM) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // JavaP.g:500:9: cd= normalClassDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalClassDeclaration_in_classDeclaration939);
                    cd=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                       retval.element = cd.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:501:9: ed= enumDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enumDeclaration_in_classDeclaration953);
                    ed=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ed.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = ed.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, classDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classDeclaration"

    public static class normalClassDeclaration_return extends ParserRuleReturnScope {
        public RegularType element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalClassDeclaration"
    // JavaP.g:504:1: normalClassDeclaration returns [RegularType element] : clkw= 'class' t= nameAndParams (extkw= 'extends' sc= type )? (impkw= 'implements' trefs= typeList )? body= classBody ;
    public final Java_JavaP.normalClassDeclaration_return normalClassDeclaration() throws RecognitionException {
        Java_JavaP.normalClassDeclaration_return retval = new Java_JavaP.normalClassDeclaration_return();
        retval.start = input.LT(1);
        int normalClassDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token clkw=null;
        Token extkw=null;
        Token impkw=null;
        Java_JavaP.nameAndParams_return t = null;

        Java_JavaP.type_return sc = null;

        Java_JavaP.typeList_return trefs = null;

        Java_JavaP.classBody_return body = null;


        Object clkw_tree=null;
        Object extkw_tree=null;
        Object impkw_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // JavaP.g:505:5: (clkw= 'class' t= nameAndParams (extkw= 'extends' sc= type )? (impkw= 'implements' trefs= typeList )? body= classBody )
            // JavaP.g:505:9: clkw= 'class' t= nameAndParams (extkw= 'extends' sc= type )? (impkw= 'implements' trefs= typeList )? body= classBody
            {
            root_0 = (Object)adaptor.nil();

            clkw=(Token)match(input,59,FOLLOW_59_in_normalClassDeclaration980); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            clkw_tree = (Object)adaptor.create(clkw);
            adaptor.addChild(root_0, clkw_tree);
            }
            pushFollow(FOLLOW_nameAndParams_in_normalClassDeclaration984);
            t=nameAndParams();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
            if ( state.backtracking==0 ) {
              retval.element=t.element;
            }
            // JavaP.g:506:9: (extkw= 'extends' sc= type )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==60) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // JavaP.g:506:10: extkw= 'extends' sc= type
                    {
                    extkw=(Token)match(input,60,FOLLOW_60_in_normalClassDeclaration999); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    extkw_tree = (Object)adaptor.create(extkw);
                    adaptor.addChild(root_0, extkw_tree);
                    }
                    pushFollow(FOLLOW_type_in_normalClassDeclaration1003);
                    sc=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sc.getTree());
                    if ( state.backtracking==0 ) {
                      SubtypeRelation extRelation = new SubtypeRelation(sc.element);
                                   retval.element.addInheritanceRelation(extRelation);
                                   setKeyword(extRelation,extkw);
                                  
                    }

                    }
                    break;

            }

            // JavaP.g:511:9: (impkw= 'implements' trefs= typeList )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==61) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // JavaP.g:511:10: impkw= 'implements' trefs= typeList
                    {
                    impkw=(Token)match(input,61,FOLLOW_61_in_normalClassDeclaration1032); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    impkw_tree = (Object)adaptor.create(impkw);
                    adaptor.addChild(root_0, impkw_tree);
                    }
                    pushFollow(FOLLOW_typeList_in_normalClassDeclaration1036);
                    trefs=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, trefs.getTree());
                    if ( state.backtracking==0 ) {
                      for(TypeReference ref: trefs.element) {
                                      SubtypeRelation rel = new SubtypeRelation(ref);
                                      retval.element.addInheritanceRelation(rel);
                                      rel.addModifier(new Implements());
                                      setKeyword(rel, impkw);
                                   }
                                  
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_normalClassDeclaration1065);
            body=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
            if ( state.backtracking==0 ) {

                            if(body.element != null) {
                              retval.element.body().addAll(body.element.elements());
                            }
                           
            }
            if ( state.backtracking==0 ) {

                       setKeyword(retval.element,clkw);
                       // FIXME: the implements keyword should not be attached to the class, but there is only one.
                       setKeyword(retval.element,impkw);
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, normalClassDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalClassDeclaration"

    public static class nameAndParams_return extends ParserRuleReturnScope {
        public RegularType element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nameAndParams"
    // JavaP.g:531:1: nameAndParams returns [RegularType element] : tt= createClassHereBecauseANTLRisAnnoying (params= typeParameters )? ;
    public final Java_JavaP.nameAndParams_return nameAndParams() throws RecognitionException {
        Java_JavaP.nameAndParams_return retval = new Java_JavaP.nameAndParams_return();
        retval.start = input.LT(1);
        int nameAndParams_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.createClassHereBecauseANTLRisAnnoying_return tt = null;

        Java_JavaP.typeParameters_return params = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // JavaP.g:532:3: (tt= createClassHereBecauseANTLRisAnnoying (params= typeParameters )? )
            // JavaP.g:533:5: tt= createClassHereBecauseANTLRisAnnoying (params= typeParameters )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_createClassHereBecauseANTLRisAnnoying_in_nameAndParams1102);
            tt=createClassHereBecauseANTLRisAnnoying();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tt.getTree());
            if ( state.backtracking==0 ) {
              retval.element=tt.element;
            }
            // JavaP.g:533:75: (params= typeParameters )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==62) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // JavaP.g:533:76: params= typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_nameAndParams1109);
                    params=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, params.getTree());
                    if ( state.backtracking==0 ) {
                      for(FormalTypeParameter par: params.element){retval.element.addParameter(TypeParameter.class,par);}
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, nameAndParams_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nameAndParams"

    public static class createClassHereBecauseANTLRisAnnoying_return extends ParserRuleReturnScope {
        public RegularType element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createClassHereBecauseANTLRisAnnoying"
    // JavaP.g:536:1: createClassHereBecauseANTLRisAnnoying returns [RegularType element] : name= identifierRule ;
    public final Java_JavaP.createClassHereBecauseANTLRisAnnoying_return createClassHereBecauseANTLRisAnnoying() throws RecognitionException {
        Java_JavaP.createClassHereBecauseANTLRisAnnoying_return retval = new Java_JavaP.createClassHereBecauseANTLRisAnnoying_return();
        retval.start = input.LT(1);
        int createClassHereBecauseANTLRisAnnoying_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.identifierRule_return name = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // JavaP.g:537:4: (name= identifierRule )
            // JavaP.g:537:7: name= identifierRule
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_createClassHereBecauseANTLRisAnnoying1133);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createType((name!=null?input.toString(name.start,name.stop):null)); setName(retval.element,name.start);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, createClassHereBecauseANTLRisAnnoying_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "createClassHereBecauseANTLRisAnnoying"

    public static class typeParameters_return extends ParserRuleReturnScope {
        public List<FormalTypeParameter> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameters"
    // JavaP.g:540:1: typeParameters returns [List<FormalTypeParameter> element] : '<' par= typeParameter ( ',' par= typeParameter )* '>' ;
    public final Java_JavaP.typeParameters_return typeParameters() throws RecognitionException {
        Java_JavaP.typeParameters_return retval = new Java_JavaP.typeParameters_return();
        retval.start = input.LT(1);
        int typeParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal14=null;
        Token char_literal15=null;
        Token char_literal16=null;
        Java_JavaP.typeParameter_return par = null;


        Object char_literal14_tree=null;
        Object char_literal15_tree=null;
        Object char_literal16_tree=null;

        retval.element = new ArrayList<FormalTypeParameter>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // JavaP.g:542:5: ( '<' par= typeParameter ( ',' par= typeParameter )* '>' )
            // JavaP.g:542:9: '<' par= typeParameter ( ',' par= typeParameter )* '>'
            {
            root_0 = (Object)adaptor.nil();

            char_literal14=(Token)match(input,62,FOLLOW_62_in_typeParameters1161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal14_tree = (Object)adaptor.create(char_literal14);
            adaptor.addChild(root_0, char_literal14_tree);
            }
            pushFollow(FOLLOW_typeParameter_in_typeParameters1165);
            par=typeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, par.getTree());
            if ( state.backtracking==0 ) {
              retval.element.add(par.element);
            }
            // JavaP.g:542:65: ( ',' par= typeParameter )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==63) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // JavaP.g:542:66: ',' par= typeParameter
            	    {
            	    char_literal15=(Token)match(input,63,FOLLOW_63_in_typeParameters1169); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal15_tree = (Object)adaptor.create(char_literal15);
            	    adaptor.addChild(root_0, char_literal15_tree);
            	    }
            	    pushFollow(FOLLOW_typeParameter_in_typeParameters1173);
            	    par=typeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, par.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(par.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            char_literal16=(Token)match(input,64,FOLLOW_64_in_typeParameters1178); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal16_tree = (Object)adaptor.create(char_literal16);
            adaptor.addChild(root_0, char_literal16_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, typeParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameters"

    public static class typeParameter_return extends ParserRuleReturnScope {
        public FormalTypeParameter element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameter"
    // JavaP.g:545:1: typeParameter returns [FormalTypeParameter element] : name= identifierRule (extkw= 'extends' bound= typeBound )? ;
    public final Java_JavaP.typeParameter_return typeParameter() throws RecognitionException {
        Java_JavaP.typeParameter_return retval = new Java_JavaP.typeParameter_return();
        retval.start = input.LT(1);
        int typeParameter_StartIndex = input.index();
        Object root_0 = null;

        Token extkw=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.typeBound_return bound = null;


        Object extkw_tree=null;


        Token stop = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // JavaP.g:549:5: (name= identifierRule (extkw= 'extends' bound= typeBound )? )
            // JavaP.g:549:9: name= identifierRule (extkw= 'extends' bound= typeBound )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_typeParameter1207);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new FormalTypeParameter((name!=null?input.toString(name.start,name.stop):null)); stop=name.start;
            }
            // JavaP.g:549:101: (extkw= 'extends' bound= typeBound )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==60) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // JavaP.g:549:102: extkw= 'extends' bound= typeBound
                    {
                    extkw=(Token)match(input,60,FOLLOW_60_in_typeParameter1213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    extkw_tree = (Object)adaptor.create(extkw);
                    adaptor.addChild(root_0, extkw_tree);
                    }
                    pushFollow(FOLLOW_typeBound_in_typeParameter1217);
                    bound=typeBound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bound.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.addConstraint(bound.element); stop=bound.stop;
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              setKeyword(retval.element,extkw);
                       setLocation(retval.element, name.start, stop);
                       setName(retval.element,name.start);
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, typeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameter"

    public static class typeBound_return extends ParserRuleReturnScope {
        public ExtendsConstraint element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeBound"
    // JavaP.g:556:1: typeBound returns [ExtendsConstraint element] : tp= type ( '&' tpp= type )* ;
    public final Java_JavaP.typeBound_return typeBound() throws RecognitionException {
        Java_JavaP.typeBound_return retval = new Java_JavaP.typeBound_return();
        retval.start = input.LT(1);
        int typeBound_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal17=null;
        Java_JavaP.type_return tp = null;

        Java_JavaP.type_return tpp = null;


        Object char_literal17_tree=null;

        retval.element = new ExtendsConstraint();
        JavaIntersectionTypeReference ref = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // JavaP.g:560:5: (tp= type ( '&' tpp= type )* )
            // JavaP.g:560:9: tp= type ( '&' tpp= type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeBound1259);
            tp=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tp.getTree());
            if ( state.backtracking==0 ) {
              retval.element.setTypeReference(tp.element);
            }
            // JavaP.g:562:10: ( '&' tpp= type )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==65) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // JavaP.g:562:11: '&' tpp= type
            	    {
            	    char_literal17=(Token)match(input,65,FOLLOW_65_in_typeBound1282); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal17_tree = (Object)adaptor.create(char_literal17);
            	    adaptor.addChild(root_0, char_literal17_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_typeBound1286);
            	    tpp=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, tpp.getTree());
            	    if ( state.backtracking==0 ) {

            	                 if(ref == null) {
            	                   ref = new JavaIntersectionTypeReference();
            	                   ref.add(retval.element.typeReference());
            	                   retval.element.setTypeReference(ref);
            	                 }
            	                 ref.add(tpp.element);
            	                
            	    }

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, typeBound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeBound"

    protected static class enumDeclaration_scope {
        Type enumType;
    }
    protected Stack enumDeclaration_stack = new Stack();

    public static class enumDeclaration_return extends ParserRuleReturnScope {
        public RegularType element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumDeclaration"
    // JavaP.g:574:1: enumDeclaration returns [RegularType element] : ENUM name= identifierRule ( 'implements' trefs= typeList )? body= enumBody ;
    public final Java_JavaP.enumDeclaration_return enumDeclaration() throws RecognitionException {
        enumDeclaration_stack.push(new enumDeclaration_scope());
        Java_JavaP.enumDeclaration_return retval = new Java_JavaP.enumDeclaration_return();
        retval.start = input.LT(1);
        int enumDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token ENUM18=null;
        Token string_literal19=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.typeList_return trefs = null;

        Java_JavaP.enumBody_return body = null;


        Object ENUM18_tree=null;
        Object string_literal19_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // JavaP.g:578:5: ( ENUM name= identifierRule ( 'implements' trefs= typeList )? body= enumBody )
            // JavaP.g:578:9: ENUM name= identifierRule ( 'implements' trefs= typeList )? body= enumBody
            {
            root_0 = (Object)adaptor.nil();

            ENUM18=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumDeclaration1336); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENUM18_tree = (Object)adaptor.create(ENUM18);
            adaptor.addChild(root_0, ENUM18_tree);
            }
            pushFollow(FOLLOW_identifierRule_in_enumDeclaration1340);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createEnum((name!=null?input.toString(name.start,name.stop):null));
                                            retval.element.addModifier(new Enum());
                                            ((enumDeclaration_scope)enumDeclaration_stack.peek()).enumType =retval.element;
                                            setName(retval.element,name.start);
            }
            // JavaP.g:582:19: ( 'implements' trefs= typeList )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==61) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // JavaP.g:582:20: 'implements' trefs= typeList
                    {
                    string_literal19=(Token)match(input,61,FOLLOW_61_in_enumDeclaration1363); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal19_tree = (Object)adaptor.create(string_literal19);
                    adaptor.addChild(root_0, string_literal19_tree);
                    }
                    pushFollow(FOLLOW_typeList_in_enumDeclaration1367);
                    trefs=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, trefs.getTree());
                    if ( state.backtracking==0 ) {
                      for(TypeReference ref: trefs.element)
                                                     {
                                                      SubtypeRelation rel = new SubtypeRelation(ref);
                                                      retval.element.addInheritanceRelation(rel);
                                                      rel.addModifier(new Implements());
                                                      }
                                                
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumDeclaration1439);
            body=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
            if ( state.backtracking==0 ) {
              retval.element.setBody(body.element);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, enumDeclaration_StartIndex); }
            enumDeclaration_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "enumDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        public ClassBody element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // JavaP.g:595:1: enumBody returns [ClassBody element] : '{' (csts= enumConstants )? ( ',' )? (decls= enumBodyDeclarations )? '}' ;
    public final Java_JavaP.enumBody_return enumBody() throws RecognitionException {
        Java_JavaP.enumBody_return retval = new Java_JavaP.enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal20=null;
        Token char_literal21=null;
        Token char_literal22=null;
        Java_JavaP.enumConstants_return csts = null;

        Java_JavaP.enumBodyDeclarations_return decls = null;


        Object char_literal20_tree=null;
        Object char_literal21_tree=null;
        Object char_literal22_tree=null;

        retval.element = new ClassBody();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // JavaP.g:597:5: ( '{' (csts= enumConstants )? ( ',' )? (decls= enumBodyDeclarations )? '}' )
            // JavaP.g:597:9: '{' (csts= enumConstants )? ( ',' )? (decls= enumBodyDeclarations )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal20=(Token)match(input,66,FOLLOW_66_in_enumBody1469); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal20_tree = (Object)adaptor.create(char_literal20);
            adaptor.addChild(root_0, char_literal20_tree);
            }
            // JavaP.g:597:13: (csts= enumConstants )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==Identifier||LA24_0==96) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // JavaP.g:597:14: csts= enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumBody1474);
                    csts=enumConstants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, csts.getTree());
                    if ( state.backtracking==0 ) {

                                   for(EnumConstant el: csts.element) {
                                      retval.element.add(el);
                                   }
                                  
                    }

                    }
                    break;

            }

            // JavaP.g:602:17: ( ',' )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==63) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // JavaP.g:0:0: ','
                    {
                    char_literal21=(Token)match(input,63,FOLLOW_63_in_enumBody1492); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal21_tree = (Object)adaptor.create(char_literal21);
                    adaptor.addChild(root_0, char_literal21_tree);
                    }

                    }
                    break;

            }

            // JavaP.g:602:22: (decls= enumBodyDeclarations )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==48) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // JavaP.g:602:23: decls= enumBodyDeclarations
                    {
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody1498);
                    decls=enumBodyDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decls.getTree());
                    if ( state.backtracking==0 ) {
                      for(TypeElement el: decls.element){retval.element.add(el);}
                    }

                    }
                    break;

            }

            char_literal22=(Token)match(input,67,FOLLOW_67_in_enumBody1504); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal22_tree = (Object)adaptor.create(char_literal22);
            adaptor.addChild(root_0, char_literal22_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumConstants_return extends ParserRuleReturnScope {
        public List<EnumConstant> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // JavaP.g:605:1: enumConstants returns [List<EnumConstant> element] : ct= enumConstant ( ',' cst= enumConstant )* ;
    public final Java_JavaP.enumConstants_return enumConstants() throws RecognitionException {
        Java_JavaP.enumConstants_return retval = new Java_JavaP.enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal23=null;
        Java_JavaP.enumConstant_return ct = null;

        Java_JavaP.enumConstant_return cst = null;


        Object char_literal23_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // JavaP.g:606:5: (ct= enumConstant ( ',' cst= enumConstant )* )
            // JavaP.g:606:9: ct= enumConstant ( ',' cst= enumConstant )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_enumConstant_in_enumConstants1529);
            ct=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ct.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<EnumConstant>(); retval.element.add(ct.element);
            }
            // JavaP.g:606:107: ( ',' cst= enumConstant )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==63) ) {
                    int LA27_1 = input.LA(2);

                    if ( (LA27_1==Identifier||LA27_1==96) ) {
                        alt27=1;
                    }


                }


                switch (alt27) {
            	case 1 :
            	    // JavaP.g:606:108: ',' cst= enumConstant
            	    {
            	    char_literal23=(Token)match(input,63,FOLLOW_63_in_enumConstants1534); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal23_tree = (Object)adaptor.create(char_literal23);
            	    adaptor.addChild(root_0, char_literal23_tree);
            	    }
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants1538);
            	    cst=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cst.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(cst.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        public EnumConstant element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // JavaP.g:609:1: enumConstant returns [EnumConstant element] : ( annotations )? name= identifierRule (args= arguments )? (body= classBody )? ;
    public final Java_JavaP.enumConstant_return enumConstant() throws RecognitionException {
        Java_JavaP.enumConstant_return retval = new Java_JavaP.enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.arguments_return args = null;

        Java_JavaP.classBody_return body = null;

        Java_JavaP.annotations_return annotations24 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // JavaP.g:610:5: ( ( annotations )? name= identifierRule (args= arguments )? (body= classBody )? )
            // JavaP.g:610:9: ( annotations )? name= identifierRule (args= arguments )? (body= classBody )?
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:610:9: ( annotations )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==96) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // JavaP.g:0:0: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_enumConstant1564);
                    annotations24=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotations24.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_identifierRule_in_enumConstant1569);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new EnumConstant((name!=null?input.toString(name.start,name.stop):null));
            }
            // JavaP.g:610:91: (args= arguments )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==89) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // JavaP.g:610:92: args= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant1576);
                    args=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.addAllParameters(args.element);
                    }

                    }
                    break;

            }

            // JavaP.g:610:158: (body= classBody )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==66) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // JavaP.g:610:159: body= classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant1585);
                    body=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.setBody(body.element);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class enumBodyDeclarations_return extends ParserRuleReturnScope {
        public List<TypeElement> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBodyDeclarations"
    // JavaP.g:613:1: enumBodyDeclarations returns [List<TypeElement> element] : ';' (decl= classBodyDeclaration )* ;
    public final Java_JavaP.enumBodyDeclarations_return enumBodyDeclarations() throws RecognitionException {
        Java_JavaP.enumBodyDeclarations_return retval = new Java_JavaP.enumBodyDeclarations_return();
        retval.start = input.LT(1);
        int enumBodyDeclarations_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal25=null;
        Java_JavaP.classBodyDeclaration_return decl = null;


        Object char_literal25_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // JavaP.g:614:5: ( ';' (decl= classBodyDeclaration )* )
            // JavaP.g:614:9: ';' (decl= classBodyDeclaration )*
            {
            root_0 = (Object)adaptor.nil();

            char_literal25=(Token)match(input,48,FOLLOW_48_in_enumBodyDeclarations1612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal25_tree = (Object)adaptor.create(char_literal25);
            adaptor.addChild(root_0, char_literal25_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element= new ArrayList<TypeElement>();
            }
            // JavaP.g:614:61: (decl= classBodyDeclaration )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==ENUM||LA31_0==Identifier||LA31_0==48||LA31_0==50||(LA31_0>=53 && LA31_0<=59)||LA31_0==62||LA31_0==66||(LA31_0>=68 && LA31_0<=69)||(LA31_0>=74 && LA31_0<=77)||(LA31_0>=79 && LA31_0<=86)||LA31_0==96) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // JavaP.g:614:62: decl= classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations1619);
            	    decl=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(decl.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, enumBodyDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBodyDeclarations"

    public static class interfaceDeclaration_return extends ParserRuleReturnScope {
        public Type element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceDeclaration"
    // JavaP.g:617:1: interfaceDeclaration returns [Type element] : (id= normalInterfaceDeclaration | ad= annotationTypeDeclaration );
    public final Java_JavaP.interfaceDeclaration_return interfaceDeclaration() throws RecognitionException {
        Java_JavaP.interfaceDeclaration_return retval = new Java_JavaP.interfaceDeclaration_return();
        retval.start = input.LT(1);
        int interfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.normalInterfaceDeclaration_return id = null;

        Java_JavaP.annotationTypeDeclaration_return ad = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // JavaP.g:619:5: (id= normalInterfaceDeclaration | ad= annotationTypeDeclaration )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==68) ) {
                alt32=1;
            }
            else if ( (LA32_0==96) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // JavaP.g:619:9: id= normalInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration1652);
                    id=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = id.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:620:9: ad= annotationTypeDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration1666);
                    ad=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ad.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = ad.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, interfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceDeclaration"

    public static class normalInterfaceDeclaration_return extends ParserRuleReturnScope {
        public RegularType element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalInterfaceDeclaration"
    // JavaP.g:623:1: normalInterfaceDeclaration returns [RegularType element] : ifkw= 'interface' name= identifierRule (params= typeParameters )? (extkw= 'extends' trefs= typeList )? body= classBody ;
    public final Java_JavaP.normalInterfaceDeclaration_return normalInterfaceDeclaration() throws RecognitionException {
        Java_JavaP.normalInterfaceDeclaration_return retval = new Java_JavaP.normalInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int normalInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token ifkw=null;
        Token extkw=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.typeParameters_return params = null;

        Java_JavaP.typeList_return trefs = null;

        Java_JavaP.classBody_return body = null;


        Object ifkw_tree=null;
        Object extkw_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // JavaP.g:624:5: (ifkw= 'interface' name= identifierRule (params= typeParameters )? (extkw= 'extends' trefs= typeList )? body= classBody )
            // JavaP.g:624:9: ifkw= 'interface' name= identifierRule (params= typeParameters )? (extkw= 'extends' trefs= typeList )? body= classBody
            {
            root_0 = (Object)adaptor.nil();

            ifkw=(Token)match(input,68,FOLLOW_68_in_normalInterfaceDeclaration1693); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ifkw_tree = (Object)adaptor.create(ifkw);
            adaptor.addChild(root_0, ifkw_tree);
            }
            pushFollow(FOLLOW_identifierRule_in_normalInterfaceDeclaration1697);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createType((name!=null?input.toString(name.start,name.stop):null));
                                                        retval.element.addModifier(new Interface());
                                                        setName(retval.element,name.start);
            }
            // JavaP.g:627:10: (params= typeParameters )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==62) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // JavaP.g:627:11: params= typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration1713);
                    params=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, params.getTree());
                    if ( state.backtracking==0 ) {
                      for(TypeParameter par: params.element){retval.element.addParameter(TypeParameter.class,par);}
                    }

                    }
                    break;

            }

            // JavaP.g:628:10: (extkw= 'extends' trefs= typeList )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==60) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // JavaP.g:628:11: extkw= 'extends' trefs= typeList
                    {
                    extkw=(Token)match(input,60,FOLLOW_60_in_normalInterfaceDeclaration1730); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    extkw_tree = (Object)adaptor.create(extkw);
                    adaptor.addChild(root_0, extkw_tree);
                    }
                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration1734);
                    trefs=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, trefs.getTree());
                    if ( state.backtracking==0 ) {

                                   for(TypeReference ref: trefs.element){
                                    retval.element.addInheritanceRelation(new SubtypeRelation(ref));
                                   }
                                 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_normalInterfaceDeclaration1772);
            body=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
            if ( state.backtracking==0 ) {
              retval.element.setBody(body.element);
            }
            if ( state.backtracking==0 ) {

                        setKeyword(retval.element,extkw);
                        setKeyword(retval.element,ifkw);
                       
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, normalInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalInterfaceDeclaration"

    public static class typeList_return extends ParserRuleReturnScope {
        public List<TypeReference> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // JavaP.g:642:1: typeList returns [List<TypeReference> element] : tp= type ( ',' tpp= type )* ;
    public final Java_JavaP.typeList_return typeList() throws RecognitionException {
        Java_JavaP.typeList_return retval = new Java_JavaP.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal26=null;
        Java_JavaP.type_return tp = null;

        Java_JavaP.type_return tpp = null;


        Object char_literal26_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // JavaP.g:643:5: (tp= type ( ',' tpp= type )* )
            // JavaP.g:643:9: tp= type ( ',' tpp= type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList1810);
            tp=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tp.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<TypeReference>(); retval.element.add(tp.element);
            }
            // JavaP.g:643:99: ( ',' tpp= type )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==63) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // JavaP.g:643:100: ',' tpp= type
            	    {
            	    char_literal26=(Token)match(input,63,FOLLOW_63_in_typeList1814); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal26_tree = (Object)adaptor.create(char_literal26);
            	    adaptor.addChild(root_0, char_literal26_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_typeList1818);
            	    tpp=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, tpp.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(tpp.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class classBody_return extends ParserRuleReturnScope {
        public ClassBody element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // JavaP.g:646:1: classBody returns [ClassBody element] : '{' (decl= classBodyDeclaration )* '}' ;
    public final Java_JavaP.classBody_return classBody() throws RecognitionException {
        Java_JavaP.classBody_return retval = new Java_JavaP.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal27=null;
        Token char_literal28=null;
        Java_JavaP.classBodyDeclaration_return decl = null;


        Object char_literal27_tree=null;
        Object char_literal28_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // JavaP.g:647:5: ( '{' (decl= classBodyDeclaration )* '}' )
            // JavaP.g:647:9: '{' (decl= classBodyDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal27=(Token)match(input,66,FOLLOW_66_in_classBody1845); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal27_tree = (Object)adaptor.create(char_literal27);
            adaptor.addChild(root_0, char_literal27_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new ClassBody();
            }
            // JavaP.g:647:49: (decl= classBodyDeclaration )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==ENUM||LA36_0==Identifier||LA36_0==48||LA36_0==50||(LA36_0>=53 && LA36_0<=59)||LA36_0==62||LA36_0==66||(LA36_0>=68 && LA36_0<=69)||(LA36_0>=74 && LA36_0<=77)||(LA36_0>=79 && LA36_0<=86)||LA36_0==96) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // JavaP.g:647:50: decl= classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody1852);
            	    decl=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(decl.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);

            char_literal28=(Token)match(input,67,FOLLOW_67_in_classBody1858); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal28_tree = (Object)adaptor.create(char_literal28);
            adaptor.addChild(root_0, char_literal28_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        public ClassBody element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // JavaP.g:650:1: interfaceBody returns [ClassBody element] : '{' (decl= interfaceBodyDeclaration )* '}' ;
    public final Java_JavaP.interfaceBody_return interfaceBody() throws RecognitionException {
        Java_JavaP.interfaceBody_return retval = new Java_JavaP.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal29=null;
        Token char_literal30=null;
        Java_JavaP.interfaceBodyDeclaration_return decl = null;


        Object char_literal29_tree=null;
        Object char_literal30_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // JavaP.g:651:5: ( '{' (decl= interfaceBodyDeclaration )* '}' )
            // JavaP.g:651:9: '{' (decl= interfaceBodyDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal29=(Token)match(input,66,FOLLOW_66_in_interfaceBody1881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal29_tree = (Object)adaptor.create(char_literal29);
            adaptor.addChild(root_0, char_literal29_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new ClassBody();
            }
            // JavaP.g:652:13: (decl= interfaceBodyDeclaration )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==ENUM||LA37_0==Identifier||LA37_0==48||LA37_0==50||(LA37_0>=53 && LA37_0<=59)||LA37_0==62||(LA37_0>=68 && LA37_0<=69)||(LA37_0>=74 && LA37_0<=77)||(LA37_0>=79 && LA37_0<=86)||LA37_0==96) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // JavaP.g:652:14: decl= interfaceBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody1900);
            	    decl=interfaceBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            	    if ( state.backtracking==0 ) {
            	      if(decl != null && decl.element != null) {retval.element.add(decl.element);}
            	    }

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);

            char_literal30=(Token)match(input,67,FOLLOW_67_in_interfaceBody1946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal30_tree = (Object)adaptor.create(char_literal30);
            adaptor.addChild(root_0, char_literal30_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classBodyDeclaration_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBodyDeclaration"
    // JavaP.g:658:1: classBodyDeclaration returns [TypeElement element] : (sckw= ';' | (stkw= 'static' )? bl= block | mods= modifiers decl= memberDecl );
    public final Java_JavaP.classBodyDeclaration_return classBodyDeclaration() throws RecognitionException {
        Java_JavaP.classBodyDeclaration_return retval = new Java_JavaP.classBodyDeclaration_return();
        retval.start = input.LT(1);
        int classBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token sckw=null;
        Token stkw=null;
        Java_JavaP.block_return bl = null;

        Java_JavaP.modifiers_return mods = null;

        Java_JavaP.memberDecl_return decl = null;


        Object sckw_tree=null;
        Object stkw_tree=null;


          Token start=null;
          Token stop=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // JavaP.g:664:5: (sckw= ';' | (stkw= 'static' )? bl= block | mods= modifiers decl= memberDecl )
            int alt39=3;
            switch ( input.LA(1) ) {
            case 48:
                {
                alt39=1;
                }
                break;
            case 50:
                {
                int LA39_2 = input.LA(2);

                if ( (LA39_2==66) ) {
                    alt39=2;
                }
                else if ( (LA39_2==ENUM||LA39_2==Identifier||LA39_2==50||(LA39_2>=53 && LA39_2<=59)||LA39_2==62||(LA39_2>=68 && LA39_2<=69)||(LA39_2>=74 && LA39_2<=77)||(LA39_2>=79 && LA39_2<=86)||LA39_2==96) ) {
                    alt39=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 2, input);

                    throw nvae;
                }
                }
                break;
            case 66:
                {
                alt39=2;
                }
                break;
            case ENUM:
            case Identifier:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 62:
            case 68:
            case 69:
            case 74:
            case 75:
            case 76:
            case 77:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 96:
                {
                alt39=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }

            switch (alt39) {
                case 1 :
                    // JavaP.g:664:9: sckw= ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    sckw=(Token)match(input,48,FOLLOW_48_in_classBodyDeclaration1979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sckw_tree = (Object)adaptor.create(sckw);
                    adaptor.addChild(root_0, sckw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new EmptyTypeElement(); start=sckw; stop=sckw;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:665:9: (stkw= 'static' )? bl= block
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:665:13: (stkw= 'static' )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==50) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // JavaP.g:0:0: stkw= 'static'
                            {
                            stkw=(Token)match(input,50,FOLLOW_50_in_classBodyDeclaration1993); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            stkw_tree = (Object)adaptor.create(stkw);
                            adaptor.addChild(root_0, stkw_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_classBodyDeclaration1998);
                    bl=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new StaticInitializer(bl.element); start=stkw;stop=bl.stop;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:666:9: mods= modifiers decl= memberDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_modifiers_in_classBodyDeclaration2012);
                    mods=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
                    pushFollow(FOLLOW_memberDecl_in_classBodyDeclaration2016);
                    decl=memberDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl.element;
                              if(retval.element != null) {
                                retval.element.addModifiers(mods.element); start=mods.start; stop=decl.stop;
                              }
                             
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)start, (CommonToken)stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, classBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBodyDeclaration"

    public static class memberDecl_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memberDecl"
    // JavaP.g:674:1: memberDecl returns [TypeElement element] : (gen= genericMethodOrConstructorDecl | mem= memberDeclaration | vmd= voidMethodDeclaration | cs= constructorDeclaration | id= interfaceDeclaration | cd= classDeclaration );
    public final Java_JavaP.memberDecl_return memberDecl() throws RecognitionException {
        Java_JavaP.memberDecl_return retval = new Java_JavaP.memberDecl_return();
        retval.start = input.LT(1);
        int memberDecl_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.genericMethodOrConstructorDecl_return gen = null;

        Java_JavaP.memberDeclaration_return mem = null;

        Java_JavaP.voidMethodDeclaration_return vmd = null;

        Java_JavaP.constructorDeclaration_return cs = null;

        Java_JavaP.interfaceDeclaration_return id = null;

        Java_JavaP.classDeclaration_return cd = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // JavaP.g:675:5: (gen= genericMethodOrConstructorDecl | mem= memberDeclaration | vmd= voidMethodDeclaration | cs= constructorDeclaration | id= interfaceDeclaration | cd= classDeclaration )
            int alt40=6;
            switch ( input.LA(1) ) {
            case 62:
                {
                alt40=1;
                }
                break;
            case Identifier:
                {
                int LA40_2 = input.LA(2);

                if ( (LA40_2==Identifier||LA40_2==51||LA40_2==62||LA40_2==70) ) {
                    alt40=2;
                }
                else if ( (LA40_2==89) ) {
                    alt40=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 2, input);

                    throw nvae;
                }
                }
                break;
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
                {
                alt40=2;
                }
                break;
            case 69:
                {
                alt40=3;
                }
                break;
            case 68:
            case 96:
                {
                alt40=5;
                }
                break;
            case ENUM:
            case 59:
                {
                alt40=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }

            switch (alt40) {
                case 1 :
                    // JavaP.g:675:9: gen= genericMethodOrConstructorDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_memberDecl2050);
                    gen=genericMethodOrConstructorDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gen.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = gen.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:676:9: mem= memberDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_memberDeclaration_in_memberDecl2064);
                    mem=memberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mem.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = mem.element;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:677:9: vmd= voidMethodDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_voidMethodDeclaration_in_memberDecl2078);
                    vmd=voidMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vmd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = vmd.element;
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:678:9: cs= constructorDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_constructorDeclaration_in_memberDecl2092);
                    cs=constructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cs.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = cs.element;
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:679:9: id= interfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_memberDecl2106);
                    id=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=id.element;
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:680:9: cd= classDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_memberDecl2120);
                    cd=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=cd.element; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, memberDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "memberDecl"

    public static class voidMethodDeclaration_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidMethodDeclaration"
    // JavaP.g:683:1: voidMethodDeclaration returns [Method element] : vt= voidType methodname= identifierRule voidMethodDeclaratorRest ;
    public final Java_JavaP.voidMethodDeclaration_return voidMethodDeclaration() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.voidMethodDeclaration_return retval = new Java_JavaP.voidMethodDeclaration_return();
        retval.start = input.LT(1);
        int voidMethodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.voidType_return vt = null;

        Java_JavaP.identifierRule_return methodname = null;

        Java_JavaP.voidMethodDeclaratorRest_return voidMethodDeclaratorRest31 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // JavaP.g:686:6: (vt= voidType methodname= identifierRule voidMethodDeclaratorRest )
            // JavaP.g:686:8: vt= voidType methodname= identifierRule voidMethodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_voidType_in_voidMethodDeclaration2155);
            vt=voidType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vt.getTree());
            pushFollow(FOLLOW_identifierRule_in_voidMethodDeclaration2159);
            methodname=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, methodname.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createNormalMethod(new SimpleNameMethodHeader((methodname!=null?input.toString(methodname.start,methodname.stop):null), vt.element));
                  	  ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                  	  setName(retval.element,methodname.start);
                  	  
            }
            pushFollow(FOLLOW_voidMethodDeclaratorRest_in_voidMethodDeclaration2169);
            voidMethodDeclaratorRest31=voidMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, voidMethodDeclaratorRest31.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setName(retval.element, methodname.start);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, voidMethodDeclaration_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "voidMethodDeclaration"

    public static class voidType_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidType"
    // JavaP.g:693:1: voidType returns [JavaTypeReference element] : 'void' ;
    public final Java_JavaP.voidType_return voidType() throws RecognitionException {
        Java_JavaP.voidType_return retval = new Java_JavaP.voidType_return();
        retval.start = input.LT(1);
        int voidType_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal32=null;

        Object string_literal32_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // JavaP.g:695:7: ( 'void' )
            // JavaP.g:695:10: 'void'
            {
            root_0 = (Object)adaptor.nil();

            string_literal32=(Token)match(input,69,FOLLOW_69_in_voidType2198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal32_tree = (Object)adaptor.create(string_literal32);
            adaptor.addChild(root_0, string_literal32_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element=typeRef("void");
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop, "__PRIMITIVE");
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, voidType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidType"

    public static class constructorDeclaration_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorDeclaration"
    // JavaP.g:698:1: constructorDeclaration returns [Method element] : consname= identifierRule constructorDeclaratorRest ;
    public final Java_JavaP.constructorDeclaration_return constructorDeclaration() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.constructorDeclaration_return retval = new Java_JavaP.constructorDeclaration_return();
        retval.start = input.LT(1);
        int constructorDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.identifierRule_return consname = null;

        Java_JavaP.constructorDeclaratorRest_return constructorDeclaratorRest33 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // JavaP.g:700:9: (consname= identifierRule constructorDeclaratorRest )
            // JavaP.g:700:11: consname= identifierRule constructorDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_constructorDeclaration2234);
            consname=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, consname.getTree());
            if ( state.backtracking==0 ) {

                           retval.element = createNormalMethod(new SimpleNameMethodHeader((consname!=null?input.toString(consname.start,consname.stop):null), typeRef((consname!=null?input.toString(consname.start,consname.stop):null))));
                           retval.element.addModifier(new JavaConstructor());
                           ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                           setName(retval.element, consname.start);
                          
            }
            pushFollow(FOLLOW_constructorDeclaratorRest_in_constructorDeclaration2263);
            constructorDeclaratorRest33=constructorDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructorDeclaratorRest33.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, constructorDeclaration_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "constructorDeclaration"

    public static class memberDeclaration_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memberDeclaration"
    // JavaP.g:710:1: memberDeclaration returns [TypeElement element] : (method= methodDeclaration | field= fieldDeclaration );
    public final Java_JavaP.memberDeclaration_return memberDeclaration() throws RecognitionException {
        Java_JavaP.memberDeclaration_return retval = new Java_JavaP.memberDeclaration_return();
        retval.start = input.LT(1);
        int memberDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.methodDeclaration_return method = null;

        Java_JavaP.fieldDeclaration_return field = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // JavaP.g:711:5: (method= methodDeclaration | field= fieldDeclaration )
            int alt41=2;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    // JavaP.g:711:9: method= methodDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_methodDeclaration_in_memberDeclaration2285);
                    method=methodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=method.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:712:9: field= fieldDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fieldDeclaration_in_memberDeclaration2299);
                    field=fieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=field.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, memberDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "memberDeclaration"

    public static class genericMethodOrConstructorDecl_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorDecl"
    // JavaP.g:715:1: genericMethodOrConstructorDecl returns [Method element] : params= typeParameters rest= genericMethodOrConstructorRest ;
    public final Java_JavaP.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl() throws RecognitionException {
        Java_JavaP.genericMethodOrConstructorDecl_return retval = new Java_JavaP.genericMethodOrConstructorDecl_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorDecl_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.typeParameters_return params = null;

        Java_JavaP.genericMethodOrConstructorRest_return rest = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // JavaP.g:716:5: (params= typeParameters rest= genericMethodOrConstructorRest )
            // JavaP.g:716:9: params= typeParameters rest= genericMethodOrConstructorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeParameters_in_genericMethodOrConstructorDecl2326);
            params=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, params.getTree());
            pushFollow(FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl2330);
            rest=genericMethodOrConstructorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rest.getTree());
            if ( state.backtracking==0 ) {
              retval.element = rest.element; retval.element.header().addAllTypeParameters(params.element);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, genericMethodOrConstructorDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorDecl"

    public static class genericMethodOrConstructorRest_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorRest"
    // JavaP.g:719:1: genericMethodOrConstructorRest returns [Method element] : ( (t= type | 'void' ) name= identifierRule methodDeclaratorRest | name= identifierRule constructorDeclaratorRest );
    public final Java_JavaP.genericMethodOrConstructorRest_return genericMethodOrConstructorRest() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.genericMethodOrConstructorRest_return retval = new Java_JavaP.genericMethodOrConstructorRest_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal34=null;
        Java_JavaP.type_return t = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.methodDeclaratorRest_return methodDeclaratorRest35 = null;

        Java_JavaP.constructorDeclaratorRest_return constructorDeclaratorRest36 = null;


        Object string_literal34_tree=null;

        TypeReference tref = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // JavaP.g:723:5: ( (t= type | 'void' ) name= identifierRule methodDeclaratorRest | name= identifierRule constructorDeclaratorRest )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==Identifier) ) {
                int LA43_1 = input.LA(2);

                if ( (LA43_1==Identifier||LA43_1==51||LA43_1==62||LA43_1==70) ) {
                    alt43=1;
                }
                else if ( (LA43_1==89) ) {
                    alt43=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA43_0==69||(LA43_0>=79 && LA43_0<=86)) ) {
                alt43=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    // JavaP.g:723:9: (t= type | 'void' ) name= identifierRule methodDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:723:9: (t= type | 'void' )
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==Identifier||(LA42_0>=79 && LA42_0<=86)) ) {
                        alt42=1;
                    }
                    else if ( (LA42_0==69) ) {
                        alt42=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 42, 0, input);

                        throw nvae;
                    }
                    switch (alt42) {
                        case 1 :
                            // JavaP.g:723:10: t= type
                            {
                            pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest2371);
                            t=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                            if ( state.backtracking==0 ) {
                              tref=t.element;
                            }

                            }
                            break;
                        case 2 :
                            // JavaP.g:723:36: 'void'
                            {
                            string_literal34=(Token)match(input,69,FOLLOW_69_in_genericMethodOrConstructorRest2376); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal34_tree = (Object)adaptor.create(string_literal34);
                            adaptor.addChild(root_0, string_literal34_tree);
                            }
                            if ( state.backtracking==0 ) {
                              tref = typeRef("void");
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_identifierRule_in_genericMethodOrConstructorRest2383);
                    name=identifierRule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createNormalMethod(new SimpleNameMethodHeader((name!=null?input.toString(name.start,name.stop):null),tref));
                               ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                               setName(retval.element,name.start);
                              
                    }
                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest2395);
                    methodDeclaratorRest35=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDeclaratorRest35.getTree());

                    }
                    break;
                case 2 :
                    // JavaP.g:728:9: name= identifierRule constructorDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifierRule_in_genericMethodOrConstructorRest2407);
                    name=identifierRule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createNormalMethod(new SimpleNameMethodHeader((name!=null?input.toString(name.start,name.stop):null),typeRef((name!=null?input.toString(name.start,name.stop):null))));
                               ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                               setName(retval.element,name.start);
                              
                    }
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest2419);
                    constructorDeclaratorRest36=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructorDeclaratorRest36.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, genericMethodOrConstructorRest_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorRest"

    public static class methodDeclaration_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaration"
    // JavaP.g:735:1: methodDeclaration returns [Method element] : t= type name= identifierRule methodDeclaratorRest ;
    public final Java_JavaP.methodDeclaration_return methodDeclaration() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.methodDeclaration_return retval = new Java_JavaP.methodDeclaration_return();
        retval.start = input.LT(1);
        int methodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.type_return t = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.methodDeclaratorRest_return methodDeclaratorRest37 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // JavaP.g:737:5: (t= type name= identifierRule methodDeclaratorRest )
            // JavaP.g:737:9: t= type name= identifierRule methodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_methodDeclaration2449);
            t=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
            pushFollow(FOLLOW_identifierRule_in_methodDeclaration2453);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createNormalMethod(new SimpleNameMethodHeader((name!=null?input.toString(name.start,name.stop):null),t.element));
                       ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                       setName(retval.element,name.start);
                       
            }
            pushFollow(FOLLOW_methodDeclaratorRest_in_methodDeclaration2465);
            methodDeclaratorRest37=methodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDeclaratorRest37.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, methodDeclaration_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "methodDeclaration"

    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        public MemberVariableDeclarator element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fieldDeclaration"
    // JavaP.g:744:1: fieldDeclaration returns [MemberVariableDeclarator element] : ref= type decls= variableDeclarators ';' ;
    public final Java_JavaP.fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        Java_JavaP.fieldDeclaration_return retval = new Java_JavaP.fieldDeclaration_return();
        retval.start = input.LT(1);
        int fieldDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal38=null;
        Java_JavaP.type_return ref = null;

        Java_JavaP.variableDeclarators_return decls = null;


        Object char_literal38_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // JavaP.g:745:5: (ref= type decls= variableDeclarators ';' )
            // JavaP.g:745:9: ref= type decls= variableDeclarators ';'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_fieldDeclaration2490);
            ref=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ref.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new MemberVariableDeclarator(ref.element);
            }
            pushFollow(FOLLOW_variableDeclarators_in_fieldDeclaration2496);
            decls=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, decls.getTree());
            if ( state.backtracking==0 ) {
              for(VariableDeclaration decl: decls.element) {retval.element.add(decl);}
            }
            char_literal38=(Token)match(input,48,FOLLOW_48_in_fieldDeclaration2500); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal38_tree = (Object)adaptor.create(char_literal38);
            adaptor.addChild(root_0, char_literal38_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, fieldDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fieldDeclaration"

    public static class interfaceBodyDeclaration_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBodyDeclaration"
    // JavaP.g:748:1: interfaceBodyDeclaration returns [TypeElement element] : (mods= modifiers decl= interfaceMemberDecl | ';' );
    public final Java_JavaP.interfaceBodyDeclaration_return interfaceBodyDeclaration() throws RecognitionException {
        Java_JavaP.interfaceBodyDeclaration_return retval = new Java_JavaP.interfaceBodyDeclaration_return();
        retval.start = input.LT(1);
        int interfaceBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal39=null;
        Java_JavaP.modifiers_return mods = null;

        Java_JavaP.interfaceMemberDecl_return decl = null;


        Object char_literal39_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // JavaP.g:749:5: (mods= modifiers decl= interfaceMemberDecl | ';' )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==ENUM||LA44_0==Identifier||LA44_0==50||(LA44_0>=53 && LA44_0<=59)||LA44_0==62||(LA44_0>=68 && LA44_0<=69)||(LA44_0>=74 && LA44_0<=77)||(LA44_0>=79 && LA44_0<=86)||LA44_0==96) ) {
                alt44=1;
            }
            else if ( (LA44_0==48) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // JavaP.g:749:9: mods= modifiers decl= interfaceMemberDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_modifiers_in_interfaceBodyDeclaration2525);
                    mods=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
                    pushFollow(FOLLOW_interfaceMemberDecl_in_interfaceBodyDeclaration2529);
                    decl=interfaceMemberDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl.element; for(Modifier mod: mods.element){retval.element.addModifier(mod);}
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:750:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal39=(Token)match(input,48,FOLLOW_48_in_interfaceBodyDeclaration2541); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal39_tree = (Object)adaptor.create(char_literal39);
                    adaptor.addChild(root_0, char_literal39_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, interfaceBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBodyDeclaration"

    public static class interfaceMemberDecl_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMemberDecl"
    // JavaP.g:753:1: interfaceMemberDecl returns [TypeElement element] : (decl= interfaceMethodOrFieldDecl | decl2= interfaceGenericMethodDecl | decl5= voidInterfaceMethodDeclaration | decl3= interfaceDeclaration | decl4= classDeclaration );
    public final Java_JavaP.interfaceMemberDecl_return interfaceMemberDecl() throws RecognitionException {
        Java_JavaP.interfaceMemberDecl_return retval = new Java_JavaP.interfaceMemberDecl_return();
        retval.start = input.LT(1);
        int interfaceMemberDecl_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.interfaceMethodOrFieldDecl_return decl = null;

        Java_JavaP.interfaceGenericMethodDecl_return decl2 = null;

        Java_JavaP.voidInterfaceMethodDeclaration_return decl5 = null;

        Java_JavaP.interfaceDeclaration_return decl3 = null;

        Java_JavaP.classDeclaration_return decl4 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // JavaP.g:754:5: (decl= interfaceMethodOrFieldDecl | decl2= interfaceGenericMethodDecl | decl5= voidInterfaceMethodDeclaration | decl3= interfaceDeclaration | decl4= classDeclaration )
            int alt45=5;
            switch ( input.LA(1) ) {
            case Identifier:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
                {
                alt45=1;
                }
                break;
            case 62:
                {
                alt45=2;
                }
                break;
            case 69:
                {
                alt45=3;
                }
                break;
            case 68:
            case 96:
                {
                alt45=4;
                }
                break;
            case ENUM:
            case 59:
                {
                alt45=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }

            switch (alt45) {
                case 1 :
                    // JavaP.g:754:9: decl= interfaceMethodOrFieldDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl2566);
                    decl=interfaceMethodOrFieldDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:755:9: decl2= interfaceGenericMethodDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl2580);
                    decl2=interfaceGenericMethodDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl2.element;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:756:9: decl5= voidInterfaceMethodDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_voidInterfaceMethodDeclaration_in_interfaceMemberDecl2594);
                    decl5=voidInterfaceMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl5.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl5.element;
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:757:9: decl3= interfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_interfaceMemberDecl2608);
                    decl3=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl3.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl3.element; 
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:758:9: decl4= classDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_interfaceMemberDecl2622);
                    decl4=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl4.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl4.element; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, interfaceMemberDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMemberDecl"

    public static class voidInterfaceMethodDeclaration_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidInterfaceMethodDeclaration"
    // JavaP.g:761:1: voidInterfaceMethodDeclaration returns [Method element] : vt= voidType methodname= identifierRule voidInterfaceMethodDeclaratorRest ;
    public final Java_JavaP.voidInterfaceMethodDeclaration_return voidInterfaceMethodDeclaration() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.voidInterfaceMethodDeclaration_return retval = new Java_JavaP.voidInterfaceMethodDeclaration_return();
        retval.start = input.LT(1);
        int voidInterfaceMethodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.voidType_return vt = null;

        Java_JavaP.identifierRule_return methodname = null;

        Java_JavaP.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest40 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // JavaP.g:763:6: (vt= voidType methodname= identifierRule voidInterfaceMethodDeclaratorRest )
            // JavaP.g:763:8: vt= voidType methodname= identifierRule voidInterfaceMethodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_voidType_in_voidInterfaceMethodDeclaration2654);
            vt=voidType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vt.getTree());
            pushFollow(FOLLOW_identifierRule_in_voidInterfaceMethodDeclaration2658);
            methodname=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, methodname.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createNormalMethod(new SimpleNameMethodHeader((methodname!=null?input.toString(methodname.start,methodname.stop):null), vt.element));
                  	   ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                  	   setName(retval.element,methodname.start);
                  	   
            }
            pushFollow(FOLLOW_voidInterfaceMethodDeclaratorRest_in_voidInterfaceMethodDeclaration2669);
            voidInterfaceMethodDeclaratorRest40=voidInterfaceMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, voidInterfaceMethodDeclaratorRest40.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, voidInterfaceMethodDeclaration_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "voidInterfaceMethodDeclaration"

    public static class interfaceMethodOrFieldDecl_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodOrFieldDecl"
    // JavaP.g:770:1: interfaceMethodOrFieldDecl returns [TypeElement element] : (cst= interfaceConstant | m= interfaceMethod );
    public final Java_JavaP.interfaceMethodOrFieldDecl_return interfaceMethodOrFieldDecl() throws RecognitionException {
        Java_JavaP.interfaceMethodOrFieldDecl_return retval = new Java_JavaP.interfaceMethodOrFieldDecl_return();
        retval.start = input.LT(1);
        int interfaceMethodOrFieldDecl_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.interfaceConstant_return cst = null;

        Java_JavaP.interfaceMethod_return m = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // JavaP.g:771:5: (cst= interfaceConstant | m= interfaceMethod )
            int alt46=2;
            alt46 = dfa46.predict(input);
            switch (alt46) {
                case 1 :
                    // JavaP.g:771:9: cst= interfaceConstant
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceConstant_in_interfaceMethodOrFieldDecl2695);
                    cst=interfaceConstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cst.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = cst.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:772:9: m= interfaceMethod
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceMethod_in_interfaceMethodOrFieldDecl2709);
                    m=interfaceMethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, m.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = m.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, interfaceMethodOrFieldDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodOrFieldDecl"

    public static class interfaceConstant_return extends ParserRuleReturnScope {
        public MemberVariableDeclarator element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceConstant"
    // JavaP.g:776:1: interfaceConstant returns [MemberVariableDeclarator element] : ref= type decl= constantDeclarator ( ',' dec= constantDeclarator )* ';' ;
    public final Java_JavaP.interfaceConstant_return interfaceConstant() throws RecognitionException {
        Java_JavaP.interfaceConstant_return retval = new Java_JavaP.interfaceConstant_return();
        retval.start = input.LT(1);
        int interfaceConstant_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal41=null;
        Token char_literal42=null;
        Java_JavaP.type_return ref = null;

        Java_JavaP.constantDeclarator_return decl = null;

        Java_JavaP.constantDeclarator_return dec = null;


        Object char_literal41_tree=null;
        Object char_literal42_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // JavaP.g:777:5: (ref= type decl= constantDeclarator ( ',' dec= constantDeclarator )* ';' )
            // JavaP.g:777:9: ref= type decl= constantDeclarator ( ',' dec= constantDeclarator )* ';'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_interfaceConstant2737);
            ref=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ref.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new MemberVariableDeclarator(ref.element);
            }
            pushFollow(FOLLOW_constantDeclarator_in_interfaceConstant2743);
            decl=constantDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            if ( state.backtracking==0 ) {
              retval.element.add(decl.element);
            }
            // JavaP.g:777:139: ( ',' dec= constantDeclarator )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==63) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // JavaP.g:777:140: ',' dec= constantDeclarator
            	    {
            	    char_literal41=(Token)match(input,63,FOLLOW_63_in_interfaceConstant2747); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal41_tree = (Object)adaptor.create(char_literal41);
            	    adaptor.addChild(root_0, char_literal41_tree);
            	    }
            	    pushFollow(FOLLOW_constantDeclarator_in_interfaceConstant2751);
            	    dec=constantDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dec.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(dec.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);

            char_literal42=(Token)match(input,48,FOLLOW_48_in_interfaceConstant2757); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal42_tree = (Object)adaptor.create(char_literal42);
            adaptor.addChild(root_0, char_literal42_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, interfaceConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceConstant"

    public static class interfaceMethod_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethod"
    // JavaP.g:780:1: interfaceMethod returns [Method element] : tref= type methodname= identifierRule interfaceMethodDeclaratorRest ;
    public final Java_JavaP.interfaceMethod_return interfaceMethod() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.interfaceMethod_return retval = new Java_JavaP.interfaceMethod_return();
        retval.start = input.LT(1);
        int interfaceMethod_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.type_return tref = null;

        Java_JavaP.identifierRule_return methodname = null;

        Java_JavaP.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest43 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // JavaP.g:782:2: (tref= type methodname= identifierRule interfaceMethodDeclaratorRest )
            // JavaP.g:782:4: tref= type methodname= identifierRule interfaceMethodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_interfaceMethod2782);
            tref=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
            pushFollow(FOLLOW_identifierRule_in_interfaceMethod2786);
            methodname=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, methodname.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createNormalMethod(new SimpleNameMethodHeader((methodname!=null?input.toString(methodname.start,methodname.stop):null), tref.element));
              	    ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
              	    setName(retval.element,methodname.start);
              	   
            }
            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethod2798);
            interfaceMethodDeclaratorRest43=interfaceMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMethodDeclaratorRest43.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, interfaceMethod_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "interfaceMethod"

    public static class methodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaratorRest"
    // JavaP.g:791:1: methodDeclaratorRest : pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' ) ;
    public final Java_JavaP.methodDeclaratorRest_return methodDeclaratorRest() throws RecognitionException {
        Java_JavaP.methodDeclaratorRest_return retval = new Java_JavaP.methodDeclaratorRest_return();
        retval.start = input.LT(1);
        int methodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token thrkw=null;
        Token char_literal44=null;
        Token char_literal45=null;
        Token char_literal46=null;
        Java_JavaP.formalParameters_return pars = null;

        Java_JavaP.qualifiedNameList_return names = null;

        Java_JavaP.methodBody_return body = null;


        Object thrkw_tree=null;
        Object char_literal44_tree=null;
        Object char_literal45_tree=null;
        Object char_literal46_tree=null;

        int count = 0;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // JavaP.g:793:5: (pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' ) )
            // JavaP.g:793:9: pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_methodDeclaratorRest2821);
            pars=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
            if ( state.backtracking==0 ) {
              for(FormalParameter par: pars.element){
                             ((MethodScope_scope)MethodScope_stack.peek()).method.header().addFormalParameter(par);
                          }
                         
            }
            // JavaP.g:798:9: ( '[' ']' )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==70) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // JavaP.g:798:10: '[' ']'
            	    {
            	    char_literal44=(Token)match(input,70,FOLLOW_70_in_methodDeclaratorRest2845); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal44_tree = (Object)adaptor.create(char_literal44);
            	    adaptor.addChild(root_0, char_literal44_tree);
            	    }
            	    char_literal45=(Token)match(input,71,FOLLOW_71_in_methodDeclaratorRest2847); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal45_tree = (Object)adaptor.create(char_literal45);
            	    adaptor.addChild(root_0, char_literal45_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      count++;
            	    }

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if(count > 0) {
                         JavaTypeReference original = (JavaTypeReference)((MethodScope_scope)MethodScope_stack.peek()).method.returnTypeReference();
                         ((MethodScope_scope)MethodScope_stack.peek()).method.setReturnTypeReference(new ArrayTypeReference(original,count));
                       }
                      
            }
            // JavaP.g:804:9: (thrkw= 'throws' names= qualifiedNameList )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==72) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // JavaP.g:804:10: thrkw= 'throws' names= qualifiedNameList
                    {
                    thrkw=(Token)match(input,72,FOLLOW_72_in_methodDeclaratorRest2874); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    thrkw_tree = (Object)adaptor.create(thrkw);
                    adaptor.addChild(root_0, thrkw_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList_in_methodDeclaratorRest2878);
                    names=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, names.getTree());
                    if ( state.backtracking==0 ) {
                       ExceptionClause clause = new ExceptionClause(); for(String name: names.element){clause.add(new TypeExceptionDeclaration(typeRef(name)));((MethodScope_scope)MethodScope_stack.peek()).method.setExceptionClause(clause);}
                    }

                    }
                    break;

            }

            // JavaP.g:805:9: (body= methodBody | ';' )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==66) ) {
                alt50=1;
            }
            else if ( (LA50_0==48) ) {
                alt50=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // JavaP.g:805:13: body= methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_methodDeclaratorRest2898);
                    body=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
                    if ( state.backtracking==0 ) {
                      ((MethodScope_scope)MethodScope_stack.peek()).method.setImplementation(new RegularImplementation(body.element));
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:806:13: ';'
                    {
                    char_literal46=(Token)match(input,48,FOLLOW_48_in_methodDeclaratorRest2914); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal46_tree = (Object)adaptor.create(char_literal46);
                    adaptor.addChild(root_0, char_literal46_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((MethodScope_scope)MethodScope_stack.peek()).method.setImplementation(null);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              setKeyword(((MethodScope_scope)MethodScope_stack.peek()).method,thrkw);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, methodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaratorRest"

    public static class voidMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidMethodDeclaratorRest"
    // JavaP.g:811:1: voidMethodDeclaratorRest : pars= formalParameters (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' ) ;
    public final Java_JavaP.voidMethodDeclaratorRest_return voidMethodDeclaratorRest() throws RecognitionException {
        Java_JavaP.voidMethodDeclaratorRest_return retval = new Java_JavaP.voidMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token thrkw=null;
        Token char_literal47=null;
        Java_JavaP.formalParameters_return pars = null;

        Java_JavaP.qualifiedNameList_return names = null;

        Java_JavaP.methodBody_return body = null;


        Object thrkw_tree=null;
        Object char_literal47_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // JavaP.g:812:5: (pars= formalParameters (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' ) )
            // JavaP.g:812:9: pars= formalParameters (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_voidMethodDeclaratorRest2957);
            pars=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
            if ( state.backtracking==0 ) {

                       // On parse error, this may get executed even without a match.
                       if(pars != null) {
                       for(FormalParameter par: pars.element){
                          ((MethodScope_scope)MethodScope_stack.peek()).method.header().addFormalParameter(par);
                       }
                       }
                     
            }
            // JavaP.g:820:10: (thrkw= 'throws' names= qualifiedNameList )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==72) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // JavaP.g:820:11: thrkw= 'throws' names= qualifiedNameList
                    {
                    thrkw=(Token)match(input,72,FOLLOW_72_in_voidMethodDeclaratorRest2973); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    thrkw_tree = (Object)adaptor.create(thrkw);
                    adaptor.addChild(root_0, thrkw_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList_in_voidMethodDeclaratorRest2977);
                    names=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, names.getTree());
                    if ( state.backtracking==0 ) {
                       ExceptionClause clause = new ExceptionClause(); for(String name: names.element){clause.add(new TypeExceptionDeclaration(typeRef(name)));((MethodScope_scope)MethodScope_stack.peek()).method.setExceptionClause(clause);}
                    }

                    }
                    break;

            }

            // JavaP.g:821:9: (body= methodBody | ';' )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==66) ) {
                alt52=1;
            }
            else if ( (LA52_0==48) ) {
                alt52=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }
            switch (alt52) {
                case 1 :
                    // JavaP.g:821:13: body= methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_voidMethodDeclaratorRest2997);
                    body=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
                    if ( state.backtracking==0 ) {
                      ((MethodScope_scope)MethodScope_stack.peek()).method.setImplementation(new RegularImplementation(body.element));
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:822:13: ';'
                    {
                    char_literal47=(Token)match(input,48,FOLLOW_48_in_voidMethodDeclaratorRest3013); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal47_tree = (Object)adaptor.create(char_literal47);
                    adaptor.addChild(root_0, char_literal47_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((MethodScope_scope)MethodScope_stack.peek()).method.setImplementation(null);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              setKeyword(((MethodScope_scope)MethodScope_stack.peek()).method,thrkw);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, voidMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidMethodDeclaratorRest"

    public static class interfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodDeclaratorRest"
    // JavaP.g:827:1: interfaceMethodDeclaratorRest : pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? ';' ;
    public final Java_JavaP.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest() throws RecognitionException {
        Java_JavaP.interfaceMethodDeclaratorRest_return retval = new Java_JavaP.interfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int interfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token thrkw=null;
        Token char_literal48=null;
        Token char_literal49=null;
        Token char_literal50=null;
        Java_JavaP.formalParameters_return pars = null;

        Java_JavaP.qualifiedNameList_return names = null;


        Object thrkw_tree=null;
        Object char_literal48_tree=null;
        Object char_literal49_tree=null;
        Object char_literal50_tree=null;

        int count = 0;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // JavaP.g:829:5: (pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? ';' )
            // JavaP.g:829:9: pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? ';'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest3060);
            pars=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
            if ( state.backtracking==0 ) {
              for(FormalParameter par: pars.element){((MethodScope_scope)MethodScope_stack.peek()).method.header().addFormalParameter(par);}
            }
            // JavaP.g:830:8: ( '[' ']' )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==70) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // JavaP.g:830:9: '[' ']'
            	    {
            	    char_literal48=(Token)match(input,70,FOLLOW_70_in_interfaceMethodDeclaratorRest3072); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal48_tree = (Object)adaptor.create(char_literal48);
            	    adaptor.addChild(root_0, char_literal48_tree);
            	    }
            	    char_literal49=(Token)match(input,71,FOLLOW_71_in_interfaceMethodDeclaratorRest3074); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal49_tree = (Object)adaptor.create(char_literal49);
            	    adaptor.addChild(root_0, char_literal49_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      count++;
            	    }

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if(count > 0) {
                        JavaTypeReference original = (JavaTypeReference)((MethodScope_scope)MethodScope_stack.peek()).method.returnTypeReference();
                        ((MethodScope_scope)MethodScope_stack.peek()).method.setReturnTypeReference(new ArrayTypeReference(original,count));
                      }
                     
            }
            // JavaP.g:836:9: (thrkw= 'throws' names= qualifiedNameList )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==72) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // JavaP.g:836:10: thrkw= 'throws' names= qualifiedNameList
                    {
                    thrkw=(Token)match(input,72,FOLLOW_72_in_interfaceMethodDeclaratorRest3100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    thrkw_tree = (Object)adaptor.create(thrkw);
                    adaptor.addChild(root_0, thrkw_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList_in_interfaceMethodDeclaratorRest3104);
                    names=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, names.getTree());
                    if ( state.backtracking==0 ) {
                       ExceptionClause clause = new ExceptionClause(); for(String name: names.element){clause.add(new TypeExceptionDeclaration(typeRef(name)));((MethodScope_scope)MethodScope_stack.peek()).method.setExceptionClause(clause);}
                    }

                    }
                    break;

            }

            char_literal50=(Token)match(input,48,FOLLOW_48_in_interfaceMethodDeclaratorRest3110); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal50_tree = (Object)adaptor.create(char_literal50);
            adaptor.addChild(root_0, char_literal50_tree);
            }
            if ( state.backtracking==0 ) {
              setKeyword(((MethodScope_scope)MethodScope_stack.peek()).method,thrkw);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, interfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodDeclaratorRest"

    public static class interfaceGenericMethodDecl_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceGenericMethodDecl"
    // JavaP.g:840:1: interfaceGenericMethodDecl returns [TypeElement element] : typeParameters ( type | 'void' ) identifierRule interfaceMethodDeclaratorRest ;
    public final Java_JavaP.interfaceGenericMethodDecl_return interfaceGenericMethodDecl() throws RecognitionException {
        Java_JavaP.interfaceGenericMethodDecl_return retval = new Java_JavaP.interfaceGenericMethodDecl_return();
        retval.start = input.LT(1);
        int interfaceGenericMethodDecl_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal53=null;
        Java_JavaP.typeParameters_return typeParameters51 = null;

        Java_JavaP.type_return type52 = null;

        Java_JavaP.identifierRule_return identifierRule54 = null;

        Java_JavaP.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest55 = null;


        Object string_literal53_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // JavaP.g:841:5: ( typeParameters ( type | 'void' ) identifierRule interfaceMethodDeclaratorRest )
            // JavaP.g:841:9: typeParameters ( type | 'void' ) identifierRule interfaceMethodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeParameters_in_interfaceGenericMethodDecl3142);
            typeParameters51=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters51.getTree());
            // JavaP.g:841:24: ( type | 'void' )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==Identifier||(LA55_0>=79 && LA55_0<=86)) ) {
                alt55=1;
            }
            else if ( (LA55_0==69) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // JavaP.g:841:25: type
                    {
                    pushFollow(FOLLOW_type_in_interfaceGenericMethodDecl3145);
                    type52=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type52.getTree());

                    }
                    break;
                case 2 :
                    // JavaP.g:841:32: 'void'
                    {
                    string_literal53=(Token)match(input,69,FOLLOW_69_in_interfaceGenericMethodDecl3149); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal53_tree = (Object)adaptor.create(string_literal53);
                    adaptor.addChild(root_0, string_literal53_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_identifierRule_in_interfaceGenericMethodDecl3152);
            identifierRule54=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierRule54.getTree());
            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl3162);
            interfaceMethodDeclaratorRest55=interfaceMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMethodDeclaratorRest55.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, interfaceGenericMethodDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceGenericMethodDecl"

    public static class voidInterfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidInterfaceMethodDeclaratorRest"
    // JavaP.g:845:1: voidInterfaceMethodDeclaratorRest : pars= formalParameters ( 'throws' names= qualifiedNameList )? ';' ;
    public final Java_JavaP.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest() throws RecognitionException {
        Java_JavaP.voidInterfaceMethodDeclaratorRest_return retval = new Java_JavaP.voidInterfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidInterfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal56=null;
        Token char_literal57=null;
        Java_JavaP.formalParameters_return pars = null;

        Java_JavaP.qualifiedNameList_return names = null;


        Object string_literal56_tree=null;
        Object char_literal57_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // JavaP.g:846:5: (pars= formalParameters ( 'throws' names= qualifiedNameList )? ';' )
            // JavaP.g:846:9: pars= formalParameters ( 'throws' names= qualifiedNameList )? ';'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest3183);
            pars=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
            if ( state.backtracking==0 ) {
              for(FormalParameter par: pars.element){((MethodScope_scope)MethodScope_stack.peek()).method.header().addFormalParameter(par);}
            }
            // JavaP.g:847:6: ( 'throws' names= qualifiedNameList )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==72) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // JavaP.g:847:7: 'throws' names= qualifiedNameList
                    {
                    string_literal56=(Token)match(input,72,FOLLOW_72_in_voidInterfaceMethodDeclaratorRest3193); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal56_tree = (Object)adaptor.create(string_literal56);
                    adaptor.addChild(root_0, string_literal56_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList_in_voidInterfaceMethodDeclaratorRest3197);
                    names=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, names.getTree());
                    if ( state.backtracking==0 ) {
                       ExceptionClause clause = new ExceptionClause(); for(String name: names.element){clause.add(new TypeExceptionDeclaration(typeRef(name)));((MethodScope_scope)MethodScope_stack.peek()).method.setExceptionClause(clause);}
                    }

                    }
                    break;

            }

            char_literal57=(Token)match(input,48,FOLLOW_48_in_voidInterfaceMethodDeclaratorRest3209); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal57_tree = (Object)adaptor.create(char_literal57);
            adaptor.addChild(root_0, char_literal57_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, voidInterfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidInterfaceMethodDeclaratorRest"

    public static class constructorDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorDeclaratorRest"
    // JavaP.g:851:1: constructorDeclaratorRest : pars= formalParameters ( 'throws' names= qualifiedNameList )? body= constructorBody ;
    public final Java_JavaP.constructorDeclaratorRest_return constructorDeclaratorRest() throws RecognitionException {
        Java_JavaP.constructorDeclaratorRest_return retval = new Java_JavaP.constructorDeclaratorRest_return();
        retval.start = input.LT(1);
        int constructorDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal58=null;
        Java_JavaP.formalParameters_return pars = null;

        Java_JavaP.qualifiedNameList_return names = null;

        Java_JavaP.constructorBody_return body = null;


        Object string_literal58_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // JavaP.g:852:5: (pars= formalParameters ( 'throws' names= qualifiedNameList )? body= constructorBody )
            // JavaP.g:852:9: pars= formalParameters ( 'throws' names= qualifiedNameList )? body= constructorBody
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_constructorDeclaratorRest3230);
            pars=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
            if ( state.backtracking==0 ) {
              for(FormalParameter par: pars.element){((MethodScope_scope)MethodScope_stack.peek()).method.header().addFormalParameter(par);}
            }
            // JavaP.g:853:5: ( 'throws' names= qualifiedNameList )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==72) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // JavaP.g:853:6: 'throws' names= qualifiedNameList
                    {
                    string_literal58=(Token)match(input,72,FOLLOW_72_in_constructorDeclaratorRest3239); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal58_tree = (Object)adaptor.create(string_literal58);
                    adaptor.addChild(root_0, string_literal58_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList_in_constructorDeclaratorRest3243);
                    names=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, names.getTree());
                    if ( state.backtracking==0 ) {
                       ExceptionClause clause = new ExceptionClause(); for(String name: names.element){clause.add(new TypeExceptionDeclaration(typeRef(name)));((MethodScope_scope)MethodScope_stack.peek()).method.setExceptionClause(clause);}
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_constructorBody_in_constructorDeclaratorRest3256);
            body=constructorBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
            if ( state.backtracking==0 ) {
              ((MethodScope_scope)MethodScope_stack.peek()).method.setImplementation(new RegularImplementation(body.element));
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, constructorDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructorDeclaratorRest"

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        public JavaVariableDeclaration element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarator"
    // JavaP.g:857:1: constantDeclarator returns [JavaVariableDeclaration element] : name= identifierRule ( ( '[' ']' )* '=' init= variableInitializer ) ;
    public final Java_JavaP.constantDeclarator_return constantDeclarator() throws RecognitionException {
        Java_JavaP.constantDeclarator_return retval = new Java_JavaP.constantDeclarator_return();
        retval.start = input.LT(1);
        int constantDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal59=null;
        Token char_literal60=null;
        Token char_literal61=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.variableInitializer_return init = null;


        Object char_literal59_tree=null;
        Object char_literal60_tree=null;
        Object char_literal61_tree=null;

        int count = 0;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // JavaP.g:860:5: (name= identifierRule ( ( '[' ']' )* '=' init= variableInitializer ) )
            // JavaP.g:860:9: name= identifierRule ( ( '[' ']' )* '=' init= variableInitializer )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_constantDeclarator3291);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            // JavaP.g:860:29: ( ( '[' ']' )* '=' init= variableInitializer )
            // JavaP.g:860:30: ( '[' ']' )* '=' init= variableInitializer
            {
            // JavaP.g:860:30: ( '[' ']' )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==70) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // JavaP.g:860:31: '[' ']'
            	    {
            	    char_literal59=(Token)match(input,70,FOLLOW_70_in_constantDeclarator3295); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal59_tree = (Object)adaptor.create(char_literal59);
            	    adaptor.addChild(root_0, char_literal59_tree);
            	    }
            	    char_literal60=(Token)match(input,71,FOLLOW_71_in_constantDeclarator3297); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal60_tree = (Object)adaptor.create(char_literal60);
            	    adaptor.addChild(root_0, char_literal60_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      count++;
            	    }

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            char_literal61=(Token)match(input,73,FOLLOW_73_in_constantDeclarator3303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal61_tree = (Object)adaptor.create(char_literal61);
            adaptor.addChild(root_0, char_literal61_tree);
            }
            pushFollow(FOLLOW_variableInitializer_in_constantDeclarator3307);
            init=variableInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, init.getTree());

            }

            if ( state.backtracking==0 ) {
              retval.element = new JavaVariableDeclaration((name!=null?input.toString(name.start,name.stop):null));
                      retval.element.setArrayDimension(count);
                      retval.element.setInitialization(init.element);
                      setName(retval.element, name.start);
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, constantDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarator"

    public static class variableDeclarators_return extends ParserRuleReturnScope {
        public List<VariableDeclaration> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarators"
    // JavaP.g:868:1: variableDeclarators returns [List<VariableDeclaration> element] : decl= variableDeclarator ( ',' decll= variableDeclarator )* ;
    public final Java_JavaP.variableDeclarators_return variableDeclarators() throws RecognitionException {
        Java_JavaP.variableDeclarators_return retval = new Java_JavaP.variableDeclarators_return();
        retval.start = input.LT(1);
        int variableDeclarators_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal62=null;
        Java_JavaP.variableDeclarator_return decl = null;

        Java_JavaP.variableDeclarator_return decll = null;


        Object char_literal62_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // JavaP.g:869:5: (decl= variableDeclarator ( ',' decll= variableDeclarator )* )
            // JavaP.g:869:9: decl= variableDeclarator ( ',' decll= variableDeclarator )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators3342);
            decl=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<VariableDeclaration>(); retval.element.add(decl.element);
            }
            // JavaP.g:869:123: ( ',' decll= variableDeclarator )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==63) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // JavaP.g:869:124: ',' decll= variableDeclarator
            	    {
            	    char_literal62=(Token)match(input,63,FOLLOW_63_in_variableDeclarators3346); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal62_tree = (Object)adaptor.create(char_literal62);
            	    adaptor.addChild(root_0, char_literal62_tree);
            	    }
            	    pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators3350);
            	    decll=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, decll.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(decll.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, variableDeclarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarators"

    public static class variableDeclarator_return extends ParserRuleReturnScope {
        public JavaVariableDeclaration element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarator"
    // JavaP.g:872:1: variableDeclarator returns [JavaVariableDeclaration element] : id= variableDeclaratorId ( '=' init= variableInitializer )? ;
    public final Java_JavaP.variableDeclarator_return variableDeclarator() throws RecognitionException {
        Java_JavaP.variableDeclarator_return retval = new Java_JavaP.variableDeclarator_return();
        retval.start = input.LT(1);
        int variableDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal63=null;
        Java_JavaP.variableDeclaratorId_return id = null;

        Java_JavaP.variableInitializer_return init = null;


        Object char_literal63_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // JavaP.g:874:5: (id= variableDeclaratorId ( '=' init= variableInitializer )? )
            // JavaP.g:874:9: id= variableDeclaratorId ( '=' init= variableInitializer )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclaratorId_in_variableDeclarator3383);
            id=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new JavaVariableDeclaration(id.element.name());
                            retval.element.setArrayDimension(id.element.dimension());
                            setName(retval.element, id.element.nameToken());
                            
            }
            // JavaP.g:878:17: ( '=' init= variableInitializer )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==73) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // JavaP.g:878:18: '=' init= variableInitializer
                    {
                    char_literal63=(Token)match(input,73,FOLLOW_73_in_variableDeclarator3401); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal63_tree = (Object)adaptor.create(char_literal63);
                    adaptor.addChild(root_0, char_literal63_tree);
                    }
                    pushFollow(FOLLOW_variableInitializer_in_variableDeclarator3405);
                    init=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, init.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.setInitialization(init.element);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, variableDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarator"

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        public StupidVariableDeclaratorId element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorId"
    // JavaP.g:883:1: variableDeclaratorId returns [StupidVariableDeclaratorId element] : name= identifierRule ( '[' ']' )* ;
    public final Java_JavaP.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        Java_JavaP.variableDeclaratorId_return retval = new Java_JavaP.variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal64=null;
        Token char_literal65=null;
        Java_JavaP.identifierRule_return name = null;


        Object char_literal64_tree=null;
        Object char_literal65_tree=null;

        int count = 0;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // JavaP.g:885:5: (name= identifierRule ( '[' ']' )* )
            // JavaP.g:885:9: name= identifierRule ( '[' ']' )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_variableDeclaratorId3440);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            // JavaP.g:885:29: ( '[' ']' )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==70) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // JavaP.g:885:30: '[' ']'
            	    {
            	    char_literal64=(Token)match(input,70,FOLLOW_70_in_variableDeclaratorId3443); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal64_tree = (Object)adaptor.create(char_literal64);
            	    adaptor.addChild(root_0, char_literal64_tree);
            	    }
            	    char_literal65=(Token)match(input,71,FOLLOW_71_in_variableDeclaratorId3445); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal65_tree = (Object)adaptor.create(char_literal65);
            	    adaptor.addChild(root_0, char_literal65_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      count++;
            	    }

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               retval.element = new StupidVariableDeclaratorId((name!=null?input.toString(name.start,name.stop):null), count,(CommonToken)name.start);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, variableDeclaratorId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // JavaP.g:888:1: variableInitializer returns [Expression element] : (init= arrayInitializer | expr= expression );
    public final Java_JavaP.variableInitializer_return variableInitializer() throws RecognitionException {
        Java_JavaP.variableInitializer_return retval = new Java_JavaP.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.arrayInitializer_return init = null;

        Java_JavaP.expression_return expr = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // JavaP.g:889:5: (init= arrayInitializer | expr= expression )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==66) ) {
                alt62=1;
            }
            else if ( (LA62_0==IntegerLiteral||LA62_0==FloatingPointLiteral||(LA62_0>=CharacterLiteral && LA62_0<=StringLiteral)||LA62_0==Identifier||LA62_0==69||(LA62_0>=79 && LA62_0<=86)||(LA62_0>=88 && LA62_0<=89)||(LA62_0>=92 && LA62_0<=95)||(LA62_0>=127 && LA62_0<=128)||(LA62_0>=131 && LA62_0<=135)) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    // JavaP.g:889:9: init= arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer3476);
                    init=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, init.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = init.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:890:9: expr= expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer3490);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = expr.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        public ArrayInitializer element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // JavaP.g:893:1: arrayInitializer returns [ArrayInitializer element] : '{' (init= variableInitializer ( ',' initt= variableInitializer )* ( ',' )? )? '}' ;
    public final Java_JavaP.arrayInitializer_return arrayInitializer() throws RecognitionException {
        Java_JavaP.arrayInitializer_return retval = new Java_JavaP.arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal66=null;
        Token char_literal67=null;
        Token char_literal68=null;
        Token char_literal69=null;
        Java_JavaP.variableInitializer_return init = null;

        Java_JavaP.variableInitializer_return initt = null;


        Object char_literal66_tree=null;
        Object char_literal67_tree=null;
        Object char_literal68_tree=null;
        Object char_literal69_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // JavaP.g:894:5: ( '{' (init= variableInitializer ( ',' initt= variableInitializer )* ( ',' )? )? '}' )
            // JavaP.g:894:9: '{' (init= variableInitializer ( ',' initt= variableInitializer )* ( ',' )? )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal66=(Token)match(input,66,FOLLOW_66_in_arrayInitializer3515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal66_tree = (Object)adaptor.create(char_literal66);
            adaptor.addChild(root_0, char_literal66_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new ArrayInitializer();
            }
            // JavaP.g:894:56: (init= variableInitializer ( ',' initt= variableInitializer )* ( ',' )? )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==IntegerLiteral||LA65_0==FloatingPointLiteral||(LA65_0>=CharacterLiteral && LA65_0<=StringLiteral)||LA65_0==Identifier||LA65_0==66||LA65_0==69||(LA65_0>=79 && LA65_0<=86)||(LA65_0>=88 && LA65_0<=89)||(LA65_0>=92 && LA65_0<=95)||(LA65_0>=127 && LA65_0<=128)||(LA65_0>=131 && LA65_0<=135)) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // JavaP.g:894:57: init= variableInitializer ( ',' initt= variableInitializer )* ( ',' )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3522);
                    init=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, init.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.addInitializer(init.element);
                    }
                    // JavaP.g:894:128: ( ',' initt= variableInitializer )*
                    loop63:
                    do {
                        int alt63=2;
                        int LA63_0 = input.LA(1);

                        if ( (LA63_0==63) ) {
                            int LA63_1 = input.LA(2);

                            if ( (LA63_1==IntegerLiteral||LA63_1==FloatingPointLiteral||(LA63_1>=CharacterLiteral && LA63_1<=StringLiteral)||LA63_1==Identifier||LA63_1==66||LA63_1==69||(LA63_1>=79 && LA63_1<=86)||(LA63_1>=88 && LA63_1<=89)||(LA63_1>=92 && LA63_1<=95)||(LA63_1>=127 && LA63_1<=128)||(LA63_1>=131 && LA63_1<=135)) ) {
                                alt63=1;
                            }


                        }


                        switch (alt63) {
                    	case 1 :
                    	    // JavaP.g:894:129: ',' initt= variableInitializer
                    	    {
                    	    char_literal67=(Token)match(input,63,FOLLOW_63_in_arrayInitializer3526); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal67_tree = (Object)adaptor.create(char_literal67);
                    	    adaptor.addChild(root_0, char_literal67_tree);
                    	    }
                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3530);
                    	    initt=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, initt.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      retval.element.addInitializer(initt.element);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop63;
                        }
                    } while (true);

                    // JavaP.g:894:208: ( ',' )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==63) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // JavaP.g:894:209: ','
                            {
                            char_literal68=(Token)match(input,63,FOLLOW_63_in_arrayInitializer3536); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal68_tree = (Object)adaptor.create(char_literal68);
                            adaptor.addChild(root_0, char_literal68_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            char_literal69=(Token)match(input,67,FOLLOW_67_in_arrayInitializer3543); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal69_tree = (Object)adaptor.create(char_literal69);
            adaptor.addChild(root_0, char_literal69_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class modifier_return extends ParserRuleReturnScope {
        public Modifier element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // JavaP.g:897:1: modifier returns [Modifier element] : (mod= classOrInterfaceModifier | 'native' | 'synchronized' | 'transient' | 'volatile' );
    public final Java_JavaP.modifier_return modifier() throws RecognitionException {
        Java_JavaP.modifier_return retval = new Java_JavaP.modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal70=null;
        Token string_literal71=null;
        Token string_literal72=null;
        Token string_literal73=null;
        Java_JavaP.classOrInterfaceModifier_return mod = null;


        Object string_literal70_tree=null;
        Object string_literal71_tree=null;
        Object string_literal72_tree=null;
        Object string_literal73_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // JavaP.g:903:5: (mod= classOrInterfaceModifier | 'native' | 'synchronized' | 'transient' | 'volatile' )
            int alt66=5;
            switch ( input.LA(1) ) {
            case 50:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 96:
                {
                alt66=1;
                }
                break;
            case 74:
                {
                alt66=2;
                }
                break;
            case 75:
                {
                alt66=3;
                }
                break;
            case 76:
                {
                alt66=4;
                }
                break;
            case 77:
                {
                alt66=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }

            switch (alt66) {
                case 1 :
                    // JavaP.g:903:9: mod= classOrInterfaceModifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceModifier_in_modifier3574);
                    mod=classOrInterfaceModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mod.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = mod.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:904:9: 'native'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal70=(Token)match(input,74,FOLLOW_74_in_modifier3586); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal70_tree = (Object)adaptor.create(string_literal70);
                    adaptor.addChild(root_0, string_literal70_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Native();
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:905:9: 'synchronized'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal71=(Token)match(input,75,FOLLOW_75_in_modifier3598); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal71_tree = (Object)adaptor.create(string_literal71);
                    adaptor.addChild(root_0, string_literal71_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Synchronized();
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:906:9: 'transient'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal72=(Token)match(input,76,FOLLOW_76_in_modifier3610); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal72_tree = (Object)adaptor.create(string_literal72);
                    adaptor.addChild(root_0, string_literal72_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Transient();
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:907:9: 'volatile'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal73=(Token)match(input,77,FOLLOW_77_in_modifier3622); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal73_tree = (Object)adaptor.create(string_literal73);
                    adaptor.addChild(root_0, string_literal73_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Volatile();
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class enumConstantName_return extends ParserRuleReturnScope {
        public String element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstantName"
    // JavaP.g:910:1: enumConstantName returns [String element] : id= identifierRule ;
    public final Java_JavaP.enumConstantName_return enumConstantName() throws RecognitionException {
        Java_JavaP.enumConstantName_return retval = new Java_JavaP.enumConstantName_return();
        retval.start = input.LT(1);
        int enumConstantName_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.identifierRule_return id = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // JavaP.g:911:5: (id= identifierRule )
            // JavaP.g:911:9: id= identifierRule
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_enumConstantName3649);
            id=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
            if ( state.backtracking==0 ) {
              retval.element=(id!=null?input.toString(id.start,id.stop):null);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, enumConstantName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstantName"

    public static class typeName_return extends ParserRuleReturnScope {
        public String element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // JavaP.g:914:1: typeName returns [String element] : name= qualifiedName ;
    public final Java_JavaP.typeName_return typeName() throws RecognitionException {
        Java_JavaP.typeName_return retval = new Java_JavaP.typeName_return();
        retval.start = input.LT(1);
        int typeName_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.qualifiedName_return name = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // JavaP.g:915:5: (name= qualifiedName )
            // JavaP.g:915:9: name= qualifiedName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_typeName3676);
            name=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element=name.element;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, typeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class type_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // JavaP.g:918:1: type returns [JavaTypeReference element] : (cd= classOrInterfaceType ( '[' ']' )* | pt= primitiveType ( '[' ']' )* );
    public final Java_JavaP.type_return type() throws RecognitionException {
        Java_JavaP.type_return retval = new Java_JavaP.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal74=null;
        Token char_literal75=null;
        Token char_literal76=null;
        Token char_literal77=null;
        Java_JavaP.classOrInterfaceType_return cd = null;

        Java_JavaP.primitiveType_return pt = null;


        Object char_literal74_tree=null;
        Object char_literal75_tree=null;
        Object char_literal76_tree=null;
        Object char_literal77_tree=null;

        int dimension=0;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // JavaP.g:921:2: (cd= classOrInterfaceType ( '[' ']' )* | pt= primitiveType ( '[' ']' )* )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==Identifier) ) {
                alt69=1;
            }
            else if ( ((LA69_0>=79 && LA69_0<=86)) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // JavaP.g:921:4: cd= classOrInterfaceType ( '[' ']' )*
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceType_in_type3706);
                    cd=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    // JavaP.g:921:28: ( '[' ']' )*
                    loop67:
                    do {
                        int alt67=2;
                        int LA67_0 = input.LA(1);

                        if ( (LA67_0==70) ) {
                            alt67=1;
                        }


                        switch (alt67) {
                    	case 1 :
                    	    // JavaP.g:921:29: '[' ']'
                    	    {
                    	    char_literal74=(Token)match(input,70,FOLLOW_70_in_type3709); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal74_tree = (Object)adaptor.create(char_literal74);
                    	    adaptor.addChild(root_0, char_literal74_tree);
                    	    }
                    	    char_literal75=(Token)match(input,71,FOLLOW_71_in_type3711); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal75_tree = (Object)adaptor.create(char_literal75);
                    	    adaptor.addChild(root_0, char_literal75_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      dimension++;
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop67;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      	         if(dimension > 0) {
                      	           retval.element = cd.element.toArray(dimension);
                      	           cd.element.disconnect();
                      	         } else {
                      	           retval.element = cd.element;
                      	         }
                      	        
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:930:4: pt= primitiveType ( '[' ']' )*
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_type3733);
                    pt=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pt.getTree());
                    // JavaP.g:930:21: ( '[' ']' )*
                    loop68:
                    do {
                        int alt68=2;
                        int LA68_0 = input.LA(1);

                        if ( (LA68_0==70) ) {
                            alt68=1;
                        }


                        switch (alt68) {
                    	case 1 :
                    	    // JavaP.g:930:22: '[' ']'
                    	    {
                    	    char_literal76=(Token)match(input,70,FOLLOW_70_in_type3736); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal76_tree = (Object)adaptor.create(char_literal76);
                    	    adaptor.addChild(root_0, char_literal76_tree);
                    	    }
                    	    char_literal77=(Token)match(input,71,FOLLOW_71_in_type3738); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal77_tree = (Object)adaptor.create(char_literal77);
                    	    adaptor.addChild(root_0, char_literal77_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      dimension++;
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop68;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      	     if(dimension > 0) {
                      	       retval.element = pt.element.toArray(dimension);
                      	       pt.element.disconnect();
                      	     } else {
                      	           retval.element = pt.element;
                      	     }
                      	   
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class possibleUnionType_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "possibleUnionType"
    // JavaP.g:942:1: possibleUnionType returns [JavaTypeReference element] : t= type ( '|' tt= type )* ;
    public final Java_JavaP.possibleUnionType_return possibleUnionType() throws RecognitionException {
        Java_JavaP.possibleUnionType_return retval = new Java_JavaP.possibleUnionType_return();
        retval.start = input.LT(1);
        int possibleUnionType_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal78=null;
        Java_JavaP.type_return t = null;

        Java_JavaP.type_return tt = null;


        Object char_literal78_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // JavaP.g:943:2: (t= type ( '|' tt= type )* )
            // JavaP.g:943:4: t= type ( '|' tt= type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_possibleUnionType3767);
            t=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
            if ( state.backtracking==0 ) {
              retval.element = (t!=null?t.element:null);
            }
            // JavaP.g:944:4: ( '|' tt= type )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==78) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // JavaP.g:944:5: '|' tt= type
            	    {
            	    char_literal78=(Token)match(input,78,FOLLOW_78_in_possibleUnionType3775); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal78_tree = (Object)adaptor.create(char_literal78);
            	    adaptor.addChild(root_0, char_literal78_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_possibleUnionType3779);
            	    tt=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, tt.getTree());
            	    if ( state.backtracking==0 ) {
            	      if(! (retval.element instanceof UnionTypeReference)) {
            	             retval.element = new JavaUnionTypeReference();
            	             ((UnionTypeReference)retval.element).add((t!=null?t.element:null));
            	            }
            	            ((UnionTypeReference)retval.element).add((tt!=null?tt.element:null));
            	           
            	    }

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, possibleUnionType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "possibleUnionType"

    public static class classOrInterfaceType_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceType"
    // JavaP.g:954:1: classOrInterfaceType returns [JavaTypeReference element] : name= identifierRule (args= typeArguments )? ( '.' namex= identifierRule (argsx= typeArguments )? )* ;
    public final Java_JavaP.classOrInterfaceType_return classOrInterfaceType() throws RecognitionException {
        Java_JavaP.classOrInterfaceType_return retval = new Java_JavaP.classOrInterfaceType_return();
        retval.start = input.LT(1);
        int classOrInterfaceType_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal79=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.typeArguments_return args = null;

        Java_JavaP.identifierRule_return namex = null;

        Java_JavaP.typeArguments_return argsx = null;


        Object char_literal79_tree=null;

        CrossReferenceWithTarget target = null;
              Token stop = null;
             
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // JavaP.g:961:2: (name= identifierRule (args= typeArguments )? ( '.' namex= identifierRule (argsx= typeArguments )? )* )
            // JavaP.g:961:4: name= identifierRule (args= typeArguments )? ( '.' namex= identifierRule (argsx= typeArguments )? )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_classOrInterfaceType3816);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {

              	           retval.element = typeRef((name!=null?input.toString(name.start,name.stop):null));
              	           target =  (CrossReferenceWithTarget) createTypeReferenceTarget((name!=null?input.toString(name.start,name.stop):null));
              	           stop=name.start;
              	          
            }
            // JavaP.g:967:10: (args= typeArguments )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==62) ) {
                int LA71_1 = input.LA(2);

                if ( (LA71_1==Identifier||(LA71_1>=79 && LA71_1<=87)) ) {
                    alt71=1;
                }
            }
            switch (alt71) {
                case 1 :
                    // JavaP.g:967:11: args= typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_classOrInterfaceType3843);
                    args=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
                    if ( state.backtracking==0 ) {

                      	           // Add the type arguments
                      	           ((BasicJavaTypeReference)retval.element).addAllArguments(args.element);
                      	           // In this case, we know that the current element must be a type reference,
                      	           // so we set the target to null, and only create type references afterwards.
                      	           target = (CrossReferenceWithTarget)retval.element;
                      	           stop=args.stop;
                      	          
                    }

                    }
                    break;

            }

            // JavaP.g:976:10: ( '.' namex= identifierRule (argsx= typeArguments )? )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==51) ) {
                    int LA73_2 = input.LA(2);

                    if ( (LA73_2==Identifier) ) {
                        alt73=1;
                    }


                }


                switch (alt73) {
            	case 1 :
            	    // JavaP.g:976:11: '.' namex= identifierRule (argsx= typeArguments )?
            	    {
            	    char_literal79=(Token)match(input,51,FOLLOW_51_in_classOrInterfaceType3870); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal79_tree = (Object)adaptor.create(char_literal79);
            	    adaptor.addChild(root_0, char_literal79_tree);
            	    }
            	    pushFollow(FOLLOW_identifierRule_in_classOrInterfaceType3874);
            	    namex=identifierRule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, namex.getTree());
            	    if ( state.backtracking==0 ) {

            	      	           if(target != null) {
            	      	             //retval.element.removeAllMetadata();
            	      	             //for(Element e: retval.element.descendants()) {e.removeAllMetadata();}
            	      	             retval.element = createTypeReference(target,(namex!=null?input.toString(namex.start,namex.stop):null));
            	      	             // We must clone the target here, or else it will be removed from the
            	      	             // type reference we just created.
            	      	             CrossReferenceTarget nt = Util.clone(target);
            	      	             target = (CrossReferenceWithTarget) createTypeReferenceTarget((namex!=null?input.toString(namex.start,namex.stop):null));
            	      	             target.setTarget(nt);
            	      	           } else {
            	      	             throw new Error();
            	      	           }
            	      	           stop=namex.start;
            	      	          
            	    }
            	    // JavaP.g:992:10: (argsx= typeArguments )?
            	    int alt72=2;
            	    int LA72_0 = input.LA(1);

            	    if ( (LA72_0==62) ) {
            	        int LA72_1 = input.LA(2);

            	        if ( (LA72_1==Identifier||(LA72_1>=79 && LA72_1<=87)) ) {
            	            alt72=1;
            	        }
            	    }
            	    switch (alt72) {
            	        case 1 :
            	            // JavaP.g:992:11: argsx= typeArguments
            	            {
            	            pushFollow(FOLLOW_typeArguments_in_classOrInterfaceType3901);
            	            argsx=typeArguments();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, argsx.getTree());
            	            if ( state.backtracking==0 ) {

            	              	           // Add the type arguments
            	                           ((BasicJavaTypeReference)retval.element).addAllArguments(argsx.element);
            	              	           // In this case, we know that the current element must be a type reference,
            	              	           // so we se the target to the current type reference.
            	                           target = (CrossReferenceWithTarget)retval.element;
            	              	           stop = argsx.stop;
            	              	          
            	            }

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	      setLocation(retval.element,name.start,stop);
            	    }

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, classOrInterfaceType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceType"

    public static class primitiveType_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // JavaP.g:1004:1: primitiveType returns [JavaTypeReference element] : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
    public final Java_JavaP.primitiveType_return primitiveType() throws RecognitionException {
        Java_JavaP.primitiveType_return retval = new Java_JavaP.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal80=null;
        Token string_literal81=null;
        Token string_literal82=null;
        Token string_literal83=null;
        Token string_literal84=null;
        Token string_literal85=null;
        Token string_literal86=null;
        Token string_literal87=null;

        Object string_literal80_tree=null;
        Object string_literal81_tree=null;
        Object string_literal82_tree=null;
        Object string_literal83_tree=null;
        Object string_literal84_tree=null;
        Object string_literal85_tree=null;
        Object string_literal86_tree=null;
        Object string_literal87_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // JavaP.g:1006:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
            int alt74=8;
            switch ( input.LA(1) ) {
            case 79:
                {
                alt74=1;
                }
                break;
            case 80:
                {
                alt74=2;
                }
                break;
            case 81:
                {
                alt74=3;
                }
                break;
            case 82:
                {
                alt74=4;
                }
                break;
            case 83:
                {
                alt74=5;
                }
                break;
            case 84:
                {
                alt74=6;
                }
                break;
            case 85:
                {
                alt74=7;
                }
                break;
            case 86:
                {
                alt74=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }

            switch (alt74) {
                case 1 :
                    // JavaP.g:1006:9: 'boolean'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal80=(Token)match(input,79,FOLLOW_79_in_primitiveType3954); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal80_tree = (Object)adaptor.create(string_literal80);
                    adaptor.addChild(root_0, string_literal80_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("boolean");
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1007:9: 'char'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal81=(Token)match(input,80,FOLLOW_80_in_primitiveType3966); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal81_tree = (Object)adaptor.create(string_literal81);
                    adaptor.addChild(root_0, string_literal81_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("char");
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1008:9: 'byte'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal82=(Token)match(input,81,FOLLOW_81_in_primitiveType3978); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal82_tree = (Object)adaptor.create(string_literal82);
                    adaptor.addChild(root_0, string_literal82_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("byte");
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1009:9: 'short'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal83=(Token)match(input,82,FOLLOW_82_in_primitiveType3990); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal83_tree = (Object)adaptor.create(string_literal83);
                    adaptor.addChild(root_0, string_literal83_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("short");
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1010:9: 'int'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal84=(Token)match(input,83,FOLLOW_83_in_primitiveType4002); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal84_tree = (Object)adaptor.create(string_literal84);
                    adaptor.addChild(root_0, string_literal84_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("int");
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1011:9: 'long'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal85=(Token)match(input,84,FOLLOW_84_in_primitiveType4014); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal85_tree = (Object)adaptor.create(string_literal85);
                    adaptor.addChild(root_0, string_literal85_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("long");
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:1012:9: 'float'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal86=(Token)match(input,85,FOLLOW_85_in_primitiveType4026); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal86_tree = (Object)adaptor.create(string_literal86);
                    adaptor.addChild(root_0, string_literal86_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("float");
                    }

                    }
                    break;
                case 8 :
                    // JavaP.g:1013:9: 'double'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal87=(Token)match(input,86,FOLLOW_86_in_primitiveType4038); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal87_tree = (Object)adaptor.create(string_literal87);
                    adaptor.addChild(root_0, string_literal87_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("double");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class variableModifier_return extends ParserRuleReturnScope {
        public Modifier element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableModifier"
    // JavaP.g:1016:1: variableModifier returns [Modifier element] : ( 'final' | a= annotation );
    public final Java_JavaP.variableModifier_return variableModifier() throws RecognitionException {
        Java_JavaP.variableModifier_return retval = new Java_JavaP.variableModifier_return();
        retval.start = input.LT(1);
        int variableModifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal88=null;
        Java_JavaP.annotation_return a = null;


        Object string_literal88_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // JavaP.g:1017:5: ( 'final' | a= annotation )
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==57) ) {
                alt75=1;
            }
            else if ( (LA75_0==96) ) {
                alt75=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    // JavaP.g:1017:9: 'final'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal88=(Token)match(input,57,FOLLOW_57_in_variableModifier4063); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal88_tree = (Object)adaptor.create(string_literal88);
                    adaptor.addChild(root_0, string_literal88_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Final();
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1018:9: a= annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_variableModifier4077);
                    a=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = a.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, variableModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableModifier"

    public static class typeArguments_return extends ParserRuleReturnScope {
        public List<ActualTypeArgument> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArguments"
    // JavaP.g:1021:1: typeArguments returns [List<ActualTypeArgument> element] : '<' arg= typeArgument ( ',' argx= typeArgument )* '>' ;
    public final Java_JavaP.typeArguments_return typeArguments() throws RecognitionException {
        Java_JavaP.typeArguments_return retval = new Java_JavaP.typeArguments_return();
        retval.start = input.LT(1);
        int typeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal89=null;
        Token char_literal90=null;
        Token char_literal91=null;
        Java_JavaP.typeArgument_return arg = null;

        Java_JavaP.typeArgument_return argx = null;


        Object char_literal89_tree=null;
        Object char_literal90_tree=null;
        Object char_literal91_tree=null;

        retval.element = new ArrayList<ActualTypeArgument>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // JavaP.g:1023:5: ( '<' arg= typeArgument ( ',' argx= typeArgument )* '>' )
            // JavaP.g:1023:9: '<' arg= typeArgument ( ',' argx= typeArgument )* '>'
            {
            root_0 = (Object)adaptor.nil();

            char_literal89=(Token)match(input,62,FOLLOW_62_in_typeArguments4106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal89_tree = (Object)adaptor.create(char_literal89);
            adaptor.addChild(root_0, char_literal89_tree);
            }
            pushFollow(FOLLOW_typeArgument_in_typeArguments4118);
            arg=typeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arg.getTree());
            if ( state.backtracking==0 ) {
              retval.element.add(arg.element);
            }
            // JavaP.g:1025:9: ( ',' argx= typeArgument )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==63) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // JavaP.g:1025:10: ',' argx= typeArgument
            	    {
            	    char_literal90=(Token)match(input,63,FOLLOW_63_in_typeArguments4131); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal90_tree = (Object)adaptor.create(char_literal90);
            	    adaptor.addChild(root_0, char_literal90_tree);
            	    }
            	    pushFollow(FOLLOW_typeArgument_in_typeArguments4135);
            	    argx=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, argx.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(argx.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);

            char_literal91=(Token)match(input,64,FOLLOW_64_in_typeArguments4149); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal91_tree = (Object)adaptor.create(char_literal91);
            adaptor.addChild(root_0, char_literal91_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, typeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArguments"

    public static class typeArgument_return extends ParserRuleReturnScope {
        public ActualTypeArgument element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArgument"
    // JavaP.g:1029:1: typeArgument returns [ActualTypeArgument element] : (t= type | '?' ( ( 'extends' | 'super' ) t= type )? );
    public final Java_JavaP.typeArgument_return typeArgument() throws RecognitionException {
        Java_JavaP.typeArgument_return retval = new Java_JavaP.typeArgument_return();
        retval.start = input.LT(1);
        int typeArgument_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal92=null;
        Token string_literal93=null;
        Token string_literal94=null;
        Java_JavaP.type_return t = null;


        Object char_literal92_tree=null;
        Object string_literal93_tree=null;
        Object string_literal94_tree=null;


        boolean pure=true;
        boolean ext=true;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // JavaP.g:1034:5: (t= type | '?' ( ( 'extends' | 'super' ) t= type )? )
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==Identifier||(LA79_0>=79 && LA79_0<=86)) ) {
                alt79=1;
            }
            else if ( (LA79_0==87) ) {
                alt79=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }
            switch (alt79) {
                case 1 :
                    // JavaP.g:1034:9: t= type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_typeArgument4178);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = java().createBasicTypeArgument(t.element);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1035:9: '?' ( ( 'extends' | 'super' ) t= type )?
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal92=(Token)match(input,87,FOLLOW_87_in_typeArgument4190); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal92_tree = (Object)adaptor.create(char_literal92);
                    adaptor.addChild(root_0, char_literal92_tree);
                    }
                    // JavaP.g:1036:9: ( ( 'extends' | 'super' ) t= type )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==60||LA78_0==88) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // JavaP.g:1037:11: ( 'extends' | 'super' ) t= type
                            {
                            if ( state.backtracking==0 ) {
                              pure=false;
                            }
                            // JavaP.g:1038:11: ( 'extends' | 'super' )
                            int alt77=2;
                            int LA77_0 = input.LA(1);

                            if ( (LA77_0==60) ) {
                                alt77=1;
                            }
                            else if ( (LA77_0==88) ) {
                                alt77=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 77, 0, input);

                                throw nvae;
                            }
                            switch (alt77) {
                                case 1 :
                                    // JavaP.g:1038:12: 'extends'
                                    {
                                    string_literal93=(Token)match(input,60,FOLLOW_60_in_typeArgument4225); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal93_tree = (Object)adaptor.create(string_literal93);
                                    adaptor.addChild(root_0, string_literal93_tree);
                                    }

                                    }
                                    break;
                                case 2 :
                                    // JavaP.g:1038:24: 'super'
                                    {
                                    string_literal94=(Token)match(input,88,FOLLOW_88_in_typeArgument4229); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal94_tree = (Object)adaptor.create(string_literal94);
                                    adaptor.addChild(root_0, string_literal94_tree);
                                    }
                                    if ( state.backtracking==0 ) {
                                      ext=false;
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_type_in_typeArgument4245);
                            t=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                            if ( state.backtracking==0 ) {
                              if(ext) {
                                          retval.element = java().createExtendsWildcard(t.element);
                                         } else {
                                          retval.element = java().createSuperWildcard(t.element);
                                         }
                                        
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      if(pure) {
                                 retval.element = java().createPureWildcard();
                               }
                              
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, typeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArgument"

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        public List<String> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList"
    // JavaP.g:1053:1: qualifiedNameList returns [List<String> element] : q= qualifiedName ( ',' qn= qualifiedName )* ;
    public final Java_JavaP.qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        Java_JavaP.qualifiedNameList_return retval = new Java_JavaP.qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal95=null;
        Java_JavaP.qualifiedName_return q = null;

        Java_JavaP.qualifiedName_return qn = null;


        Object char_literal95_tree=null;

        retval.element = new ArrayList<String>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // JavaP.g:1055:5: (q= qualifiedName ( ',' qn= qualifiedName )* )
            // JavaP.g:1055:9: q= qualifiedName ( ',' qn= qualifiedName )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList4306);
            q=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, q.getTree());
            if ( state.backtracking==0 ) {
              retval.element.add((q!=null?input.toString(q.start,q.stop):null));
            }
            // JavaP.g:1055:56: ( ',' qn= qualifiedName )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==63) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // JavaP.g:1055:57: ',' qn= qualifiedName
            	    {
            	    char_literal95=(Token)match(input,63,FOLLOW_63_in_qualifiedNameList4311); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal95_tree = (Object)adaptor.create(char_literal95);
            	    adaptor.addChild(root_0, char_literal95_tree);
            	    }
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList4315);
            	    qn=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qn.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add((qn!=null?input.toString(qn.start,qn.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, qualifiedNameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList"

    public static class formalParameters_return extends ParserRuleReturnScope {
        public List<FormalParameter> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameters"
    // JavaP.g:1058:1: formalParameters returns [List<FormalParameter> element] : '(' (pars= formalParameterDecls )? ')' ;
    public final Java_JavaP.formalParameters_return formalParameters() throws RecognitionException {
        Java_JavaP.formalParameters_return retval = new Java_JavaP.formalParameters_return();
        retval.start = input.LT(1);
        int formalParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal96=null;
        Token char_literal97=null;
        Java_JavaP.formalParameterDecls_return pars = null;


        Object char_literal96_tree=null;
        Object char_literal97_tree=null;

        retval.element = new ArrayList<FormalParameter>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // JavaP.g:1060:5: ( '(' (pars= formalParameterDecls )? ')' )
            // JavaP.g:1060:9: '(' (pars= formalParameterDecls )? ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal96=(Token)match(input,89,FOLLOW_89_in_formalParameters4346); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal96_tree = (Object)adaptor.create(char_literal96);
            adaptor.addChild(root_0, char_literal96_tree);
            }
            // JavaP.g:1060:13: (pars= formalParameterDecls )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==Identifier||LA81_0==57||(LA81_0>=79 && LA81_0<=86)||LA81_0==96) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // JavaP.g:1060:14: pars= formalParameterDecls
                    {
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters4351);
                    pars=formalParameterDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=pars.element;
                    }

                    }
                    break;

            }

            char_literal97=(Token)match(input,90,FOLLOW_90_in_formalParameters4357); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal97_tree = (Object)adaptor.create(char_literal97);
            adaptor.addChild(root_0, char_literal97_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, formalParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameters"

    public static class formalParameterDecls_return extends ParserRuleReturnScope {
        public List<FormalParameter> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterDecls"
    // JavaP.g:1063:1: formalParameterDecls returns [List<FormalParameter> element] : (mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )? | modss= variableModifiers tt= type '...' idd= variableDeclaratorId );
    public final Java_JavaP.formalParameterDecls_return formalParameterDecls() throws RecognitionException {
        Java_JavaP.formalParameterDecls_return retval = new Java_JavaP.formalParameterDecls_return();
        retval.start = input.LT(1);
        int formalParameterDecls_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal98=null;
        Token string_literal99=null;
        Java_JavaP.variableModifiers_return mods = null;

        Java_JavaP.type_return t = null;

        Java_JavaP.variableDeclaratorId_return id = null;

        Java_JavaP.formalParameterDecls_return decls = null;

        Java_JavaP.variableModifiers_return modss = null;

        Java_JavaP.type_return tt = null;

        Java_JavaP.variableDeclaratorId_return idd = null;


        Object char_literal98_tree=null;
        Object string_literal99_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // JavaP.g:1064:5: (mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )? | modss= variableModifiers tt= type '...' idd= variableDeclaratorId )
            int alt83=2;
            alt83 = dfa83.predict(input);
            switch (alt83) {
                case 1 :
                    // JavaP.g:1064:9: mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_variableModifiers_in_formalParameterDecls4382);
                    mods=variableModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
                    pushFollow(FOLLOW_type_in_formalParameterDecls4386);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDecls4390);
                    id=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
                    // JavaP.g:1065:9: ( ',' decls= formalParameterDecls )?
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==63) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            // JavaP.g:1065:10: ',' decls= formalParameterDecls
                            {
                            char_literal98=(Token)match(input,63,FOLLOW_63_in_formalParameterDecls4401); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal98_tree = (Object)adaptor.create(char_literal98);
                            adaptor.addChild(root_0, char_literal98_tree);
                            }
                            pushFollow(FOLLOW_formalParameterDecls_in_formalParameterDecls4405);
                            decls=formalParameterDecls();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, decls.getTree());
                            if ( state.backtracking==0 ) {
                              retval.element=decls.element; 
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      if(retval.element == null) {
                               retval.element=new ArrayList<FormalParameter>();}
                               FormalParameter param = new FormalParameter(id.element.name(),myToArray(t.element, id.element));
                               param.addAllModifiers(mods.element);
                               retval.element.add(0,param);
                               setLocation(param, mods.start,id.stop);
                               
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1073:9: modss= variableModifiers tt= type '...' idd= variableDeclaratorId
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_variableModifiers_in_formalParameterDecls4431);
                    modss=variableModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modss.getTree());
                    pushFollow(FOLLOW_type_in_formalParameterDecls4435);
                    tt=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tt.getTree());
                    string_literal99=(Token)match(input,91,FOLLOW_91_in_formalParameterDecls4437); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal99_tree = (Object)adaptor.create(string_literal99);
                    adaptor.addChild(root_0, string_literal99_tree);
                    }
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDecls4441);
                    idd=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, idd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ArrayList<FormalParameter>();
                               FormalParameter param = new MultiFormalParameter(idd.element.name(),myToArray(tt.element,idd.element));
                               param.addAllModifiers(modss.element);
                               retval.element.add(param);
                               setLocation(param, modss.start, idd.stop);
                               
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, formalParameterDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterDecls"

    public static class methodBody_return extends ParserRuleReturnScope {
        public Block element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodBody"
    // JavaP.g:1083:1: methodBody returns [Block element] : b= block ;
    public final Java_JavaP.methodBody_return methodBody() throws RecognitionException {
        Java_JavaP.methodBody_return retval = new Java_JavaP.methodBody_return();
        retval.start = input.LT(1);
        int methodBody_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.block_return b = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // JavaP.g:1084:5: (b= block )
            // JavaP.g:1084:9: b= block
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_block_in_methodBody4477);
            b=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());
            if ( state.backtracking==0 ) {
              retval.element = b.element;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, methodBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodBody"

    public static class constructorBody_return extends ParserRuleReturnScope {
        public Block element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorBody"
    // JavaP.g:1087:1: constructorBody returns [Block element] : '{' (inv= explicitConstructorInvocation )? (bs= blockStatement )* '}' ;
    public final Java_JavaP.constructorBody_return constructorBody() throws RecognitionException {
        Java_JavaP.constructorBody_return retval = new Java_JavaP.constructorBody_return();
        retval.start = input.LT(1);
        int constructorBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal100=null;
        Token char_literal101=null;
        Java_JavaP.explicitConstructorInvocation_return inv = null;

        Java_JavaP.blockStatement_return bs = null;


        Object char_literal100_tree=null;
        Object char_literal101_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // JavaP.g:1088:5: ( '{' (inv= explicitConstructorInvocation )? (bs= blockStatement )* '}' )
            // JavaP.g:1088:9: '{' (inv= explicitConstructorInvocation )? (bs= blockStatement )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal100=(Token)match(input,66,FOLLOW_66_in_constructorBody4502); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal100_tree = (Object)adaptor.create(char_literal100);
            adaptor.addChild(root_0, char_literal100_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new Block();
            }
            // JavaP.g:1089:10: (inv= explicitConstructorInvocation )?
            int alt84=2;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // JavaP.g:1089:11: inv= explicitConstructorInvocation
                    {
                    pushFollow(FOLLOW_explicitConstructorInvocation_in_constructorBody4518);
                    inv=explicitConstructorInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inv.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.addStatement(new StatementExpression(inv.element));
                    }

                    }
                    break;

            }

            // JavaP.g:1090:10: (bs= blockStatement )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==IntegerLiteral||LA85_0==FloatingPointLiteral||(LA85_0>=CharacterLiteral && LA85_0<=StringLiteral)||(LA85_0>=ENUM && LA85_0<=ASSERT)||LA85_0==Identifier||LA85_0==48||LA85_0==50||(LA85_0>=53 && LA85_0<=59)||LA85_0==66||(LA85_0>=68 && LA85_0<=69)||LA85_0==75||(LA85_0>=79 && LA85_0<=86)||(LA85_0>=88 && LA85_0<=89)||(LA85_0>=92 && LA85_0<=96)||LA85_0==99||(LA85_0>=101 && LA85_0<=104)||(LA85_0>=106 && LA85_0<=110)||(LA85_0>=127 && LA85_0<=128)||(LA85_0>=131 && LA85_0<=135)) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // JavaP.g:1090:11: bs= blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_constructorBody4536);
            	    bs=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bs.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.addStatement(bs.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);

            char_literal101=(Token)match(input,67,FOLLOW_67_in_constructorBody4542); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal101_tree = (Object)adaptor.create(char_literal101);
            adaptor.addChild(root_0, char_literal101_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, constructorBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructorBody"

    public static class explicitConstructorInvocation_return extends ParserRuleReturnScope {
        public MethodInvocation element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitConstructorInvocation"
    // JavaP.g:1093:1: explicitConstructorInvocation returns [MethodInvocation element] : ( ( nonWildcardTypeArguments )? 'this' args= arguments ';' | (prim= primary '.' )? ( nonWildcardTypeArguments )? 'super' argsx= arguments ';' );
    public final Java_JavaP.explicitConstructorInvocation_return explicitConstructorInvocation() throws RecognitionException {
        Java_JavaP.explicitConstructorInvocation_return retval = new Java_JavaP.explicitConstructorInvocation_return();
        retval.start = input.LT(1);
        int explicitConstructorInvocation_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal103=null;
        Token char_literal104=null;
        Token char_literal105=null;
        Token string_literal107=null;
        Token char_literal108=null;
        Java_JavaP.arguments_return args = null;

        Java_JavaP.primary_return prim = null;

        Java_JavaP.arguments_return argsx = null;

        Java_JavaP.nonWildcardTypeArguments_return nonWildcardTypeArguments102 = null;

        Java_JavaP.nonWildcardTypeArguments_return nonWildcardTypeArguments106 = null;


        Object string_literal103_tree=null;
        Object char_literal104_tree=null;
        Object char_literal105_tree=null;
        Object string_literal107_tree=null;
        Object char_literal108_tree=null;

        Expression target=null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // JavaP.g:1095:5: ( ( nonWildcardTypeArguments )? 'this' args= arguments ';' | (prim= primary '.' )? ( nonWildcardTypeArguments )? 'super' argsx= arguments ';' )
            int alt89=2;
            alt89 = dfa89.predict(input);
            switch (alt89) {
                case 1 :
                    // JavaP.g:1095:9: ( nonWildcardTypeArguments )? 'this' args= arguments ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:1095:9: ( nonWildcardTypeArguments )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==62) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // JavaP.g:0:0: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4569);
                            nonWildcardTypeArguments102=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments102.getTree());

                            }
                            break;

                    }

                    string_literal103=(Token)match(input,92,FOLLOW_92_in_explicitConstructorInvocation4572); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal103_tree = (Object)adaptor.create(string_literal103);
                    adaptor.addChild(root_0, string_literal103_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_explicitConstructorInvocation4576);
                    args=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
                    char_literal104=(Token)match(input,48,FOLLOW_48_in_explicitConstructorInvocation4578); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal104_tree = (Object)adaptor.create(char_literal104);
                    adaptor.addChild(root_0, char_literal104_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ThisConstructorDelegation();
                              retval.element.addAllArguments(args.element);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1098:7: (prim= primary '.' )? ( nonWildcardTypeArguments )? 'super' argsx= arguments ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:1098:7: (prim= primary '.' )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==IntegerLiteral||LA87_0==FloatingPointLiteral||(LA87_0>=CharacterLiteral && LA87_0<=StringLiteral)||LA87_0==Identifier||LA87_0==69||(LA87_0>=79 && LA87_0<=86)||LA87_0==89||(LA87_0>=92 && LA87_0<=95)||LA87_0==135) ) {
                        alt87=1;
                    }
                    else if ( (LA87_0==88) ) {
                        int LA87_2 = input.LA(2);

                        if ( (LA87_2==51) ) {
                            alt87=1;
                        }
                    }
                    switch (alt87) {
                        case 1 :
                            // JavaP.g:1098:8: prim= primary '.'
                            {
                            pushFollow(FOLLOW_primary_in_explicitConstructorInvocation4598);
                            prim=primary();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, prim.getTree());
                            char_literal105=(Token)match(input,51,FOLLOW_51_in_explicitConstructorInvocation4600); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal105_tree = (Object)adaptor.create(char_literal105);
                            adaptor.addChild(root_0, char_literal105_tree);
                            }
                            if ( state.backtracking==0 ) {
                              target=prim.element;
                            }

                            }
                            break;

                    }

                    // JavaP.g:1098:50: ( nonWildcardTypeArguments )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==62) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // JavaP.g:0:0: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4606);
                            nonWildcardTypeArguments106=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments106.getTree());

                            }
                            break;

                    }

                    string_literal107=(Token)match(input,88,FOLLOW_88_in_explicitConstructorInvocation4609); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal107_tree = (Object)adaptor.create(string_literal107);
                    adaptor.addChild(root_0, string_literal107_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_explicitConstructorInvocation4613);
                    argsx=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argsx.getTree());
                    char_literal108=(Token)match(input,48,FOLLOW_48_in_explicitConstructorInvocation4615); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal108_tree = (Object)adaptor.create(char_literal108);
                    adaptor.addChild(root_0, char_literal108_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new SuperConstructorDelegation();
                             retval.element.addAllArguments(argsx.element);
                             if(target != null) {
                               retval.element.setTarget(target);
                             }
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, explicitConstructorInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitConstructorInvocation"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        public String element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName"
    // JavaP.g:1108:1: qualifiedName returns [String element] : id= identifierRule ( '.' idx= identifierRule )* ;
    public final Java_JavaP.qualifiedName_return qualifiedName() throws RecognitionException {
        Java_JavaP.qualifiedName_return retval = new Java_JavaP.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal109=null;
        Java_JavaP.identifierRule_return id = null;

        Java_JavaP.identifierRule_return idx = null;


        Object char_literal109_tree=null;

        StringBuffer buffer = new StringBuffer();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // JavaP.g:1110:5: (id= identifierRule ( '.' idx= identifierRule )* )
            // JavaP.g:1110:9: id= identifierRule ( '.' idx= identifierRule )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_qualifiedName4653);
            id=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
            if ( state.backtracking==0 ) {
              buffer.append((id!=null?input.toString(id.start,id.stop):null));
            }
            // JavaP.g:1110:53: ( '.' idx= identifierRule )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==51) ) {
                    int LA90_2 = input.LA(2);

                    if ( (LA90_2==Identifier) ) {
                        alt90=1;
                    }


                }


                switch (alt90) {
            	case 1 :
            	    // JavaP.g:1110:54: '.' idx= identifierRule
            	    {
            	    char_literal109=(Token)match(input,51,FOLLOW_51_in_qualifiedName4657); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal109_tree = (Object)adaptor.create(char_literal109);
            	    adaptor.addChild(root_0, char_literal109_tree);
            	    }
            	    pushFollow(FOLLOW_identifierRule_in_qualifiedName4661);
            	    idx=identifierRule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, idx.getTree());
            	    if ( state.backtracking==0 ) {
            	      buffer.append((idx!=null?input.toString(idx.start,idx.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class literal_return extends ParserRuleReturnScope {
        public Literal element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // JavaP.g:1113:1: literal returns [Literal element] : (intl= integerLiteral | fl= FloatingPointLiteral | charl= CharacterLiteral | strl= StringLiteral | booll= booleanLiteral | 'null' );
    public final Java_JavaP.literal_return literal() throws RecognitionException {
        Java_JavaP.literal_return retval = new Java_JavaP.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        Object root_0 = null;

        Token fl=null;
        Token charl=null;
        Token strl=null;
        Token string_literal110=null;
        Java_JavaP.integerLiteral_return intl = null;

        Java_JavaP.booleanLiteral_return booll = null;


        Object fl_tree=null;
        Object charl_tree=null;
        Object strl_tree=null;
        Object string_literal110_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // JavaP.g:1114:5: (intl= integerLiteral | fl= FloatingPointLiteral | charl= CharacterLiteral | strl= StringLiteral | booll= booleanLiteral | 'null' )
            int alt91=6;
            switch ( input.LA(1) ) {
            case IntegerLiteral:
                {
                alt91=1;
                }
                break;
            case FloatingPointLiteral:
                {
                alt91=2;
                }
                break;
            case CharacterLiteral:
                {
                alt91=3;
                }
                break;
            case StringLiteral:
                {
                alt91=4;
                }
                break;
            case 94:
            case 95:
                {
                alt91=5;
                }
                break;
            case 93:
                {
                alt91=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }

            switch (alt91) {
                case 1 :
                    // JavaP.g:1114:9: intl= integerLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_integerLiteral_in_literal4690);
                    intl=integerLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, intl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=intl.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1115:9: fl= FloatingPointLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    fl=(Token)match(input,FloatingPointLiteral,FOLLOW_FloatingPointLiteral_in_literal4704); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    fl_tree = (Object)adaptor.create(fl);
                    adaptor.addChild(root_0, fl_tree);
                    }
                    if ( state.backtracking==0 ) {

                                 String text = (fl!=null?fl.getText():null);
                                 if(text.endsWith("f") || text.endsWith("F")) {
                                   retval.element=new RegularLiteral(typeRef("float"),text);
                                 } else {
                                   retval.element=new RegularLiteral(typeRef("double"),text);
                                 }
                              
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1123:9: charl= CharacterLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    charl=(Token)match(input,CharacterLiteral,FOLLOW_CharacterLiteral_in_literal4718); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    charl_tree = (Object)adaptor.create(charl);
                    adaptor.addChild(root_0, charl_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element=new RegularLiteral(typeRef("char"),(charl!=null?charl.getText():null));
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1124:9: strl= StringLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    strl=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_literal4732); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    strl_tree = (Object)adaptor.create(strl);
                    adaptor.addChild(root_0, strl_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element=new RegularLiteral(typeRef("java.lang.String"),(strl!=null?strl.getText():null));
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1125:9: booll= booleanLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_booleanLiteral_in_literal4746);
                    booll=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booll.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=booll.element;
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1126:9: 'null'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal110=(Token)match(input,93,FOLLOW_93_in_literal4758); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal110_tree = (Object)adaptor.create(string_literal110);
                    adaptor.addChild(root_0, string_literal110_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new NullLiteral();
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class integerLiteral_return extends ParserRuleReturnScope {
        public Literal element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integerLiteral"
    // JavaP.g:1135:1: integerLiteral returns [Literal element] : hexl= IntegerLiteral ;
    public final Java_JavaP.integerLiteral_return integerLiteral() throws RecognitionException {
        Java_JavaP.integerLiteral_return retval = new Java_JavaP.integerLiteral_return();
        retval.start = input.LT(1);
        int integerLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token hexl=null;

        Object hexl_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // JavaP.g:1136:5: (hexl= IntegerLiteral )
            // JavaP.g:1136:9: hexl= IntegerLiteral
            {
            root_0 = (Object)adaptor.nil();

            hexl=(Token)match(input,IntegerLiteral,FOLLOW_IntegerLiteral_in_integerLiteral4791); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            hexl_tree = (Object)adaptor.create(hexl);
            adaptor.addChild(root_0, hexl_tree);
            }
            if ( state.backtracking==0 ) {

                      char last = (hexl!=null?hexl.getText():null).charAt((hexl!=null?hexl.getText():null).length()-1);
                      String type = "int";
                      if(last == 'l' || last == 'L') {
                         type = "long";
                      }
                     retval.element=new RegularLiteral(typeRef(type),(hexl!=null?hexl.getText():null));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, integerLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integerLiteral"

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        public Literal element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanLiteral"
    // JavaP.g:1147:1: booleanLiteral returns [Literal element] : ( 'true' | 'false' );
    public final Java_JavaP.booleanLiteral_return booleanLiteral() throws RecognitionException {
        Java_JavaP.booleanLiteral_return retval = new Java_JavaP.booleanLiteral_return();
        retval.start = input.LT(1);
        int booleanLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal111=null;
        Token string_literal112=null;

        Object string_literal111_tree=null;
        Object string_literal112_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // JavaP.g:1148:5: ( 'true' | 'false' )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==94) ) {
                alt92=1;
            }
            else if ( (LA92_0==95) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;
            }
            switch (alt92) {
                case 1 :
                    // JavaP.g:1148:9: 'true'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal111=(Token)match(input,94,FOLLOW_94_in_booleanLiteral4816); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal111_tree = (Object)adaptor.create(string_literal111);
                    adaptor.addChild(root_0, string_literal111_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new RegularLiteral(typeRef("boolean"),"true");
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1149:9: 'false'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal112=(Token)match(input,95,FOLLOW_95_in_booleanLiteral4828); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal112_tree = (Object)adaptor.create(string_literal112);
                    adaptor.addChild(root_0, string_literal112_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new RegularLiteral(typeRef("boolean"),"false");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, booleanLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class annotations_return extends ParserRuleReturnScope {
        public List<AnnotationModifier> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotations"
    // JavaP.g:1154:1: annotations returns [List<AnnotationModifier> element] : (a= annotation )+ ;
    public final Java_JavaP.annotations_return annotations() throws RecognitionException {
        Java_JavaP.annotations_return retval = new Java_JavaP.annotations_return();
        retval.start = input.LT(1);
        int annotations_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.annotation_return a = null;



        retval.element = new ArrayList<AnnotationModifier>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // JavaP.g:1156:5: ( (a= annotation )+ )
            // JavaP.g:1156:9: (a= annotation )+
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:1156:9: (a= annotation )+
            int cnt93=0;
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==96) ) {
                    int LA93_2 = input.LA(2);

                    if ( (LA93_2==Identifier) ) {
                        int LA93_3 = input.LA(3);

                        if ( (synpred120_JavaP()) ) {
                            alt93=1;
                        }


                    }


                }


                switch (alt93) {
            	case 1 :
            	    // JavaP.g:1156:10: a= annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations4862);
            	    a=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(a.element);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt93 >= 1 ) break loop93;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(93, input);
                        throw eee;
                }
                cnt93++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, annotations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotations"

    public static class annotation_return extends ParserRuleReturnScope {
        public AnnotationModifier element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // JavaP.g:1159:1: annotation returns [AnnotationModifier element] : '@' a= annotationName ( '(' ( elementValuePairs | elementValue )? ')' )? ;
    public final Java_JavaP.annotation_return annotation() throws RecognitionException {
        Java_JavaP.annotation_return retval = new Java_JavaP.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal113=null;
        Token char_literal114=null;
        Token char_literal117=null;
        Java_JavaP.annotationName_return a = null;

        Java_JavaP.elementValuePairs_return elementValuePairs115 = null;

        Java_JavaP.elementValue_return elementValue116 = null;


        Object char_literal113_tree=null;
        Object char_literal114_tree=null;
        Object char_literal117_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // JavaP.g:1160:5: ( '@' a= annotationName ( '(' ( elementValuePairs | elementValue )? ')' )? )
            // JavaP.g:1160:9: '@' a= annotationName ( '(' ( elementValuePairs | elementValue )? ')' )?
            {
            root_0 = (Object)adaptor.nil();

            char_literal113=(Token)match(input,96,FOLLOW_96_in_annotation4889); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal113_tree = (Object)adaptor.create(char_literal113);
            adaptor.addChild(root_0, char_literal113_tree);
            }
            pushFollow(FOLLOW_annotationName_in_annotation4893);
            a=annotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
            if ( state.backtracking==0 ) {
              retval.element=new AnnotationModifier(typeRef((a!=null?input.toString(a.start,a.stop):null)));
            }
            // JavaP.g:1160:89: ( '(' ( elementValuePairs | elementValue )? ')' )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==89) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // JavaP.g:1160:91: '(' ( elementValuePairs | elementValue )? ')'
                    {
                    char_literal114=(Token)match(input,89,FOLLOW_89_in_annotation4899); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal114_tree = (Object)adaptor.create(char_literal114);
                    adaptor.addChild(root_0, char_literal114_tree);
                    }
                    // JavaP.g:1160:95: ( elementValuePairs | elementValue )?
                    int alt94=3;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==Identifier) ) {
                        int LA94_1 = input.LA(2);

                        if ( (LA94_1==73) ) {
                            alt94=1;
                        }
                        else if ( ((LA94_1>=51 && LA94_1<=52)||LA94_1==62||(LA94_1>=64 && LA94_1<=65)||LA94_1==70||LA94_1==78||LA94_1==87||(LA94_1>=89 && LA94_1<=90)||(LA94_1>=121 && LA94_1<=132)) ) {
                            alt94=2;
                        }
                    }
                    else if ( (LA94_0==IntegerLiteral||LA94_0==FloatingPointLiteral||(LA94_0>=CharacterLiteral && LA94_0<=StringLiteral)||LA94_0==66||LA94_0==69||(LA94_0>=79 && LA94_0<=86)||(LA94_0>=88 && LA94_0<=89)||(LA94_0>=92 && LA94_0<=96)||(LA94_0>=127 && LA94_0<=128)||(LA94_0>=131 && LA94_0<=135)) ) {
                        alt94=2;
                    }
                    switch (alt94) {
                        case 1 :
                            // JavaP.g:1160:97: elementValuePairs
                            {
                            pushFollow(FOLLOW_elementValuePairs_in_annotation4903);
                            elementValuePairs115=elementValuePairs();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairs115.getTree());

                            }
                            break;
                        case 2 :
                            // JavaP.g:1160:117: elementValue
                            {
                            pushFollow(FOLLOW_elementValue_in_annotation4907);
                            elementValue116=elementValue();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue116.getTree());

                            }
                            break;

                    }

                    char_literal117=(Token)match(input,90,FOLLOW_90_in_annotation4912); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal117_tree = (Object)adaptor.create(char_literal117);
                    adaptor.addChild(root_0, char_literal117_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationName"
    // JavaP.g:1163:1: annotationName : identifierRule ( '.' identifierRule )* ;
    public final Java_JavaP.annotationName_return annotationName() throws RecognitionException {
        Java_JavaP.annotationName_return retval = new Java_JavaP.annotationName_return();
        retval.start = input.LT(1);
        int annotationName_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal119=null;
        Java_JavaP.identifierRule_return identifierRule118 = null;

        Java_JavaP.identifierRule_return identifierRule120 = null;


        Object char_literal119_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // JavaP.g:1164:5: ( identifierRule ( '.' identifierRule )* )
            // JavaP.g:1164:7: identifierRule ( '.' identifierRule )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_annotationName4932);
            identifierRule118=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierRule118.getTree());
            // JavaP.g:1164:22: ( '.' identifierRule )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==51) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // JavaP.g:1164:23: '.' identifierRule
            	    {
            	    char_literal119=(Token)match(input,51,FOLLOW_51_in_annotationName4935); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal119_tree = (Object)adaptor.create(char_literal119);
            	    adaptor.addChild(root_0, char_literal119_tree);
            	    }
            	    pushFollow(FOLLOW_identifierRule_in_annotationName4937);
            	    identifierRule120=identifierRule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierRule120.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, annotationName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationName"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // JavaP.g:1167:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
    public final Java_JavaP.elementValuePairs_return elementValuePairs() throws RecognitionException {
        Java_JavaP.elementValuePairs_return retval = new Java_JavaP.elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal122=null;
        Java_JavaP.elementValuePair_return elementValuePair121 = null;

        Java_JavaP.elementValuePair_return elementValuePair123 = null;


        Object char_literal122_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // JavaP.g:1168:5: ( elementValuePair ( ',' elementValuePair )* )
            // JavaP.g:1168:9: elementValuePair ( ',' elementValuePair )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs4958);
            elementValuePair121=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair121.getTree());
            // JavaP.g:1168:26: ( ',' elementValuePair )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==63) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // JavaP.g:1168:27: ',' elementValuePair
            	    {
            	    char_literal122=(Token)match(input,63,FOLLOW_63_in_elementValuePairs4961); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal122_tree = (Object)adaptor.create(char_literal122);
            	    adaptor.addChild(root_0, char_literal122_tree);
            	    }
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs4963);
            	    elementValuePair123=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair123.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, elementValuePairs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // JavaP.g:1171:1: elementValuePair : identifierRule '=' elementValue ;
    public final Java_JavaP.elementValuePair_return elementValuePair() throws RecognitionException {
        Java_JavaP.elementValuePair_return retval = new Java_JavaP.elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal125=null;
        Java_JavaP.identifierRule_return identifierRule124 = null;

        Java_JavaP.elementValue_return elementValue126 = null;


        Object char_literal125_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // JavaP.g:1172:5: ( identifierRule '=' elementValue )
            // JavaP.g:1172:9: identifierRule '=' elementValue
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_elementValuePair4984);
            identifierRule124=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierRule124.getTree());
            char_literal125=(Token)match(input,73,FOLLOW_73_in_elementValuePair4986); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal125_tree = (Object)adaptor.create(char_literal125);
            adaptor.addChild(root_0, char_literal125_tree);
            }
            pushFollow(FOLLOW_elementValue_in_elementValuePair4988);
            elementValue126=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue126.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, elementValuePair_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // JavaP.g:1175:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );
    public final Java_JavaP.elementValue_return elementValue() throws RecognitionException {
        Java_JavaP.elementValue_return retval = new Java_JavaP.elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.conditionalExpression_return conditionalExpression127 = null;

        Java_JavaP.annotation_return annotation128 = null;

        Java_JavaP.elementValueArrayInitializer_return elementValueArrayInitializer129 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // JavaP.g:1176:5: ( conditionalExpression | annotation | elementValueArrayInitializer )
            int alt98=3;
            switch ( input.LA(1) ) {
            case IntegerLiteral:
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case Identifier:
            case 69:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 88:
            case 89:
            case 92:
            case 93:
            case 94:
            case 95:
            case 127:
            case 128:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
                {
                alt98=1;
                }
                break;
            case 96:
                {
                alt98=2;
                }
                break;
            case 66:
                {
                alt98=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }

            switch (alt98) {
                case 1 :
                    // JavaP.g:1176:9: conditionalExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_conditionalExpression_in_elementValue5007);
                    conditionalExpression127=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression127.getTree());

                    }
                    break;
                case 2 :
                    // JavaP.g:1177:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_elementValue5017);
                    annotation128=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation128.getTree());

                    }
                    break;
                case 3 :
                    // JavaP.g:1178:9: elementValueArrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue5027);
                    elementValueArrayInitializer129=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValueArrayInitializer129.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, elementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // JavaP.g:1181:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' ;
    public final Java_JavaP.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        Java_JavaP.elementValueArrayInitializer_return retval = new Java_JavaP.elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal130=null;
        Token char_literal132=null;
        Token char_literal134=null;
        Token char_literal135=null;
        Java_JavaP.elementValue_return elementValue131 = null;

        Java_JavaP.elementValue_return elementValue133 = null;


        Object char_literal130_tree=null;
        Object char_literal132_tree=null;
        Object char_literal134_tree=null;
        Object char_literal135_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // JavaP.g:1182:5: ( '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' )
            // JavaP.g:1182:9: '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal130=(Token)match(input,66,FOLLOW_66_in_elementValueArrayInitializer5046); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal130_tree = (Object)adaptor.create(char_literal130);
            adaptor.addChild(root_0, char_literal130_tree);
            }
            // JavaP.g:1182:13: ( elementValue ( ',' elementValue )* )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==IntegerLiteral||LA100_0==FloatingPointLiteral||(LA100_0>=CharacterLiteral && LA100_0<=StringLiteral)||LA100_0==Identifier||LA100_0==66||LA100_0==69||(LA100_0>=79 && LA100_0<=86)||(LA100_0>=88 && LA100_0<=89)||(LA100_0>=92 && LA100_0<=96)||(LA100_0>=127 && LA100_0<=128)||(LA100_0>=131 && LA100_0<=135)) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // JavaP.g:1182:14: elementValue ( ',' elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer5049);
                    elementValue131=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue131.getTree());
                    // JavaP.g:1182:27: ( ',' elementValue )*
                    loop99:
                    do {
                        int alt99=2;
                        int LA99_0 = input.LA(1);

                        if ( (LA99_0==63) ) {
                            int LA99_1 = input.LA(2);

                            if ( (LA99_1==IntegerLiteral||LA99_1==FloatingPointLiteral||(LA99_1>=CharacterLiteral && LA99_1<=StringLiteral)||LA99_1==Identifier||LA99_1==66||LA99_1==69||(LA99_1>=79 && LA99_1<=86)||(LA99_1>=88 && LA99_1<=89)||(LA99_1>=92 && LA99_1<=96)||(LA99_1>=127 && LA99_1<=128)||(LA99_1>=131 && LA99_1<=135)) ) {
                                alt99=1;
                            }


                        }


                        switch (alt99) {
                    	case 1 :
                    	    // JavaP.g:1182:28: ',' elementValue
                    	    {
                    	    char_literal132=(Token)match(input,63,FOLLOW_63_in_elementValueArrayInitializer5052); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal132_tree = (Object)adaptor.create(char_literal132);
                    	    adaptor.addChild(root_0, char_literal132_tree);
                    	    }
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer5054);
                    	    elementValue133=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue133.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop99;
                        }
                    } while (true);


                    }
                    break;

            }

            // JavaP.g:1182:49: ( ',' )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==63) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // JavaP.g:1182:50: ','
                    {
                    char_literal134=(Token)match(input,63,FOLLOW_63_in_elementValueArrayInitializer5061); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal134_tree = (Object)adaptor.create(char_literal134);
                    adaptor.addChild(root_0, char_literal134_tree);
                    }

                    }
                    break;

            }

            char_literal135=(Token)match(input,67,FOLLOW_67_in_elementValueArrayInitializer5065); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal135_tree = (Object)adaptor.create(char_literal135);
            adaptor.addChild(root_0, char_literal135_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, elementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        public ClassWithBody element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // JavaP.g:1185:1: annotationTypeDeclaration returns [ClassWithBody element] : '@' 'interface' name= identifierRule body= annotationTypeBody ;
    public final Java_JavaP.annotationTypeDeclaration_return annotationTypeDeclaration() throws RecognitionException {
        Java_JavaP.annotationTypeDeclaration_return retval = new Java_JavaP.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal136=null;
        Token string_literal137=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.annotationTypeBody_return body = null;


        Object char_literal136_tree=null;
        Object string_literal137_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // JavaP.g:1186:5: ( '@' 'interface' name= identifierRule body= annotationTypeBody )
            // JavaP.g:1186:9: '@' 'interface' name= identifierRule body= annotationTypeBody
            {
            root_0 = (Object)adaptor.nil();

            char_literal136=(Token)match(input,96,FOLLOW_96_in_annotationTypeDeclaration5088); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal136_tree = (Object)adaptor.create(char_literal136);
            adaptor.addChild(root_0, char_literal136_tree);
            }
            string_literal137=(Token)match(input,68,FOLLOW_68_in_annotationTypeDeclaration5090); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal137_tree = (Object)adaptor.create(string_literal137);
            adaptor.addChild(root_0, string_literal137_tree);
            }
            pushFollow(FOLLOW_identifierRule_in_annotationTypeDeclaration5094);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {

                             retval.element = (ClassWithBody)createType((name!=null?input.toString(name.start,name.stop):null));
                             retval.element.addModifier(new AnnotationType());
                             setName(retval.element,name.start);
                           
            }
            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration5126);
            body=annotationTypeBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
            if ( state.backtracking==0 ) {
              retval.element.setBody(body.element);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationTypeBody_return extends ParserRuleReturnScope {
        public ClassBody element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeBody"
    // JavaP.g:1195:1: annotationTypeBody returns [ClassBody element] : '{' ( annotationTypeElementDeclaration )* '}' ;
    public final Java_JavaP.annotationTypeBody_return annotationTypeBody() throws RecognitionException {
        Java_JavaP.annotationTypeBody_return retval = new Java_JavaP.annotationTypeBody_return();
        retval.start = input.LT(1);
        int annotationTypeBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal138=null;
        Token char_literal140=null;
        Java_JavaP.annotationTypeElementDeclaration_return annotationTypeElementDeclaration139 = null;


        Object char_literal138_tree=null;
        Object char_literal140_tree=null;

        retval.element = new ClassBody();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // JavaP.g:1197:5: ( '{' ( annotationTypeElementDeclaration )* '}' )
            // JavaP.g:1197:9: '{' ( annotationTypeElementDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal138=(Token)match(input,66,FOLLOW_66_in_annotationTypeBody5155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal138_tree = (Object)adaptor.create(char_literal138);
            adaptor.addChild(root_0, char_literal138_tree);
            }
            // JavaP.g:1197:13: ( annotationTypeElementDeclaration )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==ENUM||LA102_0==Identifier||LA102_0==50||(LA102_0>=53 && LA102_0<=59)||LA102_0==62||(LA102_0>=68 && LA102_0<=69)||(LA102_0>=74 && LA102_0<=77)||(LA102_0>=79 && LA102_0<=86)||LA102_0==96) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // JavaP.g:1197:14: annotationTypeElementDeclaration
            	    {
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeBody5158);
            	    annotationTypeElementDeclaration139=annotationTypeElementDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclaration139.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);

            char_literal140=(Token)match(input,67,FOLLOW_67_in_annotationTypeBody5162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal140_tree = (Object)adaptor.create(char_literal140);
            adaptor.addChild(root_0, char_literal140_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, annotationTypeBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeBody"

    public static class annotationTypeElementDeclaration_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclaration"
    // JavaP.g:1200:1: annotationTypeElementDeclaration returns [TypeElement element] : mods= modifiers rest= annotationTypeElementRest ;
    public final Java_JavaP.annotationTypeElementDeclaration_return annotationTypeElementDeclaration() throws RecognitionException {
        Java_JavaP.annotationTypeElementDeclaration_return retval = new Java_JavaP.annotationTypeElementDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.modifiers_return mods = null;

        Java_JavaP.annotationTypeElementRest_return rest = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // JavaP.g:1201:5: (mods= modifiers rest= annotationTypeElementRest )
            // JavaP.g:1201:9: mods= modifiers rest= annotationTypeElementRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_annotationTypeElementDeclaration5187);
            mods=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
            pushFollow(FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration5191);
            rest=annotationTypeElementRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rest.getTree());
            if ( state.backtracking==0 ) {

                       retval.element = rest.element;
                       for(Modifier modifier: mods.element) {
                         retval.element.addModifier(modifier);
                       }
                     
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, annotationTypeElementDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclaration"

    public static class annotationTypeElementRest_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementRest"
    // JavaP.g:1210:1: annotationTypeElementRest returns [TypeElement element] : (t= type ann= annotationMethodOrConstantRest[$t.element] ';' | cd= normalClassDeclaration ( ';' )? | id= normalInterfaceDeclaration ( ';' )? | en= enumDeclaration ( ';' )? | an= annotationTypeDeclaration ( ';' )? );
    public final Java_JavaP.annotationTypeElementRest_return annotationTypeElementRest() throws RecognitionException {
        Java_JavaP.annotationTypeElementRest_return retval = new Java_JavaP.annotationTypeElementRest_return();
        retval.start = input.LT(1);
        int annotationTypeElementRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal141=null;
        Token char_literal142=null;
        Token char_literal143=null;
        Token char_literal144=null;
        Token char_literal145=null;
        Java_JavaP.type_return t = null;

        Java_JavaP.annotationMethodOrConstantRest_return ann = null;

        Java_JavaP.normalClassDeclaration_return cd = null;

        Java_JavaP.normalInterfaceDeclaration_return id = null;

        Java_JavaP.enumDeclaration_return en = null;

        Java_JavaP.annotationTypeDeclaration_return an = null;


        Object char_literal141_tree=null;
        Object char_literal142_tree=null;
        Object char_literal143_tree=null;
        Object char_literal144_tree=null;
        Object char_literal145_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // JavaP.g:1211:5: (t= type ann= annotationMethodOrConstantRest[$t.element] ';' | cd= normalClassDeclaration ( ';' )? | id= normalInterfaceDeclaration ( ';' )? | en= enumDeclaration ( ';' )? | an= annotationTypeDeclaration ( ';' )? )
            int alt107=5;
            switch ( input.LA(1) ) {
            case Identifier:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
                {
                alt107=1;
                }
                break;
            case 59:
                {
                alt107=2;
                }
                break;
            case 68:
                {
                alt107=3;
                }
                break;
            case ENUM:
                {
                alt107=4;
                }
                break;
            case 96:
                {
                alt107=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;
            }

            switch (alt107) {
                case 1 :
                    // JavaP.g:1211:9: t= type ann= annotationMethodOrConstantRest[$t.element] ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_annotationTypeElementRest5225);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    pushFollow(FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest5229);
                    ann=annotationMethodOrConstantRest((t!=null?t.element:null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ann.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = ann.element;
                    }
                    char_literal141=(Token)match(input,48,FOLLOW_48_in_annotationTypeElementRest5239); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal141_tree = (Object)adaptor.create(char_literal141);
                    adaptor.addChild(root_0, char_literal141_tree);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1214:9: cd= normalClassDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalClassDeclaration_in_annotationTypeElementRest5251);
                    cd=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                       retval.element = cd.element; 
                    }
                    // JavaP.g:1214:67: ( ';' )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==48) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // JavaP.g:0:0: ';'
                            {
                            char_literal142=(Token)match(input,48,FOLLOW_48_in_annotationTypeElementRest5254); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal142_tree = (Object)adaptor.create(char_literal142);
                            adaptor.addChild(root_0, char_literal142_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // JavaP.g:1215:9: id= normalInterfaceDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_annotationTypeElementRest5267);
                    id=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
                    if ( state.backtracking==0 ) {
                       retval.element = id.element; 
                    }
                    // JavaP.g:1215:71: ( ';' )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==48) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // JavaP.g:0:0: ';'
                            {
                            char_literal143=(Token)match(input,48,FOLLOW_48_in_annotationTypeElementRest5270); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal143_tree = (Object)adaptor.create(char_literal143);
                            adaptor.addChild(root_0, char_literal143_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // JavaP.g:1216:9: en= enumDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enumDeclaration_in_annotationTypeElementRest5283);
                    en=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, en.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = en.element;
                    }
                    // JavaP.g:1216:59: ( ';' )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==48) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // JavaP.g:0:0: ';'
                            {
                            char_literal144=(Token)match(input,48,FOLLOW_48_in_annotationTypeElementRest5287); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal144_tree = (Object)adaptor.create(char_literal144);
                            adaptor.addChild(root_0, char_literal144_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // JavaP.g:1217:9: an= annotationTypeDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest5300);
                    an=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, an.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = an.element;
                    }
                    // JavaP.g:1217:69: ( ';' )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==48) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // JavaP.g:0:0: ';'
                            {
                            char_literal145=(Token)match(input,48,FOLLOW_48_in_annotationTypeElementRest5304); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal145_tree = (Object)adaptor.create(char_literal145);
                            adaptor.addChild(root_0, char_literal145_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, annotationTypeElementRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementRest"

    public static class annotationMethodOrConstantRest_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodOrConstantRest"
    // JavaP.g:1220:1: annotationMethodOrConstantRest[TypeReference type] returns [TypeElement element] : (a= annotationMethodRest[$type] | aa= annotationConstantRest[$type] );
    public final Java_JavaP.annotationMethodOrConstantRest_return annotationMethodOrConstantRest(TypeReference type) throws RecognitionException {
        Java_JavaP.annotationMethodOrConstantRest_return retval = new Java_JavaP.annotationMethodOrConstantRest_return();
        retval.start = input.LT(1);
        int annotationMethodOrConstantRest_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.annotationMethodRest_return a = null;

        Java_JavaP.annotationConstantRest_return aa = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // JavaP.g:1221:5: (a= annotationMethodRest[$type] | aa= annotationConstantRest[$type] )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==Identifier) ) {
                int LA108_1 = input.LA(2);

                if ( (LA108_1==89) ) {
                    alt108=1;
                }
                else if ( (LA108_1==48||LA108_1==63||LA108_1==70||LA108_1==73) ) {
                    alt108=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }
            switch (alt108) {
                case 1 :
                    // JavaP.g:1221:9: a= annotationMethodRest[$type]
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest5331);
                    a=annotationMethodRest(type);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = a.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1222:9: aa= annotationConstantRest[$type]
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest5346);
                    aa=annotationConstantRest(type);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aa.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = aa.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, annotationMethodOrConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodOrConstantRest"

    public static class annotationMethodRest_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodRest"
    // JavaP.g:1225:1: annotationMethodRest[TypeReference type] returns [Method element] : name= identifierRule '(' ')' ( defaultValue )? ;
    public final Java_JavaP.annotationMethodRest_return annotationMethodRest(TypeReference type) throws RecognitionException {
        Java_JavaP.annotationMethodRest_return retval = new Java_JavaP.annotationMethodRest_return();
        retval.start = input.LT(1);
        int annotationMethodRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal146=null;
        Token char_literal147=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.defaultValue_return defaultValue148 = null;


        Object char_literal146_tree=null;
        Object char_literal147_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // JavaP.g:1226:5: (name= identifierRule '(' ')' ( defaultValue )? )
            // JavaP.g:1226:9: name= identifierRule '(' ')' ( defaultValue )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_annotationMethodRest5375);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            char_literal146=(Token)match(input,89,FOLLOW_89_in_annotationMethodRest5377); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal146_tree = (Object)adaptor.create(char_literal146);
            adaptor.addChild(root_0, char_literal146_tree);
            }
            char_literal147=(Token)match(input,90,FOLLOW_90_in_annotationMethodRest5379); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal147_tree = (Object)adaptor.create(char_literal147);
            adaptor.addChild(root_0, char_literal147_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = createNormalMethod(new SimpleNameMethodHeader((name!=null?input.toString(name.start,name.stop):null),type));
                       setName(retval.element,name.start);
                      
            }
            // JavaP.g:1229:11: ( defaultValue )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==97) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // JavaP.g:1229:12: defaultValue
                    {
                    pushFollow(FOLLOW_defaultValue_in_annotationMethodRest5392);
                    defaultValue148=defaultValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultValue148.getTree());
                    if ( state.backtracking==0 ) {
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, annotationMethodRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodRest"

    public static class annotationConstantRest_return extends ParserRuleReturnScope {
        public MemberVariableDeclarator element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationConstantRest"
    // JavaP.g:1232:1: annotationConstantRest[TypeReference type] returns [MemberVariableDeclarator element] : decls= variableDeclarators ;
    public final Java_JavaP.annotationConstantRest_return annotationConstantRest(TypeReference type) throws RecognitionException {
        Java_JavaP.annotationConstantRest_return retval = new Java_JavaP.annotationConstantRest_return();
        retval.start = input.LT(1);
        int annotationConstantRest_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.variableDeclarators_return decls = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // JavaP.g:1233:5: (decls= variableDeclarators )
            // JavaP.g:1233:9: decls= variableDeclarators
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclarators_in_annotationConstantRest5422);
            decls=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, decls.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new MemberVariableDeclarator(type);
                       for(VariableDeclaration decl: decls.element) {
                         retval.element.add(decl);
                       }
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, annotationConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationConstantRest"

    public static class defaultValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultValue"
    // JavaP.g:1241:1: defaultValue : 'default' elementValue ;
    public final Java_JavaP.defaultValue_return defaultValue() throws RecognitionException {
        Java_JavaP.defaultValue_return retval = new Java_JavaP.defaultValue_return();
        retval.start = input.LT(1);
        int defaultValue_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal149=null;
        Java_JavaP.elementValue_return elementValue150 = null;


        Object string_literal149_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // JavaP.g:1242:5: ( 'default' elementValue )
            // JavaP.g:1242:9: 'default' elementValue
            {
            root_0 = (Object)adaptor.nil();

            string_literal149=(Token)match(input,97,FOLLOW_97_in_defaultValue5451); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal149_tree = (Object)adaptor.create(string_literal149);
            adaptor.addChild(root_0, string_literal149_tree);
            }
            pushFollow(FOLLOW_elementValue_in_defaultValue5453);
            elementValue150=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue150.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, defaultValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "defaultValue"

    public static class block_return extends ParserRuleReturnScope {
        public Block element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // JavaP.g:1247:1: block returns [Block element] : '{' (stat= blockStatement )* '}' ;
    public final Java_JavaP.block_return block() throws RecognitionException {
        Java_JavaP.block_return retval = new Java_JavaP.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal151=null;
        Token char_literal152=null;
        Java_JavaP.blockStatement_return stat = null;


        Object char_literal151_tree=null;
        Object char_literal152_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // JavaP.g:1248:5: ( '{' (stat= blockStatement )* '}' )
            // JavaP.g:1248:9: '{' (stat= blockStatement )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal151=(Token)match(input,66,FOLLOW_66_in_block5478); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal151_tree = (Object)adaptor.create(char_literal151);
            adaptor.addChild(root_0, char_literal151_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new Block();
            }
            // JavaP.g:1248:45: (stat= blockStatement )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==IntegerLiteral||LA110_0==FloatingPointLiteral||(LA110_0>=CharacterLiteral && LA110_0<=StringLiteral)||(LA110_0>=ENUM && LA110_0<=ASSERT)||LA110_0==Identifier||LA110_0==48||LA110_0==50||(LA110_0>=53 && LA110_0<=59)||LA110_0==66||(LA110_0>=68 && LA110_0<=69)||LA110_0==75||(LA110_0>=79 && LA110_0<=86)||(LA110_0>=88 && LA110_0<=89)||(LA110_0>=92 && LA110_0<=96)||LA110_0==99||(LA110_0>=101 && LA110_0<=104)||(LA110_0>=106 && LA110_0<=110)||(LA110_0>=127 && LA110_0<=128)||(LA110_0>=131 && LA110_0<=135)) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // JavaP.g:1248:46: stat= blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block5485);
            	    stat=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stat.getTree());
            	    if ( state.backtracking==0 ) {
            	      if(stat != null) {retval.element.addStatement(stat.element);}
            	    }

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);

            char_literal152=(Token)match(input,67,FOLLOW_67_in_block5491); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal152_tree = (Object)adaptor.create(char_literal152);
            adaptor.addChild(root_0, char_literal152_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        public Statement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // JavaP.g:1251:1: blockStatement returns [Statement element] : (local= localVariableDeclarationStatement | cd= classOrInterfaceDeclaration | stat= statement );
    public final Java_JavaP.blockStatement_return blockStatement() throws RecognitionException {
        Java_JavaP.blockStatement_return retval = new Java_JavaP.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.localVariableDeclarationStatement_return local = null;

        Java_JavaP.classOrInterfaceDeclaration_return cd = null;

        Java_JavaP.statement_return stat = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // JavaP.g:1253:5: (local= localVariableDeclarationStatement | cd= classOrInterfaceDeclaration | stat= statement )
            int alt111=3;
            alt111 = dfa111.predict(input);
            switch (alt111) {
                case 1 :
                    // JavaP.g:1253:9: local= localVariableDeclarationStatement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclarationStatement_in_blockStatement5520);
                    local=localVariableDeclarationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, local.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = local.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1254:9: cd= classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_blockStatement5534);
                    cd=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new LocalClassStatement(cd.element);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1255:9: stat= statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_blockStatement5548);
                    stat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stat.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = stat.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclarationStatement_return extends ParserRuleReturnScope {
        public Statement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclarationStatement"
    // JavaP.g:1258:1: localVariableDeclarationStatement returns [Statement element] : local= localVariableDeclaration ';' ;
    public final Java_JavaP.localVariableDeclarationStatement_return localVariableDeclarationStatement() throws RecognitionException {
        Java_JavaP.localVariableDeclarationStatement_return retval = new Java_JavaP.localVariableDeclarationStatement_return();
        retval.start = input.LT(1);
        int localVariableDeclarationStatement_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal153=null;
        Java_JavaP.localVariableDeclaration_return local = null;


        Object char_literal153_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // JavaP.g:1259:5: (local= localVariableDeclaration ';' )
            // JavaP.g:1259:10: local= localVariableDeclaration ';'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_localVariableDeclaration_in_localVariableDeclarationStatement5576);
            local=localVariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, local.getTree());
            if ( state.backtracking==0 ) {
              retval.element=local.element;
            }
            char_literal153=(Token)match(input,48,FOLLOW_48_in_localVariableDeclarationStatement5580); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal153_tree = (Object)adaptor.create(char_literal153);
            adaptor.addChild(root_0, char_literal153_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, localVariableDeclarationStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclarationStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        public LocalVariableDeclarator element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // JavaP.g:1262:1: localVariableDeclaration returns [LocalVariableDeclarator element] : mods= variableModifiers ref= type decls= variableDeclarators ;
    public final Java_JavaP.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        Java_JavaP.localVariableDeclaration_return retval = new Java_JavaP.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.variableModifiers_return mods = null;

        Java_JavaP.type_return ref = null;

        Java_JavaP.variableDeclarators_return decls = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // JavaP.g:1263:5: (mods= variableModifiers ref= type decls= variableDeclarators )
            // JavaP.g:1263:9: mods= variableModifiers ref= type decls= variableDeclarators
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableModifiers_in_localVariableDeclaration5605);
            mods=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
            pushFollow(FOLLOW_type_in_localVariableDeclaration5609);
            ref=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ref.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new LocalVariableDeclarator(ref.element);
            }
            pushFollow(FOLLOW_variableDeclarators_in_localVariableDeclaration5615);
            decls=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, decls.getTree());
            if ( state.backtracking==0 ) {
              for(VariableDeclaration decl: decls.element) {retval.element.add(decl);}
            }
            if ( state.backtracking==0 ) {
              for(Modifier mod : mods.element) {retval.element.addModifier(mod);}
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class variableModifiers_return extends ParserRuleReturnScope {
        public List<Modifier> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableModifiers"
    // JavaP.g:1267:1: variableModifiers returns [List<Modifier> element] : (mod= variableModifier )* ;
    public final Java_JavaP.variableModifiers_return variableModifiers() throws RecognitionException {
        Java_JavaP.variableModifiers_return retval = new Java_JavaP.variableModifiers_return();
        retval.start = input.LT(1);
        int variableModifiers_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.variableModifier_return mod = null;



        retval.element = new ArrayList<Modifier>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // JavaP.g:1269:5: ( (mod= variableModifier )* )
            // JavaP.g:1269:9: (mod= variableModifier )*
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:1269:9: (mod= variableModifier )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==57||LA112_0==96) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // JavaP.g:1269:10: mod= variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_variableModifiers5657);
            	    mod=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mod.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(mod.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, variableModifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableModifiers"

    public static class statement_return extends ParserRuleReturnScope {
        public Statement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // JavaP.g:1272:1: statement returns [Statement element] : (bl= block | ASSERT asexpr= expression ( ':' asexprx= expression )? ';' | ifkey= 'if' ifexpr= parExpression ifif= statement ( options {k=1; } : elsekey= 'else' ifelse= statement )? | forkey= 'for' '(' forc= forControl ')' forstat= statement | whilkey= 'while' wexs= parExpression wstat= statement | dokey= 'do' dostat= statement whilekey= 'while' doex= parExpression ';' | trykey= 'try' (ress= resources )? traaibl= block (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block )? | switchkey= 'switch' swexpr= parExpression '{' cases= switchBlockStatementGroups '}' | synkey= 'synchronized' synexpr= parExpression synstat= block | retkey= 'return' (retex= expression )? ';' | throwkey= 'throw' threx= expression ';' | breakkey= 'break' (name= identifierRule )? ';' | continuekey= 'continue' (name= identifierRule )? ';' | ';' | stattex= statementExpression ';' | name= identifierRule ':' labstat= statement );
    public final Java_JavaP.statement_return statement() throws RecognitionException {
        Java_JavaP.statement_return retval = new Java_JavaP.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        Object root_0 = null;

        Token ifkey=null;
        Token elsekey=null;
        Token forkey=null;
        Token whilkey=null;
        Token dokey=null;
        Token whilekey=null;
        Token trykey=null;
        Token finkey=null;
        Token finnkey=null;
        Token switchkey=null;
        Token synkey=null;
        Token retkey=null;
        Token throwkey=null;
        Token breakkey=null;
        Token continuekey=null;
        Token ASSERT154=null;
        Token char_literal155=null;
        Token char_literal156=null;
        Token char_literal157=null;
        Token char_literal158=null;
        Token char_literal159=null;
        Token char_literal160=null;
        Token char_literal161=null;
        Token char_literal162=null;
        Token char_literal163=null;
        Token char_literal164=null;
        Token char_literal165=null;
        Token char_literal166=null;
        Token char_literal167=null;
        Token char_literal168=null;
        Java_JavaP.block_return bl = null;

        Java_JavaP.expression_return asexpr = null;

        Java_JavaP.expression_return asexprx = null;

        Java_JavaP.parExpression_return ifexpr = null;

        Java_JavaP.statement_return ifif = null;

        Java_JavaP.statement_return ifelse = null;

        Java_JavaP.forControl_return forc = null;

        Java_JavaP.statement_return forstat = null;

        Java_JavaP.parExpression_return wexs = null;

        Java_JavaP.statement_return wstat = null;

        Java_JavaP.statement_return dostat = null;

        Java_JavaP.parExpression_return doex = null;

        Java_JavaP.resources_return ress = null;

        Java_JavaP.block_return traaibl = null;

        Java_JavaP.catches_return cts = null;

        Java_JavaP.block_return trybl = null;

        Java_JavaP.catches_return ctss = null;

        Java_JavaP.block_return trybll = null;

        Java_JavaP.parExpression_return swexpr = null;

        Java_JavaP.switchBlockStatementGroups_return cases = null;

        Java_JavaP.parExpression_return synexpr = null;

        Java_JavaP.block_return synstat = null;

        Java_JavaP.expression_return retex = null;

        Java_JavaP.expression_return threx = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.statementExpression_return stattex = null;

        Java_JavaP.statement_return labstat = null;


        Object ifkey_tree=null;
        Object elsekey_tree=null;
        Object forkey_tree=null;
        Object whilkey_tree=null;
        Object dokey_tree=null;
        Object whilekey_tree=null;
        Object trykey_tree=null;
        Object finkey_tree=null;
        Object finnkey_tree=null;
        Object switchkey_tree=null;
        Object synkey_tree=null;
        Object retkey_tree=null;
        Object throwkey_tree=null;
        Object breakkey_tree=null;
        Object continuekey_tree=null;
        Object ASSERT154_tree=null;
        Object char_literal155_tree=null;
        Object char_literal156_tree=null;
        Object char_literal157_tree=null;
        Object char_literal158_tree=null;
        Object char_literal159_tree=null;
        Object char_literal160_tree=null;
        Object char_literal161_tree=null;
        Object char_literal162_tree=null;
        Object char_literal163_tree=null;
        Object char_literal164_tree=null;
        Object char_literal165_tree=null;
        Object char_literal166_tree=null;
        Object char_literal167_tree=null;
        Object char_literal168_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // JavaP.g:1275:5: (bl= block | ASSERT asexpr= expression ( ':' asexprx= expression )? ';' | ifkey= 'if' ifexpr= parExpression ifif= statement ( options {k=1; } : elsekey= 'else' ifelse= statement )? | forkey= 'for' '(' forc= forControl ')' forstat= statement | whilkey= 'while' wexs= parExpression wstat= statement | dokey= 'do' dostat= statement whilekey= 'while' doex= parExpression ';' | trykey= 'try' (ress= resources )? traaibl= block (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block )? | switchkey= 'switch' swexpr= parExpression '{' cases= switchBlockStatementGroups '}' | synkey= 'synchronized' synexpr= parExpression synstat= block | retkey= 'return' (retex= expression )? ';' | throwkey= 'throw' threx= expression ';' | breakkey= 'break' (name= identifierRule )? ';' | continuekey= 'continue' (name= identifierRule )? ';' | ';' | stattex= statementExpression ';' | name= identifierRule ':' labstat= statement )
            int alt120=16;
            alt120 = dfa120.predict(input);
            switch (alt120) {
                case 1 :
                    // JavaP.g:1275:7: bl= block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_block_in_statement5688);
                    bl=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = bl.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1276:9: ASSERT asexpr= expression ( ':' asexprx= expression )? ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    ASSERT154=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_statement5700); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASSERT154_tree = (Object)adaptor.create(ASSERT154);
                    adaptor.addChild(root_0, ASSERT154_tree);
                    }
                    pushFollow(FOLLOW_expression_in_statement5704);
                    asexpr=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asexpr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=new AssertStatement(asexpr.element);
                    }
                    // JavaP.g:1276:87: ( ':' asexprx= expression )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==98) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // JavaP.g:1276:88: ':' asexprx= expression
                            {
                            char_literal155=(Token)match(input,98,FOLLOW_98_in_statement5708); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal155_tree = (Object)adaptor.create(char_literal155);
                            adaptor.addChild(root_0, char_literal155_tree);
                            }
                            pushFollow(FOLLOW_expression_in_statement5712);
                            asexprx=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, asexprx.getTree());
                            if ( state.backtracking==0 ) {
                              ((AssertStatement)retval.element).setMessageExpression(asexprx.element);
                            }

                            }
                            break;

                    }

                    char_literal156=(Token)match(input,48,FOLLOW_48_in_statement5718); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal156_tree = (Object)adaptor.create(char_literal156);
                    adaptor.addChild(root_0, char_literal156_tree);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1277:9: ifkey= 'if' ifexpr= parExpression ifif= statement ( options {k=1; } : elsekey= 'else' ifelse= statement )?
                    {
                    root_0 = (Object)adaptor.nil();

                    ifkey=(Token)match(input,99,FOLLOW_99_in_statement5730); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ifkey_tree = (Object)adaptor.create(ifkey);
                    adaptor.addChild(root_0, ifkey_tree);
                    }
                    pushFollow(FOLLOW_parExpression_in_statement5734);
                    ifexpr=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ifexpr.getTree());
                    pushFollow(FOLLOW_statement_in_statement5738);
                    ifif=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ifif.getTree());
                    // JavaP.g:1277:56: ( options {k=1; } : elsekey= 'else' ifelse= statement )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==100) ) {
                        int LA114_1 = input.LA(2);

                        if ( (synpred149_JavaP()) ) {
                            alt114=1;
                        }
                    }
                    switch (alt114) {
                        case 1 :
                            // JavaP.g:1277:72: elsekey= 'else' ifelse= statement
                            {
                            elsekey=(Token)match(input,100,FOLLOW_100_in_statement5750); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            elsekey_tree = (Object)adaptor.create(elsekey);
                            adaptor.addChild(root_0, elsekey_tree);
                            }
                            pushFollow(FOLLOW_statement_in_statement5754);
                            ifelse=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ifelse.getTree());

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      retval.element=new IfThenElseStatement(ifexpr.element, ifif.element, (ifelse == null ? null : ifelse.element));
                                setKeyword(retval.element,ifkey);
                                if(ifelse != null) {
                                  setKeyword(ifelse.element,elsekey);
                                }
                               
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1284:9: forkey= 'for' '(' forc= forControl ')' forstat= statement
                    {
                    root_0 = (Object)adaptor.nil();

                    forkey=(Token)match(input,101,FOLLOW_101_in_statement5779); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    forkey_tree = (Object)adaptor.create(forkey);
                    adaptor.addChild(root_0, forkey_tree);
                    }
                    char_literal157=(Token)match(input,89,FOLLOW_89_in_statement5781); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal157_tree = (Object)adaptor.create(char_literal157);
                    adaptor.addChild(root_0, char_literal157_tree);
                    }
                    pushFollow(FOLLOW_forControl_in_statement5785);
                    forc=forControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forc.getTree());
                    char_literal158=(Token)match(input,90,FOLLOW_90_in_statement5787); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal158_tree = (Object)adaptor.create(char_literal158);
                    adaptor.addChild(root_0, char_literal158_tree);
                    }
                    pushFollow(FOLLOW_statement_in_statement5791);
                    forstat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forstat.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ForStatement(forc.element,forstat.element);
                              setKeyword(retval.element,forkey);
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1287:9: whilkey= 'while' wexs= parExpression wstat= statement
                    {
                    root_0 = (Object)adaptor.nil();

                    whilkey=(Token)match(input,102,FOLLOW_102_in_statement5813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    whilkey_tree = (Object)adaptor.create(whilkey);
                    adaptor.addChild(root_0, whilkey_tree);
                    }
                    pushFollow(FOLLOW_parExpression_in_statement5817);
                    wexs=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wexs.getTree());
                    pushFollow(FOLLOW_statement_in_statement5821);
                    wstat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wstat.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new WhileStatement(wexs.element, wstat.element);
                              setKeyword(retval.element,whilkey);
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1290:9: dokey= 'do' dostat= statement whilekey= 'while' doex= parExpression ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    dokey=(Token)match(input,103,FOLLOW_103_in_statement5843); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    dokey_tree = (Object)adaptor.create(dokey);
                    adaptor.addChild(root_0, dokey_tree);
                    }
                    pushFollow(FOLLOW_statement_in_statement5847);
                    dostat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dostat.getTree());
                    whilekey=(Token)match(input,102,FOLLOW_102_in_statement5851); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    whilekey_tree = (Object)adaptor.create(whilekey);
                    adaptor.addChild(root_0, whilekey_tree);
                    }
                    pushFollow(FOLLOW_parExpression_in_statement5855);
                    doex=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, doex.getTree());
                    char_literal159=(Token)match(input,48,FOLLOW_48_in_statement5857); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal159_tree = (Object)adaptor.create(char_literal159);
                    adaptor.addChild(root_0, char_literal159_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element= new DoStatement(doex.element, dostat.element);
                              setKeyword(retval.element,dokey);
                              setKeyword(retval.element,whilekey);
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:1294:9: trykey= 'try' (ress= resources )? traaibl= block (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block )?
                    {
                    root_0 = (Object)adaptor.nil();

                    trykey=(Token)match(input,104,FOLLOW_104_in_statement5879); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    trykey_tree = (Object)adaptor.create(trykey);
                    adaptor.addChild(root_0, trykey_tree);
                    }
                    // JavaP.g:1294:26: (ress= resources )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==89) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            // JavaP.g:0:0: ress= resources
                            {
                            pushFollow(FOLLOW_resources_in_statement5883);
                            ress=resources();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ress.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_statement5888);
                    traaibl=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, traaibl.getTree());
                    if ( state.backtracking==0 ) {

                               retval.element = new JavaTryStatement(traaibl.element);
                               ((JavaTryStatement)retval.element).setResourceBlock((ress!=null?ress.element:null));
                               setKeyword(retval.element,trykey);
                               
                    }
                    // JavaP.g:1300:9: (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block )?
                    int alt116=4;
                    alt116 = dfa116.predict(input);
                    switch (alt116) {
                        case 1 :
                            // JavaP.g:1300:11: cts= catches finkey= 'finally' trybl= block
                            {
                            pushFollow(FOLLOW_catches_in_statement5912);
                            cts=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cts.getTree());
                            finkey=(Token)match(input,105,FOLLOW_105_in_statement5916); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            finkey_tree = (Object)adaptor.create(finkey);
                            adaptor.addChild(root_0, finkey_tree);
                            }
                            pushFollow(FOLLOW_block_in_statement5920);
                            trybl=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, trybl.getTree());
                            if ( state.backtracking==0 ) {
                              ((TryStatement)retval.element).addAllCatchClauses(cts.element);
                                          ((TryStatement)retval.element).setFinallyClause(new FinallyClause(trybl.element));
                                          setKeyword(retval.element,finkey);
                                         
                            }

                            }
                            break;
                        case 2 :
                            // JavaP.g:1305:11: ctss= catches
                            {
                            pushFollow(FOLLOW_catches_in_statement5947);
                            ctss=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ctss.getTree());
                            if ( state.backtracking==0 ) {
                              ((TryStatement)retval.element).addAllCatchClauses(ctss.element);
                            }

                            }
                            break;
                        case 3 :
                            // JavaP.g:1306:13: finnkey= 'finally' trybll= block
                            {
                            finnkey=(Token)match(input,105,FOLLOW_105_in_statement5965); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            finnkey_tree = (Object)adaptor.create(finnkey);
                            adaptor.addChild(root_0, finnkey_tree);
                            }
                            pushFollow(FOLLOW_block_in_statement5969);
                            trybll=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, trybll.getTree());
                            if ( state.backtracking==0 ) {
                              ((TryStatement)retval.element).setFinallyClause(new FinallyClause(trybll.element));
                                         setKeyword(retval.element,finnkey);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 8 :
                    // JavaP.g:1310:9: switchkey= 'switch' swexpr= parExpression '{' cases= switchBlockStatementGroups '}'
                    {
                    root_0 = (Object)adaptor.nil();

                    switchkey=(Token)match(input,106,FOLLOW_106_in_statement6005); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    switchkey_tree = (Object)adaptor.create(switchkey);
                    adaptor.addChild(root_0, switchkey_tree);
                    }
                    pushFollow(FOLLOW_parExpression_in_statement6009);
                    swexpr=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, swexpr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new SwitchStatement(swexpr.element);
                                setKeyword(retval.element,switchkey);
                    }
                    char_literal160=(Token)match(input,66,FOLLOW_66_in_statement6033); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal160_tree = (Object)adaptor.create(char_literal160);
                    adaptor.addChild(root_0, char_literal160_tree);
                    }
                    pushFollow(FOLLOW_switchBlockStatementGroups_in_statement6037);
                    cases=switchBlockStatementGroups();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cases.getTree());
                    if ( state.backtracking==0 ) {
                      ((SwitchStatement)retval.element).addAllCases(cases.element);
                    }
                    char_literal161=(Token)match(input,67,FOLLOW_67_in_statement6040); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal161_tree = (Object)adaptor.create(char_literal161);
                    adaptor.addChild(root_0, char_literal161_tree);
                    }

                    }
                    break;
                case 9 :
                    // JavaP.g:1314:9: synkey= 'synchronized' synexpr= parExpression synstat= block
                    {
                    root_0 = (Object)adaptor.nil();

                    synkey=(Token)match(input,75,FOLLOW_75_in_statement6052); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    synkey_tree = (Object)adaptor.create(synkey);
                    adaptor.addChild(root_0, synkey_tree);
                    }
                    pushFollow(FOLLOW_parExpression_in_statement6056);
                    synexpr=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synexpr.getTree());
                    pushFollow(FOLLOW_block_in_statement6060);
                    synstat=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synstat.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new SynchronizedStatement(synexpr.element,synstat.element);
                                setKeyword(retval.element,synkey);
                    }

                    }
                    break;
                case 10 :
                    // JavaP.g:1317:9: retkey= 'return' (retex= expression )? ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    retkey=(Token)match(input,107,FOLLOW_107_in_statement6084); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    retkey_tree = (Object)adaptor.create(retkey);
                    adaptor.addChild(root_0, retkey_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ReturnStatement();
                                   setKeyword(retval.element,retkey);
                    }
                    // JavaP.g:1320:11: (retex= expression )?
                    int alt117=2;
                    int LA117_0 = input.LA(1);

                    if ( (LA117_0==IntegerLiteral||LA117_0==FloatingPointLiteral||(LA117_0>=CharacterLiteral && LA117_0<=StringLiteral)||LA117_0==Identifier||LA117_0==69||(LA117_0>=79 && LA117_0<=86)||(LA117_0>=88 && LA117_0<=89)||(LA117_0>=92 && LA117_0<=95)||(LA117_0>=127 && LA117_0<=128)||(LA117_0>=131 && LA117_0<=135)) ) {
                        alt117=1;
                    }
                    switch (alt117) {
                        case 1 :
                            // JavaP.g:1320:12: retex= expression
                            {
                            pushFollow(FOLLOW_expression_in_statement6113);
                            retex=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, retex.getTree());
                            if ( state.backtracking==0 ) {
                              ((ReturnStatement)retval.element).setExpression(retex.element);
                            }

                            }
                            break;

                    }

                    char_literal162=(Token)match(input,48,FOLLOW_48_in_statement6119); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal162_tree = (Object)adaptor.create(char_literal162);
                    adaptor.addChild(root_0, char_literal162_tree);
                    }

                    }
                    break;
                case 11 :
                    // JavaP.g:1321:9: throwkey= 'throw' threx= expression ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    throwkey=(Token)match(input,108,FOLLOW_108_in_statement6131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    throwkey_tree = (Object)adaptor.create(throwkey);
                    adaptor.addChild(root_0, throwkey_tree);
                    }
                    pushFollow(FOLLOW_expression_in_statement6135);
                    threx=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, threx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ThrowStatement(threx.element);
                              setKeyword(retval.element,throwkey);
                    }
                    char_literal163=(Token)match(input,48,FOLLOW_48_in_statement6155); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal163_tree = (Object)adaptor.create(char_literal163);
                    adaptor.addChild(root_0, char_literal163_tree);
                    }

                    }
                    break;
                case 12 :
                    // JavaP.g:1325:9: breakkey= 'break' (name= identifierRule )? ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    breakkey=(Token)match(input,109,FOLLOW_109_in_statement6167); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    breakkey_tree = (Object)adaptor.create(breakkey);
                    adaptor.addChild(root_0, breakkey_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new BreakStatement();
                              setKeyword(retval.element,breakkey);
                    }
                    // JavaP.g:1328:9: (name= identifierRule )?
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==Identifier) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            // JavaP.g:1328:10: name= identifierRule
                            {
                            pushFollow(FOLLOW_identifierRule_in_statement6190);
                            name=identifierRule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                            if ( state.backtracking==0 ) {
                              ((BreakStatement)retval.element).setLabel((name!=null?input.toString(name.start,name.stop):null));
                            }

                            }
                            break;

                    }

                    char_literal164=(Token)match(input,48,FOLLOW_48_in_statement6196); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal164_tree = (Object)adaptor.create(char_literal164);
                    adaptor.addChild(root_0, char_literal164_tree);
                    }

                    }
                    break;
                case 13 :
                    // JavaP.g:1329:9: continuekey= 'continue' (name= identifierRule )? ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    continuekey=(Token)match(input,110,FOLLOW_110_in_statement6208); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    continuekey_tree = (Object)adaptor.create(continuekey);
                    adaptor.addChild(root_0, continuekey_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ContinueStatement();
                              setKeyword(retval.element,continuekey);
                    }
                    // JavaP.g:1332:9: (name= identifierRule )?
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==Identifier) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            // JavaP.g:1332:10: name= identifierRule
                            {
                            pushFollow(FOLLOW_identifierRule_in_statement6231);
                            name=identifierRule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                            if ( state.backtracking==0 ) {
                              ((ContinueStatement)retval.element).setLabel((name!=null?input.toString(name.start,name.stop):null));
                            }

                            }
                            break;

                    }

                    char_literal165=(Token)match(input,48,FOLLOW_48_in_statement6237); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal165_tree = (Object)adaptor.create(char_literal165);
                    adaptor.addChild(root_0, char_literal165_tree);
                    }

                    }
                    break;
                case 14 :
                    // JavaP.g:1333:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal166=(Token)match(input,48,FOLLOW_48_in_statement6247); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal166_tree = (Object)adaptor.create(char_literal166);
                    adaptor.addChild(root_0, char_literal166_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new EmptyStatement();
                    }

                    }
                    break;
                case 15 :
                    // JavaP.g:1334:9: stattex= statementExpression ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statementExpression_in_statement6261);
                    stattex=statementExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stattex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new StatementExpression(stattex.element);
                    }
                    char_literal167=(Token)match(input,48,FOLLOW_48_in_statement6265); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal167_tree = (Object)adaptor.create(char_literal167);
                    adaptor.addChild(root_0, char_literal167_tree);
                    }

                    }
                    break;
                case 16 :
                    // JavaP.g:1335:9: name= identifierRule ':' labstat= statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifierRule_in_statement6277);
                    name=identifierRule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                    char_literal168=(Token)match(input,98,FOLLOW_98_in_statement6279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal168_tree = (Object)adaptor.create(char_literal168);
                    adaptor.addChild(root_0, char_literal168_tree);
                    }
                    pushFollow(FOLLOW_statement_in_statement6283);
                    labstat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, labstat.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new LabeledStatement((name!=null?input.toString(name.start,name.stop):null),labstat.element);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class resources_return extends ParserRuleReturnScope {
        public ResourceBlock element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "resources"
    // JavaP.g:1338:1: resources returns [ResourceBlock element] : '(' d= localVariableDeclaration ( ';' decl= localVariableDeclaration )* ( ';' )? ')' ;
    public final Java_JavaP.resources_return resources() throws RecognitionException {
        Java_JavaP.resources_return retval = new Java_JavaP.resources_return();
        retval.start = input.LT(1);
        int resources_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal169=null;
        Token char_literal170=null;
        Token char_literal171=null;
        Token char_literal172=null;
        Java_JavaP.localVariableDeclaration_return d = null;

        Java_JavaP.localVariableDeclaration_return decl = null;


        Object char_literal169_tree=null;
        Object char_literal170_tree=null;
        Object char_literal171_tree=null;
        Object char_literal172_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // JavaP.g:1339:5: ( '(' d= localVariableDeclaration ( ';' decl= localVariableDeclaration )* ( ';' )? ')' )
            // JavaP.g:1339:7: '(' d= localVariableDeclaration ( ';' decl= localVariableDeclaration )* ( ';' )? ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal169=(Token)match(input,89,FOLLOW_89_in_resources6306); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal169_tree = (Object)adaptor.create(char_literal169);
            adaptor.addChild(root_0, char_literal169_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new ResourceBlock();
            }
            pushFollow(FOLLOW_localVariableDeclaration_in_resources6325);
            d=localVariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());
            if ( state.backtracking==0 ) {
              retval.element.addResource((d!=null?d.element:null));
            }
            // JavaP.g:1341:11: ( ';' decl= localVariableDeclaration )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==48) ) {
                    int LA121_1 = input.LA(2);

                    if ( (LA121_1==Identifier||LA121_1==57||(LA121_1>=79 && LA121_1<=86)||LA121_1==96) ) {
                        alt121=1;
                    }


                }


                switch (alt121) {
            	case 1 :
            	    // JavaP.g:1341:12: ';' decl= localVariableDeclaration
            	    {
            	    char_literal170=(Token)match(input,48,FOLLOW_48_in_resources6340); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal170_tree = (Object)adaptor.create(char_literal170);
            	    adaptor.addChild(root_0, char_literal170_tree);
            	    }
            	    pushFollow(FOLLOW_localVariableDeclaration_in_resources6346);
            	    decl=localVariableDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.addResource((decl!=null?decl.element:null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);

            // JavaP.g:1342:11: ( ';' )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==48) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // JavaP.g:1342:12: ';'
                    {
                    char_literal171=(Token)match(input,48,FOLLOW_48_in_resources6363); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal171_tree = (Object)adaptor.create(char_literal171);
                    adaptor.addChild(root_0, char_literal171_tree);
                    }

                    }
                    break;

            }

            char_literal172=(Token)match(input,90,FOLLOW_90_in_resources6373); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal172_tree = (Object)adaptor.create(char_literal172);
            adaptor.addChild(root_0, char_literal172_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, resources_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "resources"

    public static class catches_return extends ParserRuleReturnScope {
        public List<CatchClause> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // JavaP.g:1346:1: catches returns [List<CatchClause> element] : (ct= catchClause )+ ;
    public final Java_JavaP.catches_return catches() throws RecognitionException {
        Java_JavaP.catches_return retval = new Java_JavaP.catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.catchClause_return ct = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // JavaP.g:1348:5: ( (ct= catchClause )+ )
            // JavaP.g:1348:9: (ct= catchClause )+
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<CatchClause>();
            }
            // JavaP.g:1348:58: (ct= catchClause )+
            int cnt123=0;
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==111) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // JavaP.g:1348:59: ct= catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches6405);
            	    ct=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ct.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(ct.element);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt123 >= 1 ) break loop123;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(123, input);
                        throw eee;
                }
                cnt123++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        public CatchClause element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // JavaP.g:1351:1: catchClause returns [CatchClause element] : catchkey= 'catch' '(' par= catchParameter ')' bl= block ;
    public final Java_JavaP.catchClause_return catchClause() throws RecognitionException {
        Java_JavaP.catchClause_return retval = new Java_JavaP.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        Object root_0 = null;

        Token catchkey=null;
        Token char_literal173=null;
        Token char_literal174=null;
        Java_JavaP.catchParameter_return par = null;

        Java_JavaP.block_return bl = null;


        Object catchkey_tree=null;
        Object char_literal173_tree=null;
        Object char_literal174_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // JavaP.g:1353:5: (catchkey= 'catch' '(' par= catchParameter ')' bl= block )
            // JavaP.g:1353:9: catchkey= 'catch' '(' par= catchParameter ')' bl= block
            {
            root_0 = (Object)adaptor.nil();

            catchkey=(Token)match(input,111,FOLLOW_111_in_catchClause6438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            catchkey_tree = (Object)adaptor.create(catchkey);
            adaptor.addChild(root_0, catchkey_tree);
            }
            char_literal173=(Token)match(input,89,FOLLOW_89_in_catchClause6440); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal173_tree = (Object)adaptor.create(char_literal173);
            adaptor.addChild(root_0, char_literal173_tree);
            }
            pushFollow(FOLLOW_catchParameter_in_catchClause6444);
            par=catchParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, par.getTree());
            char_literal174=(Token)match(input,90,FOLLOW_90_in_catchClause6446); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal174_tree = (Object)adaptor.create(char_literal174);
            adaptor.addChild(root_0, char_literal174_tree);
            }
            pushFollow(FOLLOW_block_in_catchClause6450);
            bl=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bl.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new CatchClause(par.element, bl.element);
                      setKeyword(retval.element,catchkey);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class catchParameter_return extends ParserRuleReturnScope {
        public FormalParameter element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchParameter"
    // JavaP.g:1360:1: catchParameter returns [FormalParameter element] : mods= variableModifiers tref= possibleUnionType name= variableDeclaratorId ;
    public final Java_JavaP.catchParameter_return catchParameter() throws RecognitionException {
        Java_JavaP.catchParameter_return retval = new Java_JavaP.catchParameter_return();
        retval.start = input.LT(1);
        int catchParameter_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.variableModifiers_return mods = null;

        Java_JavaP.possibleUnionType_return tref = null;

        Java_JavaP.variableDeclaratorId_return name = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // JavaP.g:1362:5: (mods= variableModifiers tref= possibleUnionType name= variableDeclaratorId )
            // JavaP.g:1362:9: mods= variableModifiers tref= possibleUnionType name= variableDeclaratorId
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableModifiers_in_catchParameter6491);
            mods=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
            pushFollow(FOLLOW_possibleUnionType_in_catchParameter6495);
            tref=possibleUnionType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_catchParameter6499);
            name=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new FormalParameter(name.element.name(), myToArray(tref.element, name.element));
                       setLocation(retval.element, mods.start, name.stop);
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, catchParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchParameter"

    public static class formalParameter_return extends ParserRuleReturnScope {
        public FormalParameter element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameter"
    // JavaP.g:1370:1: formalParameter returns [FormalParameter element] : mods= variableModifiers tref= type name= variableDeclaratorId ;
    public final Java_JavaP.formalParameter_return formalParameter() throws RecognitionException {
        Java_JavaP.formalParameter_return retval = new Java_JavaP.formalParameter_return();
        retval.start = input.LT(1);
        int formalParameter_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.variableModifiers_return mods = null;

        Java_JavaP.type_return tref = null;

        Java_JavaP.variableDeclaratorId_return name = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // JavaP.g:1372:5: (mods= variableModifiers tref= type name= variableDeclaratorId )
            // JavaP.g:1372:9: mods= variableModifiers tref= type name= variableDeclaratorId
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableModifiers_in_formalParameter6540);
            mods=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
            pushFollow(FOLLOW_type_in_formalParameter6544);
            tref=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameter6548);
            name=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new FormalParameter(name.element.name(), myToArray(tref.element, name.element));
                       setLocation(retval.element, mods.start, name.stop);
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, formalParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameter"

    public static class switchBlockStatementGroups_return extends ParserRuleReturnScope {
        public List<SwitchCase> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroups"
    // JavaP.g:1378:1: switchBlockStatementGroups returns [List<SwitchCase> element] : (cs= switchCase )* ;
    public final Java_JavaP.switchBlockStatementGroups_return switchBlockStatementGroups() throws RecognitionException {
        Java_JavaP.switchBlockStatementGroups_return retval = new Java_JavaP.switchBlockStatementGroups_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroups_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.switchCase_return cs = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // JavaP.g:1380:5: ( (cs= switchCase )* )
            // JavaP.g:1380:9: (cs= switchCase )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<SwitchCase>();
            }
            // JavaP.g:1380:56: (cs= switchCase )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==97||LA124_0==112) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // JavaP.g:1380:57: cs= switchCase
            	    {
            	    pushFollow(FOLLOW_switchCase_in_switchBlockStatementGroups6589);
            	    cs=switchCase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cs.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(cs.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, switchBlockStatementGroups_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroups"

    public static class switchCase_return extends ParserRuleReturnScope {
        public SwitchCase element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchCase"
    // JavaP.g:1387:1: switchCase returns [SwitchCase element] : label= switchLabel ( blockStatement )* ;
    public final Java_JavaP.switchCase_return switchCase() throws RecognitionException {
        Java_JavaP.switchCase_return retval = new Java_JavaP.switchCase_return();
        retval.start = input.LT(1);
        int switchCase_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.switchLabel_return label = null;

        Java_JavaP.blockStatement_return blockStatement175 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // JavaP.g:1389:5: (label= switchLabel ( blockStatement )* )
            // JavaP.g:1389:9: label= switchLabel ( blockStatement )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_switchLabel_in_switchCase6624);
            label=switchLabel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, label.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new JavaSwitchCase(label.element);
            }
            // JavaP.g:1389:81: ( blockStatement )*
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==IntegerLiteral||LA125_0==FloatingPointLiteral||(LA125_0>=CharacterLiteral && LA125_0<=StringLiteral)||(LA125_0>=ENUM && LA125_0<=ASSERT)||LA125_0==Identifier||LA125_0==48||LA125_0==50||(LA125_0>=53 && LA125_0<=59)||LA125_0==66||(LA125_0>=68 && LA125_0<=69)||LA125_0==75||(LA125_0>=79 && LA125_0<=86)||(LA125_0>=88 && LA125_0<=89)||(LA125_0>=92 && LA125_0<=96)||LA125_0==99||(LA125_0>=101 && LA125_0<=104)||(LA125_0>=106 && LA125_0<=110)||(LA125_0>=127 && LA125_0<=128)||(LA125_0>=131 && LA125_0<=135)) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // JavaP.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchCase6628);
            	    blockStatement175=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement175.getTree());

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, switchCase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchCase"

    public static class switchLabel_return extends ParserRuleReturnScope {
        public SwitchLabel element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchLabel"
    // JavaP.g:1392:1: switchLabel returns [SwitchLabel element] : ( 'case' csexpr= constantExpression ':' | 'case' enumname= enumConstantName ':' | 'default' ':' );
    public final Java_JavaP.switchLabel_return switchLabel() throws RecognitionException {
        Java_JavaP.switchLabel_return retval = new Java_JavaP.switchLabel_return();
        retval.start = input.LT(1);
        int switchLabel_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal176=null;
        Token char_literal177=null;
        Token string_literal178=null;
        Token char_literal179=null;
        Token string_literal180=null;
        Token char_literal181=null;
        Java_JavaP.constantExpression_return csexpr = null;

        Java_JavaP.enumConstantName_return enumname = null;


        Object string_literal176_tree=null;
        Object char_literal177_tree=null;
        Object string_literal178_tree=null;
        Object char_literal179_tree=null;
        Object string_literal180_tree=null;
        Object char_literal181_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // JavaP.g:1394:5: ( 'case' csexpr= constantExpression ':' | 'case' enumname= enumConstantName ':' | 'default' ':' )
            int alt126=3;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==112) ) {
                int LA126_1 = input.LA(2);

                if ( (LA126_1==IntegerLiteral||LA126_1==FloatingPointLiteral||(LA126_1>=CharacterLiteral && LA126_1<=StringLiteral)||LA126_1==69||(LA126_1>=79 && LA126_1<=86)||(LA126_1>=88 && LA126_1<=89)||(LA126_1>=92 && LA126_1<=95)||(LA126_1>=127 && LA126_1<=128)||(LA126_1>=131 && LA126_1<=135)) ) {
                    alt126=1;
                }
                else if ( (LA126_1==Identifier) ) {
                    int LA126_4 = input.LA(3);

                    if ( ((LA126_4>=51 && LA126_4<=52)||LA126_4==62||(LA126_4>=64 && LA126_4<=65)||LA126_4==70||LA126_4==73||LA126_4==78||LA126_4==87||LA126_4==89||(LA126_4>=113 && LA126_4<=132)) ) {
                        alt126=1;
                    }
                    else if ( (LA126_4==98) ) {
                        int LA126_5 = input.LA(4);

                        if ( (synpred175_JavaP()) ) {
                            alt126=1;
                        }
                        else if ( (synpred176_JavaP()) ) {
                            alt126=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 126, 5, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 126, 4, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 126, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA126_0==97) ) {
                alt126=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;
            }
            switch (alt126) {
                case 1 :
                    // JavaP.g:1394:9: 'case' csexpr= constantExpression ':'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal176=(Token)match(input,112,FOLLOW_112_in_switchLabel6656); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal176_tree = (Object)adaptor.create(string_literal176);
                    adaptor.addChild(root_0, string_literal176_tree);
                    }
                    pushFollow(FOLLOW_constantExpression_in_switchLabel6660);
                    csexpr=constantExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, csexpr.getTree());
                    char_literal177=(Token)match(input,98,FOLLOW_98_in_switchLabel6662); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal177_tree = (Object)adaptor.create(char_literal177);
                    adaptor.addChild(root_0, char_literal177_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new CaseLabel(csexpr.element);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1395:9: 'case' enumname= enumConstantName ':'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal178=(Token)match(input,112,FOLLOW_112_in_switchLabel6674); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal178_tree = (Object)adaptor.create(string_literal178);
                    adaptor.addChild(root_0, string_literal178_tree);
                    }
                    pushFollow(FOLLOW_enumConstantName_in_switchLabel6678);
                    enumname=enumConstantName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumname.getTree());
                    char_literal179=(Token)match(input,98,FOLLOW_98_in_switchLabel6680); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal179_tree = (Object)adaptor.create(char_literal179);
                    adaptor.addChild(root_0, char_literal179_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new EnumLabel(enumname.element);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1396:9: 'default' ':'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal180=(Token)match(input,97,FOLLOW_97_in_switchLabel6692); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal180_tree = (Object)adaptor.create(string_literal180);
                    adaptor.addChild(root_0, string_literal180_tree);
                    }
                    char_literal181=(Token)match(input,98,FOLLOW_98_in_switchLabel6694); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal181_tree = (Object)adaptor.create(char_literal181);
                    adaptor.addChild(root_0, char_literal181_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new DefaultLabel();
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, switchLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchLabel"

    public static class forControl_return extends ParserRuleReturnScope {
        public ForControl element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forControl"
    // JavaP.g:1399:1: forControl returns [ForControl element] options {k=3; } : (enh= enhancedForControl | (in= forInit )? ';' (e= expression )? ';' (u= forUpdate )? );
    public final Java_JavaP.forControl_return forControl() throws RecognitionException {
        Java_JavaP.forControl_return retval = new Java_JavaP.forControl_return();
        retval.start = input.LT(1);
        int forControl_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal182=null;
        Token char_literal183=null;
        Java_JavaP.enhancedForControl_return enh = null;

        Java_JavaP.forInit_return in = null;

        Java_JavaP.expression_return e = null;

        Java_JavaP.forUpdate_return u = null;


        Object char_literal182_tree=null;
        Object char_literal183_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // JavaP.g:1402:5: (enh= enhancedForControl | (in= forInit )? ';' (e= expression )? ';' (u= forUpdate )? )
            int alt130=2;
            alt130 = dfa130.predict(input);
            switch (alt130) {
                case 1 :
                    // JavaP.g:1402:9: enh= enhancedForControl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enhancedForControl_in_forControl6732);
                    enh=enhancedForControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enh.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=enh.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1403:9: (in= forInit )? ';' (e= expression )? ';' (u= forUpdate )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:1403:11: (in= forInit )?
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==IntegerLiteral||LA127_0==FloatingPointLiteral||(LA127_0>=CharacterLiteral && LA127_0<=StringLiteral)||LA127_0==Identifier||LA127_0==57||LA127_0==69||(LA127_0>=79 && LA127_0<=86)||(LA127_0>=88 && LA127_0<=89)||(LA127_0>=92 && LA127_0<=96)||(LA127_0>=127 && LA127_0<=128)||(LA127_0>=131 && LA127_0<=135)) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            // JavaP.g:0:0: in= forInit
                            {
                            pushFollow(FOLLOW_forInit_in_forControl6746);
                            in=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, in.getTree());

                            }
                            break;

                    }

                    char_literal182=(Token)match(input,48,FOLLOW_48_in_forControl6749); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal182_tree = (Object)adaptor.create(char_literal182);
                    adaptor.addChild(root_0, char_literal182_tree);
                    }
                    // JavaP.g:1403:26: (e= expression )?
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==IntegerLiteral||LA128_0==FloatingPointLiteral||(LA128_0>=CharacterLiteral && LA128_0<=StringLiteral)||LA128_0==Identifier||LA128_0==69||(LA128_0>=79 && LA128_0<=86)||(LA128_0>=88 && LA128_0<=89)||(LA128_0>=92 && LA128_0<=95)||(LA128_0>=127 && LA128_0<=128)||(LA128_0>=131 && LA128_0<=135)) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            // JavaP.g:0:0: e= expression
                            {
                            pushFollow(FOLLOW_expression_in_forControl6753);
                            e=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());

                            }
                            break;

                    }

                    char_literal183=(Token)match(input,48,FOLLOW_48_in_forControl6756); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal183_tree = (Object)adaptor.create(char_literal183);
                    adaptor.addChild(root_0, char_literal183_tree);
                    }
                    // JavaP.g:1403:44: (u= forUpdate )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==IntegerLiteral||LA129_0==FloatingPointLiteral||(LA129_0>=CharacterLiteral && LA129_0<=StringLiteral)||LA129_0==Identifier||LA129_0==69||(LA129_0>=79 && LA129_0<=86)||(LA129_0>=88 && LA129_0<=89)||(LA129_0>=92 && LA129_0<=95)||(LA129_0>=127 && LA129_0<=128)||(LA129_0>=131 && LA129_0<=135)) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // JavaP.g:0:0: u= forUpdate
                            {
                            pushFollow(FOLLOW_forUpdate_in_forControl6760);
                            u=forUpdate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, u.getTree());

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      retval.element = new SimpleForControl((in!=null?in.element:null),(e!=null?e.element:null),(u!=null?u.element:null));
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, forControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forControl"

    public static class forInit_return extends ParserRuleReturnScope {
        public ForInit element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // JavaP.g:1406:1: forInit returns [ForInit element] : (local= localVariableDeclaration | el= expressionList );
    public final Java_JavaP.forInit_return forInit() throws RecognitionException {
        Java_JavaP.forInit_return retval = new Java_JavaP.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.localVariableDeclaration_return local = null;

        Java_JavaP.expressionList_return el = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // JavaP.g:1408:5: (local= localVariableDeclaration | el= expressionList )
            int alt131=2;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // JavaP.g:1408:9: local= localVariableDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_forInit6792);
                    local=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, local.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=local.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1409:9: el= expressionList
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expressionList_in_forInit6806);
                    el=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, el.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new StatementExprList(); for(Expression expr: el.element){((StatementExprList)retval.element).addStatement(new StatementExpression(expr));};
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class enhancedForControl_return extends ParserRuleReturnScope {
        public ForControl element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enhancedForControl"
    // JavaP.g:1412:1: enhancedForControl returns [ForControl element] : local= localVariableDeclaration ':' ex= expression ;
    public final Java_JavaP.enhancedForControl_return enhancedForControl() throws RecognitionException {
        Java_JavaP.enhancedForControl_return retval = new Java_JavaP.enhancedForControl_return();
        retval.start = input.LT(1);
        int enhancedForControl_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal184=null;
        Java_JavaP.localVariableDeclaration_return local = null;

        Java_JavaP.expression_return ex = null;


        Object char_literal184_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // JavaP.g:1414:5: (local= localVariableDeclaration ':' ex= expression )
            // JavaP.g:1414:9: local= localVariableDeclaration ':' ex= expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_localVariableDeclaration_in_enhancedForControl6837);
            local=localVariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, local.getTree());
            char_literal184=(Token)match(input,98,FOLLOW_98_in_enhancedForControl6839); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal184_tree = (Object)adaptor.create(char_literal184);
            adaptor.addChild(root_0, char_literal184_tree);
            }
            pushFollow(FOLLOW_expression_in_enhancedForControl6843);
            ex=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new EnhancedForControl(local.element, ex.element);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, enhancedForControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enhancedForControl"

    public static class forUpdate_return extends ParserRuleReturnScope {
        public StatementExprList element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forUpdate"
    // JavaP.g:1417:1: forUpdate returns [StatementExprList element] : el= expressionList ;
    public final Java_JavaP.forUpdate_return forUpdate() throws RecognitionException {
        Java_JavaP.forUpdate_return retval = new Java_JavaP.forUpdate_return();
        retval.start = input.LT(1);
        int forUpdate_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.expressionList_return el = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // JavaP.g:1418:5: (el= expressionList )
            // JavaP.g:1418:9: el= expressionList
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expressionList_in_forUpdate6870);
            el=expressionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, el.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new StatementExprList(); for(Expression expr: el.element){((StatementExprList)retval.element).addStatement(new StatementExpression(expr));};
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, forUpdate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forUpdate"

    public static class parExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // JavaP.g:1423:1: parExpression returns [Expression element] : s= '(' expr= expression e= ')' ;
    public final Java_JavaP.parExpression_return parExpression() throws RecognitionException {
        Java_JavaP.parExpression_return retval = new Java_JavaP.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        Object root_0 = null;

        Token s=null;
        Token e=null;
        Java_JavaP.expression_return expr = null;


        Object s_tree=null;
        Object e_tree=null;


        Token start=null;
        Token stop=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // JavaP.g:1431:5: (s= '(' expr= expression e= ')' )
            // JavaP.g:1431:9: s= '(' expr= expression e= ')'
            {
            root_0 = (Object)adaptor.nil();

            s=(Token)match(input,89,FOLLOW_89_in_parExpression6907); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            s_tree = (Object)adaptor.create(s);
            adaptor.addChild(root_0, s_tree);
            }
            pushFollow(FOLLOW_expression_in_parExpression6911);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr.getTree());
            if ( state.backtracking==0 ) {
              retval.element = expr.element;
            }
            e=(Token)match(input,90,FOLLOW_90_in_parExpression6917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            e_tree = (Object)adaptor.create(e);
            adaptor.addChild(root_0, e_tree);
            }
            if ( state.backtracking==0 ) {

                        start = s;
                        stop = e;
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

              setLocation(retval.element,start,stop);

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        public List<Expression> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // JavaP.g:1438:1: expressionList returns [List<Expression> element] : e= expression ( ',' ex= expression )* ;
    public final Java_JavaP.expressionList_return expressionList() throws RecognitionException {
        Java_JavaP.expressionList_return retval = new Java_JavaP.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal185=null;
        Java_JavaP.expression_return e = null;

        Java_JavaP.expression_return ex = null;


        Object char_literal185_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // JavaP.g:1439:5: (e= expression ( ',' ex= expression )* )
            // JavaP.g:1439:9: e= expression ( ',' ex= expression )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<Expression>();
            }
            pushFollow(FOLLOW_expression_in_expressionList6954);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
              if(e.element == null) {System.out.println((e!=null?input.toString(e.start,e.stop):null));throw new RuntimeException("parser error");}
                       retval.element.add(e.element);
            }
            // JavaP.g:1442:10: ( ',' ex= expression )*
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==63) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    // JavaP.g:1442:11: ',' ex= expression
            	    {
            	    char_literal185=(Token)match(input,63,FOLLOW_63_in_expressionList6976); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal185_tree = (Object)adaptor.create(char_literal185);
            	    adaptor.addChild(root_0, char_literal185_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_expressionList6980);
            	    ex=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(ex.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class statementExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statementExpression"
    // JavaP.g:1445:1: statementExpression returns [Expression element] : e= expression ;
    public final Java_JavaP.statementExpression_return statementExpression() throws RecognitionException {
        Java_JavaP.statementExpression_return retval = new Java_JavaP.statementExpression_return();
        retval.start = input.LT(1);
        int statementExpression_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.expression_return e = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // JavaP.g:1446:5: (e= expression )
            // JavaP.g:1446:9: e= expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_statementExpression7009);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
              retval.element = e.element;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, statementExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statementExpression"

    public static class constantExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantExpression"
    // JavaP.g:1449:1: constantExpression returns [Expression element] : e= expression ;
    public final Java_JavaP.constantExpression_return constantExpression() throws RecognitionException {
        Java_JavaP.constantExpression_return retval = new Java_JavaP.constantExpression_return();
        retval.start = input.LT(1);
        int constantExpression_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.expression_return e = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // JavaP.g:1450:5: (e= expression )
            // JavaP.g:1450:9: e= expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_constantExpression7036);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
              retval.element = e.element;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, constantExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantExpression"

    public static class expression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // JavaP.g:1453:1: expression returns [Expression element] : ex= conditionalExpression (op= assignmentOperator exx= expression )? ;
    public final Java_JavaP.expression_return expression() throws RecognitionException {
        Java_JavaP.expression_return retval = new Java_JavaP.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.conditionalExpression_return ex = null;

        Java_JavaP.assignmentOperator_return op = null;

        Java_JavaP.expression_return exx = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // JavaP.g:1455:5: (ex= conditionalExpression (op= assignmentOperator exx= expression )? )
            // JavaP.g:1455:9: ex= conditionalExpression (op= assignmentOperator exx= expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_expression7067);
            ex=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element=ex.element;
            }
            // JavaP.g:1455:63: (op= assignmentOperator exx= expression )?
            int alt133=2;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    // JavaP.g:1455:64: op= assignmentOperator exx= expression
                    {
                    pushFollow(FOLLOW_assignmentOperator_in_expression7074);
                    op=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
                    pushFollow(FOLLOW_expression_in_expression7078);
                    exx=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
                    if ( state.backtracking==0 ) {
                      String txt = (op!=null?input.toString(op.start,op.stop):null);
                               if(txt.equals("=")) {
                                 retval.element = new AssignmentExpression(ex.element,exx.element);
                               } else {
                                 retval.element = createInfixOperatorInvocation((op!=null?input.toString(op.start,op.stop):null),ex.element);
                                 ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
                               }
                               //setName(retval.element,op.start,op.stop);
                               setLocation(retval.element,retval.start,exx.stop);
                              
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class assignmentOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentOperator"
    // JavaP.g:1469:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}? | ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? | ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?);
    public final Java_JavaP.assignmentOperator_return assignmentOperator() throws RecognitionException {
        Java_JavaP.assignmentOperator_return retval = new Java_JavaP.assignmentOperator_return();
        retval.start = input.LT(1);
        int assignmentOperator_StartIndex = input.index();
        Object root_0 = null;

        Token t1=null;
        Token t2=null;
        Token t3=null;
        Token t4=null;
        Token char_literal186=null;
        Token string_literal187=null;
        Token string_literal188=null;
        Token string_literal189=null;
        Token string_literal190=null;
        Token string_literal191=null;
        Token string_literal192=null;
        Token string_literal193=null;
        Token string_literal194=null;

        Object t1_tree=null;
        Object t2_tree=null;
        Object t3_tree=null;
        Object t4_tree=null;
        Object char_literal186_tree=null;
        Object string_literal187_tree=null;
        Object string_literal188_tree=null;
        Object string_literal189_tree=null;
        Object string_literal190_tree=null;
        Object string_literal191_tree=null;
        Object string_literal192_tree=null;
        Object string_literal193_tree=null;
        Object string_literal194_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // JavaP.g:1470:5: ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}? | ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? | ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?)
            int alt134=12;
            alt134 = dfa134.predict(input);
            switch (alt134) {
                case 1 :
                    // JavaP.g:1470:9: '='
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal186=(Token)match(input,73,FOLLOW_73_in_assignmentOperator7118); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal186_tree = (Object)adaptor.create(char_literal186);
                    adaptor.addChild(root_0, char_literal186_tree);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1471:9: '+='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal187=(Token)match(input,113,FOLLOW_113_in_assignmentOperator7128); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal187_tree = (Object)adaptor.create(string_literal187);
                    adaptor.addChild(root_0, string_literal187_tree);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1472:9: '-='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal188=(Token)match(input,114,FOLLOW_114_in_assignmentOperator7138); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal188_tree = (Object)adaptor.create(string_literal188);
                    adaptor.addChild(root_0, string_literal188_tree);
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1473:9: '*='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal189=(Token)match(input,115,FOLLOW_115_in_assignmentOperator7148); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal189_tree = (Object)adaptor.create(string_literal189);
                    adaptor.addChild(root_0, string_literal189_tree);
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1474:9: '/='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal190=(Token)match(input,116,FOLLOW_116_in_assignmentOperator7158); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal190_tree = (Object)adaptor.create(string_literal190);
                    adaptor.addChild(root_0, string_literal190_tree);
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1475:9: '&='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal191=(Token)match(input,117,FOLLOW_117_in_assignmentOperator7168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal191_tree = (Object)adaptor.create(string_literal191);
                    adaptor.addChild(root_0, string_literal191_tree);
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:1476:9: '|='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal192=(Token)match(input,118,FOLLOW_118_in_assignmentOperator7178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal192_tree = (Object)adaptor.create(string_literal192);
                    adaptor.addChild(root_0, string_literal192_tree);
                    }

                    }
                    break;
                case 8 :
                    // JavaP.g:1477:9: '^='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal193=(Token)match(input,119,FOLLOW_119_in_assignmentOperator7188); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal193_tree = (Object)adaptor.create(string_literal193);
                    adaptor.addChild(root_0, string_literal193_tree);
                    }

                    }
                    break;
                case 9 :
                    // JavaP.g:1478:9: '%='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal194=(Token)match(input,120,FOLLOW_120_in_assignmentOperator7198); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal194_tree = (Object)adaptor.create(string_literal194);
                    adaptor.addChild(root_0, string_literal194_tree);
                    }

                    }
                    break;
                case 10 :
                    // JavaP.g:1479:9: ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,62,FOLLOW_62_in_assignmentOperator7219); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,62,FOLLOW_62_in_assignmentOperator7223); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    t3=(Token)match(input,73,FOLLOW_73_in_assignmentOperator7227); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t3_tree = (Object)adaptor.create(t3);
                    adaptor.addChild(root_0, t3_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() &&
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "assignmentOperator", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() &&\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 11 :
                    // JavaP.g:1484:9: ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,64,FOLLOW_64_in_assignmentOperator7260); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,64,FOLLOW_64_in_assignmentOperator7264); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    t3=(Token)match(input,64,FOLLOW_64_in_assignmentOperator7268); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t3_tree = (Object)adaptor.create(t3);
                    adaptor.addChild(root_0, t3_tree);
                    }
                    t4=(Token)match(input,73,FOLLOW_73_in_assignmentOperator7272); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t4_tree = (Object)adaptor.create(t4);
                    adaptor.addChild(root_0, t4_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() &&
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() &&
                              t3.getLine() == t4.getLine() &&
                              t3.getCharPositionInLine() + 1 == t4.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "assignmentOperator", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() &&\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() &&\n          $t3.getLine() == $t4.getLine() &&\n          $t3.getCharPositionInLine() + 1 == $t4.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 12 :
                    // JavaP.g:1491:9: ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,64,FOLLOW_64_in_assignmentOperator7303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,64,FOLLOW_64_in_assignmentOperator7307); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    t3=(Token)match(input,73,FOLLOW_73_in_assignmentOperator7311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t3_tree = (Object)adaptor.create(t3);
                    adaptor.addChild(root_0, t3_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() &&
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "assignmentOperator", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() &&\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, assignmentOperator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignmentOperator"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // JavaP.g:1498:1: conditionalExpression returns [Expression element] : ex= conditionalOrExpression ( '?' exx= expression ':' exxx= expression )? ;
    public final Java_JavaP.conditionalExpression_return conditionalExpression() throws RecognitionException {
        Java_JavaP.conditionalExpression_return retval = new Java_JavaP.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal195=null;
        Token char_literal196=null;
        Java_JavaP.conditionalOrExpression_return ex = null;

        Java_JavaP.expression_return exx = null;

        Java_JavaP.expression_return exxx = null;


        Object char_literal195_tree=null;
        Object char_literal196_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // JavaP.g:1500:5: (ex= conditionalOrExpression ( '?' exx= expression ':' exxx= expression )? )
            // JavaP.g:1500:9: ex= conditionalOrExpression ( '?' exx= expression ':' exxx= expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression7350);
            ex=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1500:66: ( '?' exx= expression ':' exxx= expression )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==87) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // JavaP.g:1500:68: '?' exx= expression ':' exxx= expression
                    {
                    char_literal195=(Token)match(input,87,FOLLOW_87_in_conditionalExpression7355); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal195_tree = (Object)adaptor.create(char_literal195);
                    adaptor.addChild(root_0, char_literal195_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression7359);
                    exx=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
                    char_literal196=(Token)match(input,98,FOLLOW_98_in_conditionalExpression7361); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal196_tree = (Object)adaptor.create(char_literal196);
                    adaptor.addChild(root_0, char_literal196_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression7365);
                    exxx=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exxx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = expressionFactory().createConditionalExpression(retval.element,exx.element,exxx.element);
                               setLocation(retval.element,retval.start,exxx.stop);
                              
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // JavaP.g:1507:1: conditionalOrExpression returns [Expression element] : ex= conditionalAndExpression ( '||' exx= conditionalAndExpression )* ;
    public final Java_JavaP.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        Java_JavaP.conditionalOrExpression_return retval = new Java_JavaP.conditionalOrExpression_return();
        retval.start = input.LT(1);
        int conditionalOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal197=null;
        Java_JavaP.conditionalAndExpression_return ex = null;

        Java_JavaP.conditionalAndExpression_return exx = null;


        Object string_literal197_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // JavaP.g:1509:5: (ex= conditionalAndExpression ( '||' exx= conditionalAndExpression )* )
            // JavaP.g:1509:9: ex= conditionalAndExpression ( '||' exx= conditionalAndExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression7411);
            ex=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1509:68: ( '||' exx= conditionalAndExpression )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==121) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // JavaP.g:1509:70: '||' exx= conditionalAndExpression
            	    {
            	    string_literal197=(Token)match(input,121,FOLLOW_121_in_conditionalOrExpression7417); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal197_tree = (Object)adaptor.create(string_literal197);
            	    adaptor.addChild(root_0, string_literal197_tree);
            	    }
            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression7421);
            	    exx=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element = new ConditionalOrExpression(retval.element, exx.element);
            	               setLocation(retval.element,retval.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, conditionalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // JavaP.g:1515:1: conditionalAndExpression returns [Expression element] : ex= inclusiveOrExpression ( '&&' exx= inclusiveOrExpression )* ;
    public final Java_JavaP.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        Java_JavaP.conditionalAndExpression_return retval = new Java_JavaP.conditionalAndExpression_return();
        retval.start = input.LT(1);
        int conditionalAndExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal198=null;
        Java_JavaP.inclusiveOrExpression_return ex = null;

        Java_JavaP.inclusiveOrExpression_return exx = null;


        Object string_literal198_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // JavaP.g:1517:5: (ex= inclusiveOrExpression ( '&&' exx= inclusiveOrExpression )* )
            // JavaP.g:1517:9: ex= inclusiveOrExpression ( '&&' exx= inclusiveOrExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7462);
            ex=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1517:65: ( '&&' exx= inclusiveOrExpression )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==122) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // JavaP.g:1517:67: '&&' exx= inclusiveOrExpression
            	    {
            	    string_literal198=(Token)match(input,122,FOLLOW_122_in_conditionalAndExpression7468); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal198_tree = (Object)adaptor.create(string_literal198);
            	    adaptor.addChild(root_0, string_literal198_tree);
            	    }
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7472);
            	    exx=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element = new ConditionalAndExpression(retval.element, exx.element);
            	               setLocation(retval.element,retval.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, conditionalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // JavaP.g:1523:1: inclusiveOrExpression returns [Expression element] : ex= exclusiveOrExpression ( '|' exx= exclusiveOrExpression )* ;
    public final Java_JavaP.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        Java_JavaP.inclusiveOrExpression_return retval = new Java_JavaP.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal199=null;
        Java_JavaP.exclusiveOrExpression_return ex = null;

        Java_JavaP.exclusiveOrExpression_return exx = null;


        Object char_literal199_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // JavaP.g:1525:5: (ex= exclusiveOrExpression ( '|' exx= exclusiveOrExpression )* )
            // JavaP.g:1525:9: ex= exclusiveOrExpression ( '|' exx= exclusiveOrExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7513);
            ex=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1525:65: ( '|' exx= exclusiveOrExpression )*
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0==78) ) {
                    alt138=1;
                }


                switch (alt138) {
            	case 1 :
            	    // JavaP.g:1525:67: '|' exx= exclusiveOrExpression
            	    {
            	    char_literal199=(Token)match(input,78,FOLLOW_78_in_inclusiveOrExpression7519); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal199_tree = (Object)adaptor.create(char_literal199);
            	    adaptor.addChild(root_0, char_literal199_tree);
            	    }
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7523);
            	    exx=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = createInfixOperatorInvocation("|", retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,retval.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // JavaP.g:1533:1: exclusiveOrExpression returns [Expression element] : ex= andExpression ( '^' exx= andExpression )* ;
    public final Java_JavaP.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        Java_JavaP.exclusiveOrExpression_return retval = new Java_JavaP.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal200=null;
        Java_JavaP.andExpression_return ex = null;

        Java_JavaP.andExpression_return exx = null;


        Object char_literal200_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // JavaP.g:1535:5: (ex= andExpression ( '^' exx= andExpression )* )
            // JavaP.g:1535:9: ex= andExpression ( '^' exx= andExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression7564);
            ex=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1535:57: ( '^' exx= andExpression )*
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==123) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    // JavaP.g:1535:59: '^' exx= andExpression
            	    {
            	    char_literal200=(Token)match(input,123,FOLLOW_123_in_exclusiveOrExpression7570); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal200_tree = (Object)adaptor.create(char_literal200);
            	    adaptor.addChild(root_0, char_literal200_tree);
            	    }
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression7574);
            	    exx=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = createInfixOperatorInvocation("^", retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,retval.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // JavaP.g:1543:1: andExpression returns [Expression element] : ex= equalityExpression ( '&' exx= equalityExpression )* ;
    public final Java_JavaP.andExpression_return andExpression() throws RecognitionException {
        Java_JavaP.andExpression_return retval = new Java_JavaP.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal201=null;
        Java_JavaP.equalityExpression_return ex = null;

        Java_JavaP.equalityExpression_return exx = null;


        Object char_literal201_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // JavaP.g:1545:5: (ex= equalityExpression ( '&' exx= equalityExpression )* )
            // JavaP.g:1545:9: ex= equalityExpression ( '&' exx= equalityExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_andExpression7612);
            ex=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1545:62: ( '&' exx= equalityExpression )*
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==65) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    // JavaP.g:1545:64: '&' exx= equalityExpression
            	    {
            	    char_literal201=(Token)match(input,65,FOLLOW_65_in_andExpression7618); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal201_tree = (Object)adaptor.create(char_literal201);
            	    adaptor.addChild(root_0, char_literal201_tree);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression7622);
            	    exx=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = createInfixOperatorInvocation("&", retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,retval.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // JavaP.g:1553:1: equalityExpression returns [Expression element] : ex= instanceOfExpression ( ( '==' | '!=' ) exx= instanceOfExpression )* ;
    public final Java_JavaP.equalityExpression_return equalityExpression() throws RecognitionException {
        Java_JavaP.equalityExpression_return retval = new Java_JavaP.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal202=null;
        Token string_literal203=null;
        Java_JavaP.instanceOfExpression_return ex = null;

        Java_JavaP.instanceOfExpression_return exx = null;


        Object string_literal202_tree=null;
        Object string_literal203_tree=null;

        String op=null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // JavaP.g:1556:5: (ex= instanceOfExpression ( ( '==' | '!=' ) exx= instanceOfExpression )* )
            // JavaP.g:1556:9: ex= instanceOfExpression ( ( '==' | '!=' ) exx= instanceOfExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression7664);
            ex=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1557:11: ( ( '==' | '!=' ) exx= instanceOfExpression )*
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( ((LA142_0>=124 && LA142_0<=125)) ) {
                    alt142=1;
                }


                switch (alt142) {
            	case 1 :
            	    // JavaP.g:1557:13: ( '==' | '!=' ) exx= instanceOfExpression
            	    {
            	    // JavaP.g:1557:13: ( '==' | '!=' )
            	    int alt141=2;
            	    int LA141_0 = input.LA(1);

            	    if ( (LA141_0==124) ) {
            	        alt141=1;
            	    }
            	    else if ( (LA141_0==125) ) {
            	        alt141=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 141, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt141) {
            	        case 1 :
            	            // JavaP.g:1557:14: '=='
            	            {
            	            string_literal202=(Token)match(input,124,FOLLOW_124_in_equalityExpression7682); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal202_tree = (Object)adaptor.create(string_literal202);
            	            adaptor.addChild(root_0, string_literal202_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="==";
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // JavaP.g:1557:32: '!='
            	            {
            	            string_literal203=(Token)match(input,125,FOLLOW_125_in_equalityExpression7688); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal203_tree = (Object)adaptor.create(string_literal203);
            	            adaptor.addChild(root_0, string_literal203_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="!=";
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression7695);
            	    exx=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               /*
            	               if(op.equals("==")) {
            	                 retval.element = new EqualityExpression(ex.element, exx.element);
            	               } else {
            	                 retval.element = new NonEqualityExpression(ex.element, exx.element);
            	               }
            	               */

            	               retval.element = createInfixOperatorInvocation(op, retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);

            	               setLocation(retval.element,retval.start,exx.stop);

            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // JavaP.g:1575:1: instanceOfExpression returns [Expression element] : ex= relationalExpression ( 'instanceof' tref= type )? ;
    public final Java_JavaP.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        Java_JavaP.instanceOfExpression_return retval = new Java_JavaP.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal204=null;
        Java_JavaP.relationalExpression_return ex = null;

        Java_JavaP.type_return tref = null;


        Object string_literal204_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // JavaP.g:1577:5: (ex= relationalExpression ( 'instanceof' tref= type )? )
            // JavaP.g:1577:9: ex= relationalExpression ( 'instanceof' tref= type )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression7737);
            ex=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {

                          //if(ex.element == null) {throw new Error("retval is null");}
                          retval.element = ex.element;
            }
            // JavaP.g:1580:8: ( 'instanceof' tref= type )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==126) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // JavaP.g:1580:9: 'instanceof' tref= type
                    {
                    string_literal204=(Token)match(input,126,FOLLOW_126_in_instanceOfExpression7749); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal204_tree = (Object)adaptor.create(string_literal204);
                    adaptor.addChild(root_0, string_literal204_tree);
                    }
                    pushFollow(FOLLOW_type_in_instanceOfExpression7753);
                    tref=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new InstanceofExpression(ex.element, tref.element);
                               setLocation(retval.element,ex.start,tref.stop);
                             
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // JavaP.g:1586:1: relationalExpression returns [Expression element] : ex= shiftExpression (op= relationalOp exx= shiftExpression )* ;
    public final Java_JavaP.relationalExpression_return relationalExpression() throws RecognitionException {
        Java_JavaP.relationalExpression_return retval = new Java_JavaP.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.shiftExpression_return ex = null;

        Java_JavaP.relationalOp_return op = null;

        Java_JavaP.shiftExpression_return exx = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // JavaP.g:1587:5: (ex= shiftExpression (op= relationalOp exx= shiftExpression )* )
            // JavaP.g:1587:9: ex= shiftExpression (op= relationalOp exx= shiftExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression7790);
            ex=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {

                            //if(ex.element == null) {throw new Error("retval is null");}
                            retval.element = ex.element;
            }
            // JavaP.g:1589:45: (op= relationalOp exx= shiftExpression )*
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);

                if ( (LA144_0==62) ) {
                    int LA144_2 = input.LA(2);

                    if ( (LA144_2==IntegerLiteral||LA144_2==FloatingPointLiteral||(LA144_2>=CharacterLiteral && LA144_2<=StringLiteral)||LA144_2==Identifier||LA144_2==69||LA144_2==73||(LA144_2>=79 && LA144_2<=86)||(LA144_2>=88 && LA144_2<=89)||(LA144_2>=92 && LA144_2<=95)||(LA144_2>=127 && LA144_2<=128)||(LA144_2>=131 && LA144_2<=135)) ) {
                        alt144=1;
                    }


                }
                else if ( (LA144_0==64) ) {
                    int LA144_3 = input.LA(2);

                    if ( (LA144_3==IntegerLiteral||LA144_3==FloatingPointLiteral||(LA144_3>=CharacterLiteral && LA144_3<=StringLiteral)||LA144_3==Identifier||LA144_3==69||LA144_3==73||(LA144_3>=79 && LA144_3<=86)||(LA144_3>=88 && LA144_3<=89)||(LA144_3>=92 && LA144_3<=95)||(LA144_3>=127 && LA144_3<=128)||(LA144_3>=131 && LA144_3<=135)) ) {
                        alt144=1;
                    }


                }


                switch (alt144) {
            	case 1 :
            	    // JavaP.g:1589:47: op= relationalOp exx= shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression7798);
            	    op=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression7802);
            	    exx=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = createInfixOperatorInvocation((op!=null?input.toString(op.start,op.stop):null), retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,ex.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalOp"
    // JavaP.g:1598:1: relationalOp : ( ( '<' '=' )=>t1= '<' t2= '=' {...}? | ( '>' '=' )=>t1= '>' t2= '=' {...}? | '<' | '>' );
    public final Java_JavaP.relationalOp_return relationalOp() throws RecognitionException {
        Java_JavaP.relationalOp_return retval = new Java_JavaP.relationalOp_return();
        retval.start = input.LT(1);
        int relationalOp_StartIndex = input.index();
        Object root_0 = null;

        Token t1=null;
        Token t2=null;
        Token char_literal205=null;
        Token char_literal206=null;

        Object t1_tree=null;
        Object t2_tree=null;
        Object char_literal205_tree=null;
        Object char_literal206_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // JavaP.g:1599:5: ( ( '<' '=' )=>t1= '<' t2= '=' {...}? | ( '>' '=' )=>t1= '>' t2= '=' {...}? | '<' | '>' )
            int alt145=4;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==62) ) {
                int LA145_1 = input.LA(2);

                if ( (LA145_1==73) && (synpred206_JavaP())) {
                    alt145=1;
                }
                else if ( (LA145_1==IntegerLiteral||LA145_1==FloatingPointLiteral||(LA145_1>=CharacterLiteral && LA145_1<=StringLiteral)||LA145_1==Identifier||LA145_1==69||(LA145_1>=79 && LA145_1<=86)||(LA145_1>=88 && LA145_1<=89)||(LA145_1>=92 && LA145_1<=95)||(LA145_1>=127 && LA145_1<=128)||(LA145_1>=131 && LA145_1<=135)) ) {
                    alt145=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 145, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA145_0==64) ) {
                int LA145_2 = input.LA(2);

                if ( (LA145_2==73) && (synpred207_JavaP())) {
                    alt145=2;
                }
                else if ( (LA145_2==IntegerLiteral||LA145_2==FloatingPointLiteral||(LA145_2>=CharacterLiteral && LA145_2<=StringLiteral)||LA145_2==Identifier||LA145_2==69||(LA145_2>=79 && LA145_2<=86)||(LA145_2>=88 && LA145_2<=89)||(LA145_2>=92 && LA145_2<=95)||(LA145_2>=127 && LA145_2<=128)||(LA145_2>=131 && LA145_2<=135)) ) {
                    alt145=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 145, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    // JavaP.g:1599:9: ( '<' '=' )=>t1= '<' t2= '=' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,62,FOLLOW_62_in_relationalOp7847); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,73,FOLLOW_73_in_relationalOp7851); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "relationalOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1602:9: ( '>' '=' )=>t1= '>' t2= '=' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,64,FOLLOW_64_in_relationalOp7880); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,73,FOLLOW_73_in_relationalOp7884); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "relationalOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1605:9: '<'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal205=(Token)match(input,62,FOLLOW_62_in_relationalOp7904); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal205_tree = (Object)adaptor.create(char_literal205);
                    adaptor.addChild(root_0, char_literal205_tree);
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1606:9: '>'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal206=(Token)match(input,64,FOLLOW_64_in_relationalOp7914); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal206_tree = (Object)adaptor.create(char_literal206);
                    adaptor.addChild(root_0, char_literal206_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, relationalOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalOp"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // JavaP.g:1609:1: shiftExpression returns [Expression element] : ex= additiveExpression (op= shiftOp exx= additiveExpression )* ;
    public final Java_JavaP.shiftExpression_return shiftExpression() throws RecognitionException {
        Java_JavaP.shiftExpression_return retval = new Java_JavaP.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.additiveExpression_return ex = null;

        Java_JavaP.shiftOp_return op = null;

        Java_JavaP.additiveExpression_return exx = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // JavaP.g:1610:5: (ex= additiveExpression (op= shiftOp exx= additiveExpression )* )
            // JavaP.g:1610:9: ex= additiveExpression (op= shiftOp exx= additiveExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression7939);
            ex=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              check_null(ex.element); retval.element = ex.element;
            }
            // JavaP.g:1610:86: (op= shiftOp exx= additiveExpression )*
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==62) ) {
                    int LA146_1 = input.LA(2);

                    if ( (LA146_1==62) ) {
                        int LA146_4 = input.LA(3);

                        if ( (LA146_4==IntegerLiteral||LA146_4==FloatingPointLiteral||(LA146_4>=CharacterLiteral && LA146_4<=StringLiteral)||LA146_4==Identifier||LA146_4==69||(LA146_4>=79 && LA146_4<=86)||(LA146_4>=88 && LA146_4<=89)||(LA146_4>=92 && LA146_4<=95)||(LA146_4>=127 && LA146_4<=128)||(LA146_4>=131 && LA146_4<=135)) ) {
                            alt146=1;
                        }


                    }


                }
                else if ( (LA146_0==64) ) {
                    int LA146_2 = input.LA(2);

                    if ( (LA146_2==64) ) {
                        int LA146_5 = input.LA(3);

                        if ( (LA146_5==64) ) {
                            int LA146_7 = input.LA(4);

                            if ( (LA146_7==IntegerLiteral||LA146_7==FloatingPointLiteral||(LA146_7>=CharacterLiteral && LA146_7<=StringLiteral)||LA146_7==Identifier||LA146_7==69||(LA146_7>=79 && LA146_7<=86)||(LA146_7>=88 && LA146_7<=89)||(LA146_7>=92 && LA146_7<=95)||(LA146_7>=127 && LA146_7<=128)||(LA146_7>=131 && LA146_7<=135)) ) {
                                alt146=1;
                            }


                        }
                        else if ( (LA146_5==IntegerLiteral||LA146_5==FloatingPointLiteral||(LA146_5>=CharacterLiteral && LA146_5<=StringLiteral)||LA146_5==Identifier||LA146_5==69||(LA146_5>=79 && LA146_5<=86)||(LA146_5>=88 && LA146_5<=89)||(LA146_5>=92 && LA146_5<=95)||(LA146_5>=127 && LA146_5<=128)||(LA146_5>=131 && LA146_5<=135)) ) {
                            alt146=1;
                        }


                    }


                }


                switch (alt146) {
            	case 1 :
            	    // JavaP.g:1610:88: op= shiftOp exx= additiveExpression
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_shiftExpression7947);
            	    op=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression7951);
            	    exx=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = createInfixOperatorInvocation((op!=null?input.toString(op.start,op.stop):null), retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,ex.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class shiftOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftOp"
    // JavaP.g:1619:1: shiftOp : ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?);
    public final Java_JavaP.shiftOp_return shiftOp() throws RecognitionException {
        Java_JavaP.shiftOp_return retval = new Java_JavaP.shiftOp_return();
        retval.start = input.LT(1);
        int shiftOp_StartIndex = input.index();
        Object root_0 = null;

        Token t1=null;
        Token t2=null;
        Token t3=null;

        Object t1_tree=null;
        Object t2_tree=null;
        Object t3_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // JavaP.g:1620:5: ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?)
            int alt147=3;
            alt147 = dfa147.predict(input);
            switch (alt147) {
                case 1 :
                    // JavaP.g:1620:9: ( '<' '<' )=>t1= '<' t2= '<' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,62,FOLLOW_62_in_shiftOp7992); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,62,FOLLOW_62_in_shiftOp7996); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1623:9: ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,64,FOLLOW_64_in_shiftOp8027); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,64,FOLLOW_64_in_shiftOp8031); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    t3=(Token)match(input,64,FOLLOW_64_in_shiftOp8035); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t3_tree = (Object)adaptor.create(t3);
                    adaptor.addChild(root_0, t3_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() &&
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() &&\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1628:9: ( '>' '>' )=>t1= '>' t2= '>' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,64,FOLLOW_64_in_shiftOp8064); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,64,FOLLOW_64_in_shiftOp8068); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, shiftOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftOp"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // JavaP.g:1634:1: additiveExpression returns [Expression element] : ex= multiplicativeExpression ( ( '+' | '-' ) exx= multiplicativeExpression )* ;
    public final Java_JavaP.additiveExpression_return additiveExpression() throws RecognitionException {
        Java_JavaP.additiveExpression_return retval = new Java_JavaP.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal207=null;
        Token char_literal208=null;
        Java_JavaP.multiplicativeExpression_return ex = null;

        Java_JavaP.multiplicativeExpression_return exx = null;


        Object char_literal207_tree=null;
        Object char_literal208_tree=null;

        String op = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // JavaP.g:1636:5: (ex= multiplicativeExpression ( ( '+' | '-' ) exx= multiplicativeExpression )* )
            // JavaP.g:1636:9: ex= multiplicativeExpression ( ( '+' | '-' ) exx= multiplicativeExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression8108);
            ex=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              check_null(ex.element); retval.element = ex.element;
            }
            // JavaP.g:1636:92: ( ( '+' | '-' ) exx= multiplicativeExpression )*
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( ((LA149_0>=127 && LA149_0<=128)) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // JavaP.g:1636:94: ( '+' | '-' ) exx= multiplicativeExpression
            	    {
            	    // JavaP.g:1636:94: ( '+' | '-' )
            	    int alt148=2;
            	    int LA148_0 = input.LA(1);

            	    if ( (LA148_0==127) ) {
            	        alt148=1;
            	    }
            	    else if ( (LA148_0==128) ) {
            	        alt148=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 148, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt148) {
            	        case 1 :
            	            // JavaP.g:1636:95: '+'
            	            {
            	            char_literal207=(Token)match(input,127,FOLLOW_127_in_additiveExpression8115); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal207_tree = (Object)adaptor.create(char_literal207);
            	            adaptor.addChild(root_0, char_literal207_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="+";
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // JavaP.g:1636:111: '-'
            	            {
            	            char_literal208=(Token)match(input,128,FOLLOW_128_in_additiveExpression8121); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal208_tree = (Object)adaptor.create(char_literal208);
            	            adaptor.addChild(root_0, char_literal208_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="-";
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression8128);
            	    exx=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = createInfixOperatorInvocation(op, retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,ex.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // JavaP.g:1644:1: multiplicativeExpression returns [Expression element] : ex= unaryExpression ( ( '*' | '/' | '%' ) exx= unaryExpression )* ;
    public final Java_JavaP.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        Java_JavaP.multiplicativeExpression_return retval = new Java_JavaP.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal209=null;
        Token char_literal210=null;
        Token char_literal211=null;
        Java_JavaP.unaryExpression_return ex = null;

        Java_JavaP.unaryExpression_return exx = null;


        Object char_literal209_tree=null;
        Object char_literal210_tree=null;
        Object char_literal211_tree=null;

        String op = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // JavaP.g:1646:5: (ex= unaryExpression ( ( '*' | '/' | '%' ) exx= unaryExpression )* )
            // JavaP.g:1646:9: ex= unaryExpression ( ( '*' | '/' | '%' ) exx= unaryExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression8165);
            ex=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              check_null(ex.element); retval.element = ex.element;
            }
            // JavaP.g:1646:83: ( ( '*' | '/' | '%' ) exx= unaryExpression )*
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);

                if ( (LA151_0==52||(LA151_0>=129 && LA151_0<=130)) ) {
                    alt151=1;
                }


                switch (alt151) {
            	case 1 :
            	    // JavaP.g:1646:85: ( '*' | '/' | '%' ) exx= unaryExpression
            	    {
            	    // JavaP.g:1646:85: ( '*' | '/' | '%' )
            	    int alt150=3;
            	    switch ( input.LA(1) ) {
            	    case 52:
            	        {
            	        alt150=1;
            	        }
            	        break;
            	    case 129:
            	        {
            	        alt150=2;
            	        }
            	        break;
            	    case 130:
            	        {
            	        alt150=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 150, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt150) {
            	        case 1 :
            	            // JavaP.g:1646:87: '*'
            	            {
            	            char_literal209=(Token)match(input,52,FOLLOW_52_in_multiplicativeExpression8173); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal209_tree = (Object)adaptor.create(char_literal209);
            	            adaptor.addChild(root_0, char_literal209_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="*";
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // JavaP.g:1646:103: '/'
            	            {
            	            char_literal210=(Token)match(input,129,FOLLOW_129_in_multiplicativeExpression8179); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal210_tree = (Object)adaptor.create(char_literal210);
            	            adaptor.addChild(root_0, char_literal210_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="/";
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // JavaP.g:1646:119: '%'
            	            {
            	            char_literal211=(Token)match(input,130,FOLLOW_130_in_multiplicativeExpression8185); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal211_tree = (Object)adaptor.create(char_literal211);
            	            adaptor.addChild(root_0, char_literal211_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="%";
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression8192);
            	    exx=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = createInfixOperatorInvocation(op, retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,ex.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // JavaP.g:1654:1: unaryExpression returns [Expression element] : ( '+' ex= unaryExpression | '-' exx= unaryExpression | '++' exxx= unaryExpression | '--' exxxx= unaryExpression | eks= unaryExpressionNotPlusMinus );
    public final Java_JavaP.unaryExpression_return unaryExpression() throws RecognitionException {
        Java_JavaP.unaryExpression_return retval = new Java_JavaP.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal212=null;
        Token char_literal213=null;
        Token string_literal214=null;
        Token string_literal215=null;
        Java_JavaP.unaryExpression_return ex = null;

        Java_JavaP.unaryExpression_return exx = null;

        Java_JavaP.unaryExpression_return exxx = null;

        Java_JavaP.unaryExpression_return exxxx = null;

        Java_JavaP.unaryExpressionNotPlusMinus_return eks = null;


        Object char_literal212_tree=null;
        Object char_literal213_tree=null;
        Object string_literal214_tree=null;
        Object string_literal215_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // JavaP.g:1655:5: ( '+' ex= unaryExpression | '-' exx= unaryExpression | '++' exxx= unaryExpression | '--' exxxx= unaryExpression | eks= unaryExpressionNotPlusMinus )
            int alt152=5;
            switch ( input.LA(1) ) {
            case 127:
                {
                alt152=1;
                }
                break;
            case 128:
                {
                alt152=2;
                }
                break;
            case 131:
                {
                alt152=3;
                }
                break;
            case 132:
                {
                alt152=4;
                }
                break;
            case IntegerLiteral:
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case Identifier:
            case 69:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 88:
            case 89:
            case 92:
            case 93:
            case 94:
            case 95:
            case 133:
            case 134:
            case 135:
                {
                alt152=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }

            switch (alt152) {
                case 1 :
                    // JavaP.g:1655:9: '+' ex= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal212=(Token)match(input,127,FOLLOW_127_in_unaryExpression8223); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal212_tree = (Object)adaptor.create(char_literal212);
                    adaptor.addChild(root_0, char_literal212_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8227);
                    ex=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createPrefixOperatorInvocation("+",ex.element);
                      	setLocation(retval.element,retval.start,ex.stop);
                          
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1658:9: '-' exx= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal213=(Token)match(input,128,FOLLOW_128_in_unaryExpression8239); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal213_tree = (Object)adaptor.create(char_literal213);
                    adaptor.addChild(root_0, char_literal213_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8243);
                    exx=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createPrefixOperatorInvocation("-",exx.element);
                      	setLocation(retval.element,retval.start,exx.stop);
                          
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1661:9: '++' exxx= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal214=(Token)match(input,131,FOLLOW_131_in_unaryExpression8255); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal214_tree = (Object)adaptor.create(string_literal214);
                    adaptor.addChild(root_0, string_literal214_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8259);
                    exxx=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exxx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createPrefixOperatorInvocation("++",exxx.element);
                      	setLocation(retval.element,retval.start,exxx.stop);
                          
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1664:9: '--' exxxx= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal215=(Token)match(input,132,FOLLOW_132_in_unaryExpression8271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal215_tree = (Object)adaptor.create(string_literal215);
                    adaptor.addChild(root_0, string_literal215_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8275);
                    exxxx=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exxxx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createPrefixOperatorInvocation("--",exxxx.element);
                      	setLocation(retval.element,retval.start,exxxx.stop);
                          
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1667:9: eks= unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression8289);
                    eks=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eks.getTree());
                    if ( state.backtracking==0 ) {
                      check_null(eks.element); retval.element = eks.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // JavaP.g:1670:1: unaryExpressionNotPlusMinus returns [Expression element] : (a= '~' ex= unaryExpression | b= '!' exx= unaryExpression | castex= castExpression | prim= primary (sel= selector )* (c= '++' | d= '--' )? );
    public final Java_JavaP.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        TargetScope_stack.push(new TargetScope_scope());

        Java_JavaP.unaryExpressionNotPlusMinus_return retval = new Java_JavaP.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Object root_0 = null;

        Token a=null;
        Token b=null;
        Token c=null;
        Token d=null;
        Java_JavaP.unaryExpression_return ex = null;

        Java_JavaP.unaryExpression_return exx = null;

        Java_JavaP.castExpression_return castex = null;

        Java_JavaP.primary_return prim = null;

        Java_JavaP.selector_return sel = null;


        Object a_tree=null;
        Object b_tree=null;
        Object c_tree=null;
        Object d_tree=null;


        Token start=null;
        Token stop=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // JavaP.g:1676:5: (a= '~' ex= unaryExpression | b= '!' exx= unaryExpression | castex= castExpression | prim= primary (sel= selector )* (c= '++' | d= '--' )? )
            int alt155=4;
            alt155 = dfa155.predict(input);
            switch (alt155) {
                case 1 :
                    // JavaP.g:1676:9: a= '~' ex= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    a=(Token)match(input,133,FOLLOW_133_in_unaryExpressionNotPlusMinus8325); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    a_tree = (Object)adaptor.create(a);
                    adaptor.addChild(root_0, a_tree);
                    }
                    if ( state.backtracking==0 ) {
                      start=a;
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus8331);
                    ex=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createPrefixOperatorInvocation("~",ex.element);
                               stop=ex.stop;
                               setLocation(retval.element,start,stop);
                              
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1681:9: b= '!' exx= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    b=(Token)match(input,134,FOLLOW_134_in_unaryExpressionNotPlusMinus8353); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    b_tree = (Object)adaptor.create(b);
                    adaptor.addChild(root_0, b_tree);
                    }
                    if ( state.backtracking==0 ) {
                      start=b;
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus8359);
                    exx=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createPrefixOperatorInvocation("!",exx.element);
                               stop=exx.stop;
                               setLocation(retval.element,start,stop);
                              
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1686:9: castex= castExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus8381);
                    castex=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, castex.getTree());
                    if ( state.backtracking==0 ) {
                      check_null(castex.element); retval.element = castex.element;
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1687:9: prim= primary (sel= selector )* (c= '++' | d= '--' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus8395);
                    prim=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prim.getTree());
                    if ( state.backtracking==0 ) {
                      check_null((prim!=null?prim.element:null));
                                  ((TargetScope_scope)TargetScope_stack.peek()).target =(prim!=null?prim.element:null);
                                  retval.element=(prim!=null?prim.element:null);
                                  start=prim.start;
                                  ((TargetScope_scope)TargetScope_stack.peek()).start = start;
                                 
                    }
                    // JavaP.g:1694:9: (sel= selector )*
                    loop153:
                    do {
                        int alt153=2;
                        int LA153_0 = input.LA(1);

                        if ( (LA153_0==51||LA153_0==70) ) {
                            alt153=1;
                        }


                        switch (alt153) {
                    	case 1 :
                    	    // JavaP.g:1694:10: sel= selector
                    	    {
                    	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus8421);
                    	    sel=selector();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sel.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      check_null(sel.element);
                    	                  ((TargetScope_scope)TargetScope_stack.peek()).target =(sel!=null?sel.element:null);
                    	                  retval.element = (sel!=null?sel.element:null);
                    	                  stop=sel.stop;
                    	                  setLocation(retval.element,start,stop);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop153;
                        }
                    } while (true);

                    // JavaP.g:1701:9: (c= '++' | d= '--' )?
                    int alt154=3;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==131) ) {
                        alt154=1;
                    }
                    else if ( (LA154_0==132) ) {
                        alt154=2;
                    }
                    switch (alt154) {
                        case 1 :
                            // JavaP.g:1702:12: c= '++'
                            {
                            c=(Token)match(input,131,FOLLOW_131_in_unaryExpressionNotPlusMinus8470); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            c_tree = (Object)adaptor.create(c);
                            adaptor.addChild(root_0, c_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.element = createPostfixOperatorInvocation("++", retval.element);
                              		   stop=c;
                              		   setLocation(retval.element,start,stop);
                            }

                            }
                            break;
                        case 2 :
                            // JavaP.g:1705:12: d= '--'
                            {
                            d=(Token)match(input,132,FOLLOW_132_in_unaryExpressionNotPlusMinus8487); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            d_tree = (Object)adaptor.create(d);
                            adaptor.addChild(root_0, d_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.element = createPostfixOperatorInvocation("--", retval.element);
                                        	   stop=d;
                                        	   setLocation(retval.element,start,stop);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, unaryExpressionNotPlusMinus_StartIndex); }
            TargetScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class selector_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selector"
    // JavaP.g:1714:1: selector returns [Expression element] : ( '.' name= identifierRule (args= arguments )? | '.' thiskw= 'this' | '.' spkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator | '[' arrex= expression bracket= ']' );
    public final Java_JavaP.selector_return selector() throws RecognitionException {
        Java_JavaP.selector_return retval = new Java_JavaP.selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Object root_0 = null;

        Token thiskw=null;
        Token spkw=null;
        Token newkw=null;
        Token bracket=null;
        Token char_literal216=null;
        Token char_literal217=null;
        Token char_literal218=null;
        Token char_literal219=null;
        Token char_literal220=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.arguments_return args = null;

        Java_JavaP.superSuffix_return supsuf = null;

        Java_JavaP.innerCreator_return in = null;

        Java_JavaP.expression_return arrex = null;


        Object thiskw_tree=null;
        Object spkw_tree=null;
        Object newkw_tree=null;
        Object bracket_tree=null;
        Object char_literal216_tree=null;
        Object char_literal217_tree=null;
        Object char_literal218_tree=null;
        Object char_literal219_tree=null;
        Object char_literal220_tree=null;


        Token start=((TargetScope_scope)TargetScope_stack.peek()).start;
        Token stop=null;
        CrossReferenceTarget old = ((TargetScope_scope)TargetScope_stack.peek()).target;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // JavaP.g:1720:2: ( '.' name= identifierRule (args= arguments )? | '.' thiskw= 'this' | '.' spkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator | '[' arrex= expression bracket= ']' )
            int alt157=5;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==51) ) {
                switch ( input.LA(2) ) {
                case 92:
                    {
                    alt157=2;
                    }
                    break;
                case 88:
                    {
                    alt157=3;
                    }
                    break;
                case 135:
                    {
                    alt157=4;
                    }
                    break;
                case Identifier:
                    {
                    alt157=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 157, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA157_0==70) ) {
                alt157=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;
            }
            switch (alt157) {
                case 1 :
                    // JavaP.g:1721:2: '.' name= identifierRule (args= arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal216=(Token)match(input,51,FOLLOW_51_in_selector8526); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal216_tree = (Object)adaptor.create(char_literal216);
                    adaptor.addChild(root_0, char_literal216_tree);
                    }
                    pushFollow(FOLLOW_identifierRule_in_selector8530);
                    name=identifierRule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                    if ( state.backtracking==0 ) {

                      	         retval.element = expressionFactory().createNameExpression((name!=null?input.toString(name.start,name.stop):null),cloneTarget(((TargetScope_scope)TargetScope_stack.peek()).target));
                      	         stop=name.start;
                      	        
                    }
                    // JavaP.g:1726:6: (args= arguments )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==89) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // JavaP.g:1726:7: args= arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector8551);
                            args=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
                            if ( state.backtracking==0 ) {
                              retval.element = invocation((name!=null?input.toString(name.start,name.stop):null), ((TargetScope_scope)TargetScope_stack.peek()).target);
                              	         ((MethodInvocation)retval.element).addAllArguments(args.element);
                              	         stop=args.stop;
                              	        
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      setLocation(retval.element,start,stop);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1732:9: '.' thiskw= 'this'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal217=(Token)match(input,51,FOLLOW_51_in_selector8585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal217_tree = (Object)adaptor.create(char_literal217);
                    adaptor.addChild(root_0, char_literal217_tree);
                    }
                    thiskw=(Token)match(input,92,FOLLOW_92_in_selector8589); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    thiskw_tree = (Object)adaptor.create(thiskw);
                    adaptor.addChild(root_0, thiskw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ThisLiteral(createTypeReference((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target));setLocation(retval.element,start,spkw);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1733:9: '.' spkw= 'super' supsuf= superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal218=(Token)match(input,51,FOLLOW_51_in_selector8601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal218_tree = (Object)adaptor.create(char_literal218);
                    adaptor.addChild(root_0, char_literal218_tree);
                    }
                    spkw=(Token)match(input,88,FOLLOW_88_in_selector8605); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    spkw_tree = (Object)adaptor.create(spkw);
                    adaptor.addChild(root_0, spkw_tree);
                    }
                    pushFollow(FOLLOW_superSuffix_in_selector8621);
                    supsuf=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, supsuf.getTree());
                    if ( state.backtracking==0 ) {

                                    check_null(supsuf.element);
                                    retval.element = supsuf.element;
                                    CrossReferenceTarget tar = new SuperTarget(old);
                                    ((TargetedExpression)retval.element).setTarget(tar);
                                    setKeyword(tar,spkw);
                                    setLocation(old,start,spkw);
                                  
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1743:9: '.' newkw= 'new' in= innerCreator
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal219=(Token)match(input,51,FOLLOW_51_in_selector8645); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal219_tree = (Object)adaptor.create(char_literal219);
                    adaptor.addChild(root_0, char_literal219_tree);
                    }
                    newkw=(Token)match(input,135,FOLLOW_135_in_selector8649); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    newkw_tree = (Object)adaptor.create(newkw);
                    adaptor.addChild(root_0, newkw_tree);
                    }
                    pushFollow(FOLLOW_innerCreator_in_selector8653);
                    in=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in.getTree());
                    if ( state.backtracking==0 ) {
                      check_null(in.element);
                                                               retval.element = in.element;
                                                               setKeyword(retval.element,newkw);
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1746:9: '[' arrex= expression bracket= ']'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal220=(Token)match(input,70,FOLLOW_70_in_selector8665); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal220_tree = (Object)adaptor.create(char_literal220);
                    adaptor.addChild(root_0, char_literal220_tree);
                    }
                    pushFollow(FOLLOW_expression_in_selector8669);
                    arrex=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrex.getTree());
                    bracket=(Token)match(input,71,FOLLOW_71_in_selector8673); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    bracket_tree = (Object)adaptor.create(bracket);
                    adaptor.addChild(root_0, bracket_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ArrayAccessExpression((Expression)((TargetScope_scope)TargetScope_stack.peek()).target);
                                 ((ArrayAccessExpression)retval.element).addIndex(new FilledArrayIndex(arrex.element));
                                 setLocation(retval.element, start, bracket);
                                
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class castExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // JavaP.g:1753:1: castExpression returns [Expression element] : ( '(' tref= primitiveType ')' unex= unaryExpression | '(' treff= type ')' unexx= unaryExpressionNotPlusMinus );
    public final Java_JavaP.castExpression_return castExpression() throws RecognitionException {
        Java_JavaP.castExpression_return retval = new Java_JavaP.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal221=null;
        Token char_literal222=null;
        Token char_literal223=null;
        Token char_literal224=null;
        Java_JavaP.primitiveType_return tref = null;

        Java_JavaP.unaryExpression_return unex = null;

        Java_JavaP.type_return treff = null;

        Java_JavaP.unaryExpressionNotPlusMinus_return unexx = null;


        Object char_literal221_tree=null;
        Object char_literal222_tree=null;
        Object char_literal223_tree=null;
        Object char_literal224_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // JavaP.g:1755:5: ( '(' tref= primitiveType ')' unex= unaryExpression | '(' treff= type ')' unexx= unaryExpressionNotPlusMinus )
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==89) ) {
                int LA158_1 = input.LA(2);

                if ( (synpred233_JavaP()) ) {
                    alt158=1;
                }
                else if ( (true) ) {
                    alt158=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }
            switch (alt158) {
                case 1 :
                    // JavaP.g:1755:8: '(' tref= primitiveType ')' unex= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal221=(Token)match(input,89,FOLLOW_89_in_castExpression8708); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal221_tree = (Object)adaptor.create(char_literal221);
                    adaptor.addChild(root_0, char_literal221_tree);
                    }
                    pushFollow(FOLLOW_primitiveType_in_castExpression8712);
                    tref=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
                    char_literal222=(Token)match(input,90,FOLLOW_90_in_castExpression8714); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal222_tree = (Object)adaptor.create(char_literal222);
                    adaptor.addChild(root_0, char_literal222_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_castExpression8718);
                    unex=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ClassCastExpression(tref.element,unex.element);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1756:8: '(' treff= type ')' unexx= unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal223=(Token)match(input,89,FOLLOW_89_in_castExpression8729); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal223_tree = (Object)adaptor.create(char_literal223);
                    adaptor.addChild(root_0, char_literal223_tree);
                    }
                    pushFollow(FOLLOW_type_in_castExpression8733);
                    treff=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, treff.getTree());
                    char_literal224=(Token)match(input,90,FOLLOW_90_in_castExpression8735); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal224_tree = (Object)adaptor.create(char_literal224);
                    adaptor.addChild(root_0, char_literal224_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression8739);
                    unexx=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unexx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ClassCastExpression(treff.element,unexx.element);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element,retval.start,retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class primary_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // JavaP.g:1759:1: primary returns [Expression element] : (parex= parExpression | rubex= identifierSuffixRubbush | skw= 'super' supsuf= superSuffix | nt= nonTargetPrimary | nkw= 'new' cr= creator | morerubex= moreidentifierRuleSuffixRubbish | vt= voidType '.' clkw= 'class' | tref= type '.' clkww= 'class' );
    public final Java_JavaP.primary_return primary() throws RecognitionException {
        TargetScope_stack.push(new TargetScope_scope());

        Java_JavaP.primary_return retval = new Java_JavaP.primary_return();
        retval.start = input.LT(1);
        int primary_StartIndex = input.index();
        Object root_0 = null;

        Token skw=null;
        Token nkw=null;
        Token clkw=null;
        Token clkww=null;
        Token char_literal225=null;
        Token char_literal226=null;
        Java_JavaP.parExpression_return parex = null;

        Java_JavaP.identifierSuffixRubbush_return rubex = null;

        Java_JavaP.superSuffix_return supsuf = null;

        Java_JavaP.nonTargetPrimary_return nt = null;

        Java_JavaP.creator_return cr = null;

        Java_JavaP.moreidentifierRuleSuffixRubbish_return morerubex = null;

        Java_JavaP.voidType_return vt = null;

        Java_JavaP.type_return tref = null;


        Object skw_tree=null;
        Object nkw_tree=null;
        Object clkw_tree=null;
        Object clkww_tree=null;
        Object char_literal225_tree=null;
        Object char_literal226_tree=null;


        Token start=null;
        Token stop=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // JavaP.g:1768:5: (parex= parExpression | rubex= identifierSuffixRubbush | skw= 'super' supsuf= superSuffix | nt= nonTargetPrimary | nkw= 'new' cr= creator | morerubex= moreidentifierRuleSuffixRubbish | vt= voidType '.' clkw= 'class' | tref= type '.' clkww= 'class' )
            int alt159=8;
            alt159 = dfa159.predict(input);
            switch (alt159) {
                case 1 :
                    // JavaP.g:1768:9: parex= parExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_primary8779);
                    parex=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = parex.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1769:9: rubex= identifierSuffixRubbush
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifierSuffixRubbush_in_primary8793);
                    rubex=identifierSuffixRubbush();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rubex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = rubex.element;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1770:10: skw= 'super' supsuf= superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    skw=(Token)match(input,88,FOLLOW_88_in_primary8808); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    skw_tree = (Object)adaptor.create(skw);
                    adaptor.addChild(root_0, skw_tree);
                    }
                    if ( state.backtracking==0 ) {

                                           start=skw; stop=skw;
                                           ((TargetScope_scope)TargetScope_stack.peek()).start =skw;
                                           
                    }
                    pushFollow(FOLLOW_superSuffix_in_primary8822);
                    supsuf=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, supsuf.getTree());
                    if ( state.backtracking==0 ) {
                      CrossReferenceTarget tar = new SuperTarget();
                               setKeyword(tar,skw);
                               retval.element = supsuf.element;
                               ((TargetedExpression)retval.element).setTarget(tar);
                              setLocation(tar,start,stop); // put locations on the SuperTarget.
                              
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1781:9: nt= nonTargetPrimary
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonTargetPrimary_in_primary8844);
                    nt=nonTargetPrimary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nt.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=nt.element;
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1782:9: nkw= 'new' cr= creator
                    {
                    root_0 = (Object)adaptor.nil();

                    nkw=(Token)match(input,135,FOLLOW_135_in_primary8858); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    nkw_tree = (Object)adaptor.create(nkw);
                    adaptor.addChild(root_0, nkw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      start=nkw;
                    }
                    pushFollow(FOLLOW_creator_in_primary8864);
                    cr=creator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = cr.element;setKeyword(retval.element,nkw);
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1783:9: morerubex= moreidentifierRuleSuffixRubbish
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moreidentifierRuleSuffixRubbish_in_primary8878);
                    morerubex=moreidentifierRuleSuffixRubbish();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, morerubex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = morerubex.element;
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:1784:9: vt= voidType '.' clkw= 'class'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_voidType_in_primary8892);
                    vt=voidType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vt.getTree());
                    char_literal225=(Token)match(input,51,FOLLOW_51_in_primary8894); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal225_tree = (Object)adaptor.create(char_literal225);
                    adaptor.addChild(root_0, char_literal225_tree);
                    }
                    clkw=(Token)match(input,59,FOLLOW_59_in_primary8898); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    clkw_tree = (Object)adaptor.create(clkw);
                    adaptor.addChild(root_0, clkw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ClassLiteral(vt.element); start=vt.start;stop=clkw; setLocation(retval.element,start,stop);
                    }

                    }
                    break;
                case 8 :
                    // JavaP.g:1785:9: tref= type '.' clkww= 'class'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_primary8912);
                    tref=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
                    char_literal226=(Token)match(input,51,FOLLOW_51_in_primary8914); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal226_tree = (Object)adaptor.create(char_literal226);
                    adaptor.addChild(root_0, char_literal226_tree);
                    }
                    clkww=(Token)match(input,59,FOLLOW_59_in_primary8918); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    clkww_tree = (Object)adaptor.create(clkww);
                    adaptor.addChild(root_0, clkww_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ClassLiteral(tref.element);start=tref.start;stop=clkww; setLocation(retval.element,start,stop);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                check_null(retval.element);

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, primary_StartIndex); }
            TargetScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class nonTargetPrimary_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonTargetPrimary"
    // JavaP.g:1788:1: nonTargetPrimary returns [Expression element] : lit= literal ;
    public final Java_JavaP.nonTargetPrimary_return nonTargetPrimary() throws RecognitionException {
        Java_JavaP.nonTargetPrimary_return retval = new Java_JavaP.nonTargetPrimary_return();
        retval.start = input.LT(1);
        int nonTargetPrimary_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.literal_return lit = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // JavaP.g:1789:4: (lit= literal )
            // JavaP.g:1790:6: lit= literal
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_literal_in_nonTargetPrimary8947);
            lit=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lit.getTree());
            if ( state.backtracking==0 ) {
              retval.element = lit.element;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, nonTargetPrimary_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nonTargetPrimary"

    public static class moreidentifierRuleSuffixRubbish_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moreidentifierRuleSuffixRubbish"
    // JavaP.g:1793:1: moreidentifierRuleSuffixRubbish returns [Expression element] : id= identifierRule ( '.' idx= identifierRule )* ( ( '[' ']' )+ '.' 'class' | arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' clkw= 'class' | '.' gen= explicitGenericInvocation | '.' thiskw= 'this' | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )? ;
    public final Java_JavaP.moreidentifierRuleSuffixRubbish_return moreidentifierRuleSuffixRubbish() throws RecognitionException {
        TargetScope_stack.push(new TargetScope_scope());

        Java_JavaP.moreidentifierRuleSuffixRubbish_return retval = new Java_JavaP.moreidentifierRuleSuffixRubbish_return();
        retval.start = input.LT(1);
        int moreidentifierRuleSuffixRubbish_StartIndex = input.index();
        Object root_0 = null;

        Token clkw=null;
        Token thiskw=null;
        Token supkw=null;
        Token newkw=null;
        Token char_literal227=null;
        Token char_literal228=null;
        Token char_literal229=null;
        Token char_literal230=null;
        Token string_literal231=null;
        Token char_literal232=null;
        Token char_literal233=null;
        Token char_literal234=null;
        Token char_literal235=null;
        Token char_literal236=null;
        Java_JavaP.identifierRule_return id = null;

        Java_JavaP.identifierRule_return idx = null;

        Java_JavaP.arrayAccessSuffixRubbish_return arr = null;

        Java_JavaP.argumentsSuffixRubbish_return arg = null;

        Java_JavaP.explicitGenericInvocation_return gen = null;

        Java_JavaP.superSuffix_return supsuf = null;

        Java_JavaP.innerCreator_return in = null;


        Object clkw_tree=null;
        Object thiskw_tree=null;
        Object supkw_tree=null;
        Object newkw_tree=null;
        Object char_literal227_tree=null;
        Object char_literal228_tree=null;
        Object char_literal229_tree=null;
        Object char_literal230_tree=null;
        Object string_literal231_tree=null;
        Object char_literal232_tree=null;
        Object char_literal233_tree=null;
        Object char_literal234_tree=null;
        Object char_literal235_tree=null;
        Object char_literal236_tree=null;


        Token stop = null;
        CrossReferenceTarget scopeTarget = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // JavaP.g:1807:2: (id= identifierRule ( '.' idx= identifierRule )* ( ( '[' ']' )+ '.' 'class' | arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' clkw= 'class' | '.' gen= explicitGenericInvocation | '.' thiskw= 'this' | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )? )
            // JavaP.g:1807:4: id= identifierRule ( '.' idx= identifierRule )* ( ( '[' ']' )+ '.' 'class' | arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' clkw= 'class' | '.' gen= explicitGenericInvocation | '.' thiskw= 'this' | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_moreidentifierRuleSuffixRubbish8982);
            id=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
            if ( state.backtracking==0 ) {
              ((TargetScope_scope)TargetScope_stack.peek()).target = expressionFactory().createNamedTarget((id!=null?input.toString(id.start,id.stop):null));
              	            scopeTarget = ((TargetScope_scope)TargetScope_stack.peek()).target;
              	            ((TargetScope_scope)TargetScope_stack.peek()).start =id.start;
              	            stop=id.start;
              	            setLocation(((TargetScope_scope)TargetScope_stack.peek()).target,((TargetScope_scope)TargetScope_stack.peek()).start,stop);
              	            
            }
            // JavaP.g:1814:4: ( '.' idx= identifierRule )*
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==51) ) {
                    int LA160_2 = input.LA(2);

                    if ( (LA160_2==Identifier) ) {
                        int LA160_3 = input.LA(3);

                        if ( (synpred241_JavaP()) ) {
                            alt160=1;
                        }


                    }


                }


                switch (alt160) {
            	case 1 :
            	    // JavaP.g:1814:5: '.' idx= identifierRule
            	    {
            	    char_literal227=(Token)match(input,51,FOLLOW_51_in_moreidentifierRuleSuffixRubbish9002); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal227_tree = (Object)adaptor.create(char_literal227);
            	    adaptor.addChild(root_0, char_literal227_tree);
            	    }
            	    pushFollow(FOLLOW_identifierRule_in_moreidentifierRuleSuffixRubbish9006);
            	    idx=identifierRule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, idx.getTree());
            	    if ( state.backtracking==0 ) {
            	      ((TargetScope_scope)TargetScope_stack.peek()).target = expressionFactory().createNamedTarget((idx!=null?input.toString(idx.start,idx.stop):null),((TargetScope_scope)TargetScope_stack.peek()).target);
            	      	        scopeTarget = ((TargetScope_scope)TargetScope_stack.peek()).target;
            	      	        stop=idx.start;
            	      	        setLocation(((TargetScope_scope)TargetScope_stack.peek()).target, ((TargetScope_scope)TargetScope_stack.peek()).start, idx.start);
            	      	       
            	    }

            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              retval.element = expressionFactory().createNameExpression(((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target).name(),cloneTargetOfTarget(((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target)));
              	 setLocation(retval.element, ((TargetScope_scope)TargetScope_stack.peek()).start, stop);
              	 //The variable reference is only returned if none of the following subrules match.
              	
            }
            // JavaP.g:1825:1: ( ( '[' ']' )+ '.' 'class' | arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' clkw= 'class' | '.' gen= explicitGenericInvocation | '.' thiskw= 'this' | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?
            int alt162=9;
            alt162 = dfa162.predict(input);
            switch (alt162) {
                case 1 :
                    // JavaP.g:1825:9: ( '[' ']' )+ '.' 'class'
                    {
                    // JavaP.g:1825:9: ( '[' ']' )+
                    int cnt161=0;
                    loop161:
                    do {
                        int alt161=2;
                        int LA161_0 = input.LA(1);

                        if ( (LA161_0==70) ) {
                            alt161=1;
                        }


                        switch (alt161) {
                    	case 1 :
                    	    // JavaP.g:1825:10: '[' ']'
                    	    {
                    	    char_literal228=(Token)match(input,70,FOLLOW_70_in_moreidentifierRuleSuffixRubbish9036); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal228_tree = (Object)adaptor.create(char_literal228);
                    	    adaptor.addChild(root_0, char_literal228_tree);
                    	    }
                    	    char_literal229=(Token)match(input,71,FOLLOW_71_in_moreidentifierRuleSuffixRubbish9038); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal229_tree = (Object)adaptor.create(char_literal229);
                    	    adaptor.addChild(root_0, char_literal229_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt161 >= 1 ) break loop161;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(161, input);
                                throw eee;
                        }
                        cnt161++;
                    } while (true);

                    char_literal230=(Token)match(input,51,FOLLOW_51_in_moreidentifierRuleSuffixRubbish9042); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal230_tree = (Object)adaptor.create(char_literal230);
                    adaptor.addChild(root_0, char_literal230_tree);
                    }
                    string_literal231=(Token)match(input,59,FOLLOW_59_in_moreidentifierRuleSuffixRubbish9044); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal231_tree = (Object)adaptor.create(string_literal231);
                    adaptor.addChild(root_0, string_literal231_tree);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1827:9: arr= arrayAccessSuffixRubbish
                    {
                    pushFollow(FOLLOW_arrayAccessSuffixRubbish_in_moreidentifierRuleSuffixRubbish9062);
                    arr=arrayAccessSuffixRubbish();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = arr.element;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1828:9: arg= argumentsSuffixRubbish
                    {
                    pushFollow(FOLLOW_argumentsSuffixRubbish_in_moreidentifierRuleSuffixRubbish9076);
                    arg=argumentsSuffixRubbish();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arg.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.removeAllMetadata(); retval.element = arg.element;
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1829:9: '.' clkw= 'class'
                    {
                    char_literal232=(Token)match(input,51,FOLLOW_51_in_moreidentifierRuleSuffixRubbish9089); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal232_tree = (Object)adaptor.create(char_literal232);
                    adaptor.addChild(root_0, char_literal232_tree);
                    }
                    clkw=(Token)match(input,59,FOLLOW_59_in_moreidentifierRuleSuffixRubbish9093); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    clkw_tree = (Object)adaptor.create(clkw);
                    adaptor.addChild(root_0, clkw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element.removeAllMetadata();
                               retval.element = new ClassLiteral(createTypeReference((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target));
                                setLocation(retval.element, ((TargetScope_scope)TargetScope_stack.peek()).start, clkw);
                               
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1834:9: '.' gen= explicitGenericInvocation
                    {
                    char_literal233=(Token)match(input,51,FOLLOW_51_in_moreidentifierRuleSuffixRubbish9114); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal233_tree = (Object)adaptor.create(char_literal233);
                    adaptor.addChild(root_0, char_literal233_tree);
                    }
                    pushFollow(FOLLOW_explicitGenericInvocation_in_moreidentifierRuleSuffixRubbish9118);
                    gen=explicitGenericInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gen.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.removeAllMetadata(); retval.element = gen.element;
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1835:9: '.' thiskw= 'this'
                    {
                    char_literal234=(Token)match(input,51,FOLLOW_51_in_moreidentifierRuleSuffixRubbish9131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal234_tree = (Object)adaptor.create(char_literal234);
                    adaptor.addChild(root_0, char_literal234_tree);
                    }
                    thiskw=(Token)match(input,92,FOLLOW_92_in_moreidentifierRuleSuffixRubbish9135); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    thiskw_tree = (Object)adaptor.create(thiskw);
                    adaptor.addChild(root_0, thiskw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element.removeAllMetadata();
                                retval.element = new ThisLiteral(createTypeReference((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target));
                                setLocation(retval.element, ((TargetScope_scope)TargetScope_stack.peek()).start, thiskw);
                              
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:1840:9: '.' supkw= 'super' supsuf= superSuffix
                    {
                    char_literal235=(Token)match(input,51,FOLLOW_51_in_moreidentifierRuleSuffixRubbish9155); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal235_tree = (Object)adaptor.create(char_literal235);
                    adaptor.addChild(root_0, char_literal235_tree);
                    }
                    supkw=(Token)match(input,88,FOLLOW_88_in_moreidentifierRuleSuffixRubbish9159); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    supkw_tree = (Object)adaptor.create(supkw);
                    adaptor.addChild(root_0, supkw_tree);
                    }
                    pushFollow(FOLLOW_superSuffix_in_moreidentifierRuleSuffixRubbish9175);
                    supsuf=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, supsuf.getTree());
                    if ( state.backtracking==0 ) {

                                     retval.element.removeAllMetadata();
                                     CrossReferenceTarget tar = new SuperTarget(((TargetScope_scope)TargetScope_stack.peek()).target);
                                     setKeyword(tar,supkw);
                                     setLocation(tar,((TargetScope_scope)TargetScope_stack.peek()).start,supkw);
                                     retval.element = supsuf.element;
                                     ((TargetedExpression)retval.element).setTarget(tar);
                                  
                    }

                    }
                    break;
                case 8 :
                    // JavaP.g:1849:9: '.' newkw= 'new' in= innerCreator
                    {
                    char_literal236=(Token)match(input,51,FOLLOW_51_in_moreidentifierRuleSuffixRubbish9187); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal236_tree = (Object)adaptor.create(char_literal236);
                    adaptor.addChild(root_0, char_literal236_tree);
                    }
                    newkw=(Token)match(input,135,FOLLOW_135_in_moreidentifierRuleSuffixRubbish9191); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    newkw_tree = (Object)adaptor.create(newkw);
                    adaptor.addChild(root_0, newkw_tree);
                    }
                    pushFollow(FOLLOW_innerCreator_in_moreidentifierRuleSuffixRubbish9195);
                    in=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = in.element;setKeyword(retval.element,newkw);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

              if(! retval.element.descendants().contains(scopeTarget)) {
                scopeTarget.removeAllMetadata();
                for(Element e: scopeTarget.descendants()) {
                  e.removeAllMetadata();
                }
              }

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, moreidentifierRuleSuffixRubbish_StartIndex); }
            TargetScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "moreidentifierRuleSuffixRubbish"

    public static class identifierSuffixRubbush_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierSuffixRubbush"
    // JavaP.g:1852:1: identifierSuffixRubbush returns [Expression element] : 'this' ( '.' id= identifierRule )* (arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' 'class' | '.' gen= explicitGenericInvocation | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )? ;
    public final Java_JavaP.identifierSuffixRubbush_return identifierSuffixRubbush() throws RecognitionException {
        TargetScope_stack.push(new TargetScope_scope());

        Java_JavaP.identifierSuffixRubbush_return retval = new Java_JavaP.identifierSuffixRubbush_return();
        retval.start = input.LT(1);
        int identifierSuffixRubbush_StartIndex = input.index();
        Object root_0 = null;

        Token supkw=null;
        Token newkw=null;
        Token string_literal237=null;
        Token char_literal238=null;
        Token char_literal239=null;
        Token string_literal240=null;
        Token char_literal241=null;
        Token char_literal242=null;
        Token char_literal243=null;
        Java_JavaP.identifierRule_return id = null;

        Java_JavaP.arrayAccessSuffixRubbish_return arr = null;

        Java_JavaP.argumentsSuffixRubbish_return arg = null;

        Java_JavaP.explicitGenericInvocation_return gen = null;

        Java_JavaP.superSuffix_return supsuf = null;

        Java_JavaP.innerCreator_return in = null;


        Object supkw_tree=null;
        Object newkw_tree=null;
        Object string_literal237_tree=null;
        Object char_literal238_tree=null;
        Object char_literal239_tree=null;
        Object string_literal240_tree=null;
        Object char_literal241_tree=null;
        Object char_literal242_tree=null;
        Object char_literal243_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // JavaP.g:1854:2: ( 'this' ( '.' id= identifierRule )* (arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' 'class' | '.' gen= explicitGenericInvocation | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )? )
            // JavaP.g:1854:4: 'this' ( '.' id= identifierRule )* (arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' 'class' | '.' gen= explicitGenericInvocation | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?
            {
            root_0 = (Object)adaptor.nil();

            string_literal237=(Token)match(input,92,FOLLOW_92_in_identifierSuffixRubbush9219); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal237_tree = (Object)adaptor.create(string_literal237);
            adaptor.addChild(root_0, string_literal237_tree);
            }
            if ( state.backtracking==0 ) {
              ((TargetScope_scope)TargetScope_stack.peek()).target = new ThisLiteral();
            }
            // JavaP.g:1854:54: ( '.' id= identifierRule )*
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==51) ) {
                    int LA163_2 = input.LA(2);

                    if ( (LA163_2==Identifier) ) {
                        int LA163_3 = input.LA(3);

                        if ( (synpred251_JavaP()) ) {
                            alt163=1;
                        }


                    }


                }


                switch (alt163) {
            	case 1 :
            	    // JavaP.g:1854:55: '.' id= identifierRule
            	    {
            	    char_literal238=(Token)match(input,51,FOLLOW_51_in_identifierSuffixRubbush9223); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal238_tree = (Object)adaptor.create(char_literal238);
            	    adaptor.addChild(root_0, char_literal238_tree);
            	    }
            	    pushFollow(FOLLOW_identifierRule_in_identifierSuffixRubbush9227);
            	    id=identifierRule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
            	    if ( state.backtracking==0 ) {
            	      ((TargetScope_scope)TargetScope_stack.peek()).target = expressionFactory().createNamedTarget((id!=null?input.toString(id.start,id.stop):null),((TargetScope_scope)TargetScope_stack.peek()).target);
            	    }

            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if(((TargetScope_scope)TargetScope_stack.peek()).target instanceof ThisLiteral) {
              	  retval.element = (ThisLiteral)((TargetScope_scope)TargetScope_stack.peek()).target;
              	 } else {
              	  retval.element = expressionFactory().createNameExpression(((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target).name(),cloneTargetOfTarget((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target));
              	 }
            }
            // JavaP.g:1860:4: (arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' 'class' | '.' gen= explicitGenericInvocation | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?
            int alt164=7;
            alt164 = dfa164.predict(input);
            switch (alt164) {
                case 1 :
                    // JavaP.g:1861:9: arr= arrayAccessSuffixRubbish
                    {
                    pushFollow(FOLLOW_arrayAccessSuffixRubbish_in_identifierSuffixRubbush9251);
                    arr=arrayAccessSuffixRubbish();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = arr.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1862:9: arg= argumentsSuffixRubbish
                    {
                    pushFollow(FOLLOW_argumentsSuffixRubbish_in_identifierSuffixRubbush9265);
                    arg=argumentsSuffixRubbish();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arg.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = arg.element;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1863:9: '.' 'class'
                    {
                    char_literal239=(Token)match(input,51,FOLLOW_51_in_identifierSuffixRubbush9277); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal239_tree = (Object)adaptor.create(char_literal239);
                    adaptor.addChild(root_0, char_literal239_tree);
                    }
                    string_literal240=(Token)match(input,59,FOLLOW_59_in_identifierSuffixRubbush9279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal240_tree = (Object)adaptor.create(string_literal240);
                    adaptor.addChild(root_0, string_literal240_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ClassLiteral(createTypeReference((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target));
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1864:9: '.' gen= explicitGenericInvocation
                    {
                    char_literal241=(Token)match(input,51,FOLLOW_51_in_identifierSuffixRubbush9291); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal241_tree = (Object)adaptor.create(char_literal241);
                    adaptor.addChild(root_0, char_literal241_tree);
                    }
                    pushFollow(FOLLOW_explicitGenericInvocation_in_identifierSuffixRubbush9295);
                    gen=explicitGenericInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gen.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = gen.element;
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1865:9: '.' supkw= 'super' supsuf= superSuffix
                    {
                    char_literal242=(Token)match(input,51,FOLLOW_51_in_identifierSuffixRubbush9307); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal242_tree = (Object)adaptor.create(char_literal242);
                    adaptor.addChild(root_0, char_literal242_tree);
                    }
                    supkw=(Token)match(input,88,FOLLOW_88_in_identifierSuffixRubbush9311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    supkw_tree = (Object)adaptor.create(supkw);
                    adaptor.addChild(root_0, supkw_tree);
                    }
                    pushFollow(FOLLOW_superSuffix_in_identifierSuffixRubbush9315);
                    supsuf=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, supsuf.getTree());
                    if ( state.backtracking==0 ) {

                                    CrossReferenceTarget tar = new SuperTarget(((TargetScope_scope)TargetScope_stack.peek()).target);
                                    setKeyword(tar,supkw);
                                    setLocation(tar, ((TargetScope_scope)TargetScope_stack.peek()).start,supkw);
                                    retval.element = supsuf.element;
                                     ((TargetedExpression)retval.element).setTarget(tar);
                                   
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1872:9: '.' newkw= 'new' in= innerCreator
                    {
                    char_literal243=(Token)match(input,51,FOLLOW_51_in_identifierSuffixRubbush9327); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal243_tree = (Object)adaptor.create(char_literal243);
                    adaptor.addChild(root_0, char_literal243_tree);
                    }
                    newkw=(Token)match(input,135,FOLLOW_135_in_identifierSuffixRubbush9331); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    newkw_tree = (Object)adaptor.create(newkw);
                    adaptor.addChild(root_0, newkw_tree);
                    }
                    pushFollow(FOLLOW_innerCreator_in_identifierSuffixRubbush9335);
                    in=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = in.element;setKeyword(retval.element,newkw);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, identifierSuffixRubbush_StartIndex); }
            TargetScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "identifierSuffixRubbush"

    public static class argumentsSuffixRubbish_return extends ParserRuleReturnScope {
        public MethodInvocation element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argumentsSuffixRubbish"
    // JavaP.g:1877:1: argumentsSuffixRubbish returns [MethodInvocation element] : args= arguments ;
    public final Java_JavaP.argumentsSuffixRubbish_return argumentsSuffixRubbish() throws RecognitionException {
        Java_JavaP.argumentsSuffixRubbish_return retval = new Java_JavaP.argumentsSuffixRubbish_return();
        retval.start = input.LT(1);
        int argumentsSuffixRubbish_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.arguments_return args = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // JavaP.g:1879:2: (args= arguments )
            // JavaP.g:1879:4: args= arguments
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_arguments_in_argumentsSuffixRubbish9362);
            args=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
            if ( state.backtracking==0 ) {

              	         Object tar = ((TargetScope_scope)TargetScope_stack.peek()).target;
              	         ((Element)tar).removeAllMetadata();
              	         if(tar instanceof NamedTarget) {
              	           String name = ((NamedTarget)tar).name();
              	           ((TargetScope_scope)TargetScope_stack.peek()).target = ((NamedTarget)tar).getTarget(); //chop off head
              	           retval.element = invocation(name, ((TargetScope_scope)TargetScope_stack.peek()).target);
              	           retval.element.addAllArguments(args.element);
              	         } else if (tar instanceof ThisLiteral) {
              	           ((TargetScope_scope)TargetScope_stack.peek()).target = ((ThisLiteral)tar).getTypeReference(); //chop off head
              	           retval.element = new ThisConstructorDelegation();
              	           ((ThisConstructorDelegation)retval.element).setTarget(((TargetScope_scope)TargetScope_stack.peek()).target);
                           retval.element.addAllArguments(args.element);
                         }
              	         setLocation(retval.element, ((TargetScope_scope)TargetScope_stack.peek()).start, args.stop);
              	        
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, argumentsSuffixRubbish_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "argumentsSuffixRubbish"

    public static class arrayAccessSuffixRubbish_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayAccessSuffixRubbish"
    // JavaP.g:1900:1: arrayAccessSuffixRubbish returns [Expression element] : (open= '[' arrex= expression close= ']' )+ ;
    public final Java_JavaP.arrayAccessSuffixRubbish_return arrayAccessSuffixRubbish() throws RecognitionException {
        Java_JavaP.arrayAccessSuffixRubbish_return retval = new Java_JavaP.arrayAccessSuffixRubbish_return();
        retval.start = input.LT(1);
        int arrayAccessSuffixRubbish_StartIndex = input.index();
        Object root_0 = null;

        Token open=null;
        Token close=null;
        Java_JavaP.expression_return arrex = null;


        Object open_tree=null;
        Object close_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // JavaP.g:1902:2: ( (open= '[' arrex= expression close= ']' )+ )
            // JavaP.g:1902:4: (open= '[' arrex= expression close= ']' )+
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.element = new ArrayAccessExpression(expressionFactory().createNameExpression(((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target).name(),cloneTargetOfTarget((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target)));
            }
            // JavaP.g:1903:10: (open= '[' arrex= expression close= ']' )+
            int cnt165=0;
            loop165:
            do {
                int alt165=2;
                alt165 = dfa165.predict(input);
                switch (alt165) {
            	case 1 :
            	    // JavaP.g:1903:11: open= '[' arrex= expression close= ']'
            	    {
            	    open=(Token)match(input,70,FOLLOW_70_in_arrayAccessSuffixRubbish9408); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    open_tree = (Object)adaptor.create(open);
            	    adaptor.addChild(root_0, open_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_arrayAccessSuffixRubbish9412);
            	    arrex=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrex.getTree());
            	    close=(Token)match(input,71,FOLLOW_71_in_arrayAccessSuffixRubbish9416); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    close_tree = (Object)adaptor.create(close);
            	    adaptor.addChild(root_0, close_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	       FilledArrayIndex index = new FilledArrayIndex(arrex.element);
            	      	           ((ArrayAccessExpression)retval.element).addIndex(index);
            	      	           setLocation(index, open, close);
            	      	          
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt165 >= 1 ) break loop165;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(165, input);
                        throw eee;
                }
                cnt165++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, ((TargetScope_scope)TargetScope_stack.peek()).start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, arrayAccessSuffixRubbish_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayAccessSuffixRubbish"

    public static class creator_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "creator"
    // JavaP.g:1913:1: creator returns [Expression element] : (targs= nonWildcardTypeArguments tx= createdName (dia= '<' '>' )? restx= classCreatorRest | tt= createdName ( '[' ']' )+ init= arrayInitializer | ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )* | t= createdName (diam= '<' '>' )? rest= classCreatorRest );
    public final Java_JavaP.creator_return creator() throws RecognitionException {
        Java_JavaP.creator_return retval = new Java_JavaP.creator_return();
        retval.start = input.LT(1);
        int creator_StartIndex = input.index();
        Object root_0 = null;

        Token dia=null;
        Token diam=null;
        Token char_literal244=null;
        Token char_literal245=null;
        Token char_literal246=null;
        Token char_literal247=null;
        Token char_literal248=null;
        Token char_literal249=null;
        Token char_literal250=null;
        Token char_literal251=null;
        Java_JavaP.nonWildcardTypeArguments_return targs = null;

        Java_JavaP.createdName_return tx = null;

        Java_JavaP.classCreatorRest_return restx = null;

        Java_JavaP.createdName_return tt = null;

        Java_JavaP.arrayInitializer_return init = null;

        Java_JavaP.createdName_return ttt = null;

        Java_JavaP.expression_return exx = null;

        Java_JavaP.createdName_return t = null;

        Java_JavaP.classCreatorRest_return rest = null;


        Object dia_tree=null;
        Object diam_tree=null;
        Object char_literal244_tree=null;
        Object char_literal245_tree=null;
        Object char_literal246_tree=null;
        Object char_literal247_tree=null;
        Object char_literal248_tree=null;
        Object char_literal249_tree=null;
        Object char_literal250_tree=null;
        Object char_literal251_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // JavaP.g:1916:5: (targs= nonWildcardTypeArguments tx= createdName (dia= '<' '>' )? restx= classCreatorRest | tt= createdName ( '[' ']' )+ init= arrayInitializer | ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )* | t= createdName (diam= '<' '>' )? rest= classCreatorRest )
            int alt171=4;
            alt171 = dfa171.predict(input);
            switch (alt171) {
                case 1 :
                    // JavaP.g:1916:9: targs= nonWildcardTypeArguments tx= createdName (dia= '<' '>' )? restx= classCreatorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator9471);
                    targs=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, targs.getTree());
                    pushFollow(FOLLOW_createdName_in_creator9475);
                    tx=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tx.getTree());
                    // JavaP.g:1916:55: (dia= '<' '>' )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==62) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // JavaP.g:1916:56: dia= '<' '>'
                            {
                            dia=(Token)match(input,62,FOLLOW_62_in_creator9480); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            dia_tree = (Object)adaptor.create(dia);
                            adaptor.addChild(root_0, dia_tree);
                            }
                            char_literal244=(Token)match(input,64,FOLLOW_64_in_creator9481); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal244_tree = (Object)adaptor.create(char_literal244);
                            adaptor.addChild(root_0, char_literal244_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classCreatorRest_in_creator9487);
                    restx=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, restx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ConstructorInvocation((BasicJavaTypeReference)tx.element,((TargetScope_scope)TargetScope_stack.peek()).target);
                                ((ConstructorInvocation)retval.element).setBody(restx.element.body());
                                ((ConstructorInvocation)retval.element).addAllArguments(restx.element.arguments());
                                ((ConstructorInvocation)retval.element).addAllTypeArguments(targs.element);
                                if(dia != null) {((ConstructorInvocation)retval.element).setDiamond(true);}
                               
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1923:10: tt= createdName ( '[' ']' )+ init= arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_createdName_in_creator9511);
                    tt=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tt.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ArrayCreationExpression(tt.element);
                    }
                    // JavaP.g:1924:14: ( '[' ']' )+
                    int cnt167=0;
                    loop167:
                    do {
                        int alt167=2;
                        int LA167_0 = input.LA(1);

                        if ( (LA167_0==70) ) {
                            alt167=1;
                        }


                        switch (alt167) {
                    	case 1 :
                    	    // JavaP.g:1924:15: '[' ']'
                    	    {
                    	    char_literal245=(Token)match(input,70,FOLLOW_70_in_creator9529); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal245_tree = (Object)adaptor.create(char_literal245);
                    	    adaptor.addChild(root_0, char_literal245_tree);
                    	    }
                    	    char_literal246=(Token)match(input,71,FOLLOW_71_in_creator9531); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal246_tree = (Object)adaptor.create(char_literal246);
                    	    adaptor.addChild(root_0, char_literal246_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((ArrayCreationExpression)retval.element).addDimensionInitializer(new EmptyArrayIndex(1));
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt167 >= 1 ) break loop167;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(167, input);
                                throw eee;
                        }
                        cnt167++;
                    } while (true);

                    pushFollow(FOLLOW_arrayInitializer_in_creator9539);
                    init=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, init.getTree());
                    if ( state.backtracking==0 ) {
                      ((ArrayCreationExpression)retval.element).setInitializer(init.element);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1926:10: ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )*
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_createdName_in_creator9562);
                    ttt=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ttt.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ArrayCreationExpression(ttt.element);
                    }
                    // JavaP.g:1927:11: ( '[' exx= expression ']' )+
                    int cnt168=0;
                    loop168:
                    do {
                        int alt168=2;
                        alt168 = dfa168.predict(input);
                        switch (alt168) {
                    	case 1 :
                    	    // JavaP.g:1927:12: '[' exx= expression ']'
                    	    {
                    	    char_literal247=(Token)match(input,70,FOLLOW_70_in_creator9578); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal247_tree = (Object)adaptor.create(char_literal247);
                    	    adaptor.addChild(root_0, char_literal247_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_creator9582);
                    	    exx=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
                    	    char_literal248=(Token)match(input,71,FOLLOW_71_in_creator9584); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal248_tree = (Object)adaptor.create(char_literal248);
                    	    adaptor.addChild(root_0, char_literal248_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((ArrayCreationExpression)retval.element).addDimensionInitializer(new FilledArrayIndex(exx.element));
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt168 >= 1 ) break loop168;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(168, input);
                                throw eee;
                        }
                        cnt168++;
                    } while (true);

                    // JavaP.g:1928:13: ( '[' ']' )*
                    loop169:
                    do {
                        int alt169=2;
                        int LA169_0 = input.LA(1);

                        if ( (LA169_0==70) ) {
                            int LA169_2 = input.LA(2);

                            if ( (LA169_2==71) ) {
                                alt169=1;
                            }


                        }


                        switch (alt169) {
                    	case 1 :
                    	    // JavaP.g:1928:14: '[' ']'
                    	    {
                    	    char_literal249=(Token)match(input,70,FOLLOW_70_in_creator9603); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal249_tree = (Object)adaptor.create(char_literal249);
                    	    adaptor.addChild(root_0, char_literal249_tree);
                    	    }
                    	    char_literal250=(Token)match(input,71,FOLLOW_71_in_creator9605); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal250_tree = (Object)adaptor.create(char_literal250);
                    	    adaptor.addChild(root_0, char_literal250_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((ArrayCreationExpression)retval.element).addDimensionInitializer(new EmptyArrayIndex(1));
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop169;
                        }
                    } while (true);


                    }
                    break;
                case 4 :
                    // JavaP.g:1929:9: t= createdName (diam= '<' '>' )? rest= classCreatorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_createdName_in_creator9621);
                    t=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    // JavaP.g:1929:23: (diam= '<' '>' )?
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==62) ) {
                        alt170=1;
                    }
                    switch (alt170) {
                        case 1 :
                            // JavaP.g:1929:24: diam= '<' '>'
                            {
                            diam=(Token)match(input,62,FOLLOW_62_in_creator9626); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            diam_tree = (Object)adaptor.create(diam);
                            adaptor.addChild(root_0, diam_tree);
                            }
                            char_literal251=(Token)match(input,64,FOLLOW_64_in_creator9627); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal251_tree = (Object)adaptor.create(char_literal251);
                            adaptor.addChild(root_0, char_literal251_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classCreatorRest_in_creator9633);
                    rest=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rest.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ConstructorInvocation((BasicJavaTypeReference)t.element,((TargetScope_scope)TargetScope_stack.peek()).target);
                                ((ConstructorInvocation)retval.element).setBody(rest.element.body());
                                ((ConstructorInvocation)retval.element).addAllArguments(rest.element.arguments());
                                if(diam != null) {((ConstructorInvocation)retval.element).setDiamond(true);}
                               
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, creator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "creator"

    public static class createdName_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createdName"
    // JavaP.g:1938:1: createdName returns [JavaTypeReference element] : (cd= classOrInterfaceType | prim= primitiveType );
    public final Java_JavaP.createdName_return createdName() throws RecognitionException {
        Java_JavaP.createdName_return retval = new Java_JavaP.createdName_return();
        retval.start = input.LT(1);
        int createdName_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.classOrInterfaceType_return cd = null;

        Java_JavaP.primitiveType_return prim = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // JavaP.g:1939:5: (cd= classOrInterfaceType | prim= primitiveType )
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==Identifier) ) {
                alt172=1;
            }
            else if ( ((LA172_0>=79 && LA172_0<=86)) ) {
                alt172=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;
            }
            switch (alt172) {
                case 1 :
                    // JavaP.g:1939:9: cd= classOrInterfaceType
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceType_in_createdName9670);
                    cd=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = cd.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1940:9: prim= primitiveType
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_createdName9684);
                    prim=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prim.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = prim.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, createdName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "createdName"

    public static class innerCreator_return extends ParserRuleReturnScope {
        public ConstructorInvocation element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerCreator"
    // JavaP.g:1945:1: innerCreator returns [ConstructorInvocation element] : (targs= nonWildcardTypeArguments )? name= identifierRule rest= classCreatorRest ;
    public final Java_JavaP.innerCreator_return innerCreator() throws RecognitionException {
        Java_JavaP.innerCreator_return retval = new Java_JavaP.innerCreator_return();
        retval.start = input.LT(1);
        int innerCreator_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.nonWildcardTypeArguments_return targs = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.classCreatorRest_return rest = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // JavaP.g:1946:5: ( (targs= nonWildcardTypeArguments )? name= identifierRule rest= classCreatorRest )
            // JavaP.g:1946:9: (targs= nonWildcardTypeArguments )? name= identifierRule rest= classCreatorRest
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:1946:9: (targs= nonWildcardTypeArguments )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==62) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // JavaP.g:1946:10: targs= nonWildcardTypeArguments
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_innerCreator9714);
                    targs=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, targs.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_identifierRule_in_innerCreator9728);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            pushFollow(FOLLOW_classCreatorRest_in_innerCreator9732);
            rest=classCreatorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rest.getTree());
            if ( state.backtracking==0 ) {
              BasicJavaTypeReference tref = (BasicJavaTypeReference)typeRef((name!=null?input.toString(name.start,name.stop):null));
                       setLocation(tref,name.start,name.start);
                       retval.element = new ConstructorInvocation((BasicJavaTypeReference)tref,((TargetScope_scope)TargetScope_stack.peek()).target);
                       retval.element.setBody(rest.element.body());
                       retval.element.addAllArguments(rest.element.arguments());
                       if(targs != null) {
                         retval.element.addAllTypeArguments(targs.element);
                       }
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, innerCreator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "innerCreator"

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        public ClassCreatorRest element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classCreatorRest"
    // JavaP.g:1960:1: classCreatorRest returns [ClassCreatorRest element] : args= arguments (body= classBody )? ;
    public final Java_JavaP.classCreatorRest_return classCreatorRest() throws RecognitionException {
        Java_JavaP.classCreatorRest_return retval = new Java_JavaP.classCreatorRest_return();
        retval.start = input.LT(1);
        int classCreatorRest_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.arguments_return args = null;

        Java_JavaP.classBody_return body = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // JavaP.g:1961:5: (args= arguments (body= classBody )? )
            // JavaP.g:1961:9: args= arguments (body= classBody )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_arguments_in_classCreatorRest9768);
            args=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new ClassCreatorRest(args.element);
            }
            // JavaP.g:1961:78: (body= classBody )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==66) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // JavaP.g:1961:79: body= classBody
                    {
                    pushFollow(FOLLOW_classBody_in_classCreatorRest9774);
                    body=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.setBody(body.element);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, classCreatorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classCreatorRest"

    public static class explicitGenericInvocation_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocation"
    // JavaP.g:1965:1: explicitGenericInvocation returns [Expression element] : targs= nonWildcardTypeArguments name= identifierRule args= arguments ;
    public final Java_JavaP.explicitGenericInvocation_return explicitGenericInvocation() throws RecognitionException {
        Java_JavaP.explicitGenericInvocation_return retval = new Java_JavaP.explicitGenericInvocation_return();
        retval.start = input.LT(1);
        int explicitGenericInvocation_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.nonWildcardTypeArguments_return targs = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.arguments_return args = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // JavaP.g:1966:5: (targs= nonWildcardTypeArguments name= identifierRule args= arguments )
            // JavaP.g:1966:9: targs= nonWildcardTypeArguments name= identifierRule args= arguments
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation9804);
            targs=nonWildcardTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, targs.getTree());
            pushFollow(FOLLOW_identifierRule_in_explicitGenericInvocation9808);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            pushFollow(FOLLOW_arguments_in_explicitGenericInvocation9812);
            args=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
            if ( state.backtracking==0 ) {
              retval.element = invocation((name!=null?input.toString(name.start,name.stop):null),((TargetScope_scope)TargetScope_stack.peek()).target);
                         ((MethodInvocation)retval.element).addAllArguments(args.element);
                         ((MethodInvocation)retval.element).addAllTypeArguments(targs.element);
                        
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, explicitGenericInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocation"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        public List<ActualTypeArgument> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // JavaP.g:1973:1: nonWildcardTypeArguments returns [List<ActualTypeArgument> element] : '<' list= typeList '>' ;
    public final Java_JavaP.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        Java_JavaP.nonWildcardTypeArguments_return retval = new Java_JavaP.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);
        int nonWildcardTypeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal252=null;
        Token char_literal253=null;
        Java_JavaP.typeList_return list = null;


        Object char_literal252_tree=null;
        Object char_literal253_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // JavaP.g:1974:5: ( '<' list= typeList '>' )
            // JavaP.g:1974:9: '<' list= typeList '>'
            {
            root_0 = (Object)adaptor.nil();

            char_literal252=(Token)match(input,62,FOLLOW_62_in_nonWildcardTypeArguments9847); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal252_tree = (Object)adaptor.create(char_literal252);
            adaptor.addChild(root_0, char_literal252_tree);
            }
            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments9851);
            list=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, list.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<ActualTypeArgument>();for(TypeReference tref:list.element){retval.element.add(java().createBasicTypeArgument(tref));}
            }
            char_literal253=(Token)match(input,64,FOLLOW_64_in_nonWildcardTypeArguments9854); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal253_tree = (Object)adaptor.create(char_literal253);
            adaptor.addChild(root_0, char_literal253_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, nonWildcardTypeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"

    public static class superSuffix_return extends ParserRuleReturnScope {
        public TargetedExpression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "superSuffix"
    // JavaP.g:1978:1: superSuffix returns [TargetedExpression element] : '.' name= identifierRule (args= arguments )? ;
    public final Java_JavaP.superSuffix_return superSuffix() throws RecognitionException {
        Java_JavaP.superSuffix_return retval = new Java_JavaP.superSuffix_return();
        retval.start = input.LT(1);
        int superSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal254=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.arguments_return args = null;


        Object char_literal254_tree=null;


           Token start=null;
           Token stop=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // JavaP.g:1986:5: ( '.' name= identifierRule (args= arguments )? )
            // JavaP.g:1988:5: '.' name= identifierRule (args= arguments )?
            {
            root_0 = (Object)adaptor.nil();

            char_literal254=(Token)match(input,51,FOLLOW_51_in_superSuffix9900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal254_tree = (Object)adaptor.create(char_literal254);
            adaptor.addChild(root_0, char_literal254_tree);
            }
            pushFollow(FOLLOW_identifierRule_in_superSuffix9904);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = expressionFactory().createNameExpression((name!=null?input.toString(name.start,name.stop):null));
                                       start = name.start;
                                       stop = name.start;
            }
            // JavaP.g:1991:9: (args= arguments )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==89) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // JavaP.g:1991:10: args= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_superSuffix9919);
                    args=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = invocation((name!=null?input.toString(name.start,name.stop):null),null);
                                ((MethodInvocation)retval.element).addAllArguments(args.element);
                                stop = args.stop;
                                
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              setLocation(retval.element,start,stop);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                check_null(retval.element);

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, superSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "superSuffix"

    public static class arguments_return extends ParserRuleReturnScope {
        public List<Expression> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // JavaP.g:2000:1: arguments returns [List<Expression> element] : '(' (list= expressionList )? ')' ;
    public final Java_JavaP.arguments_return arguments() throws RecognitionException {
        Java_JavaP.arguments_return retval = new Java_JavaP.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal255=null;
        Token char_literal256=null;
        Java_JavaP.expressionList_return list = null;


        Object char_literal255_tree=null;
        Object char_literal256_tree=null;

        retval.element = new ArrayList<Expression>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // JavaP.g:2002:5: ( '(' (list= expressionList )? ')' )
            // JavaP.g:2002:9: '(' (list= expressionList )? ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal255=(Token)match(input,89,FOLLOW_89_in_arguments9979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal255_tree = (Object)adaptor.create(char_literal255);
            adaptor.addChild(root_0, char_literal255_tree);
            }
            // JavaP.g:2002:13: (list= expressionList )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==IntegerLiteral||LA176_0==FloatingPointLiteral||(LA176_0>=CharacterLiteral && LA176_0<=StringLiteral)||LA176_0==Identifier||LA176_0==69||(LA176_0>=79 && LA176_0<=86)||(LA176_0>=88 && LA176_0<=89)||(LA176_0>=92 && LA176_0<=95)||(LA176_0>=127 && LA176_0<=128)||(LA176_0>=131 && LA176_0<=135)) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // JavaP.g:2002:14: list= expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments9984);
                    list=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, list.getTree());
                    if ( state.backtracking==0 ) {
                       for(Expression ex: list.element) {retval.element.add(ex);}
                    }

                    }
                    break;

            }

            char_literal256=(Token)match(input,90,FOLLOW_90_in_arguments9991); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal256_tree = (Object)adaptor.create(char_literal256);
            adaptor.addChild(root_0, char_literal256_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred5_JavaP
    public final void synpred5_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.packageDeclaration_return np = null;

        Java_JavaP.importDeclaration_return imp = null;

        Java_JavaP.typeDeclaration_return typech = null;

        Java_JavaP.classOrInterfaceDeclaration_return cd = null;


        // JavaP.g:381:10: ( annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* ) )
        // JavaP.g:381:10: annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* )
        {
        pushFollow(FOLLOW_annotations_in_synpred5_JavaP126);
        annotations();

        state._fsp--;
        if (state.failed) return ;
        // JavaP.g:382:9: (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* )
        int alt182=2;
        int LA182_0 = input.LA(1);

        if ( (LA182_0==47) ) {
            alt182=1;
        }
        else if ( (LA182_0==ENUM||LA182_0==50||(LA182_0>=53 && LA182_0<=59)||LA182_0==68||LA182_0==96) ) {
            alt182=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 182, 0, input);

            throw nvae;
        }
        switch (alt182) {
            case 1 :
                // JavaP.g:382:13: np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )*
                {
                pushFollow(FOLLOW_packageDeclaration_in_synpred5_JavaP142);
                np=packageDeclaration();

                state._fsp--;
                if (state.failed) return ;
                // JavaP.g:386:13: (imp= importDeclaration )*
                loop179:
                do {
                    int alt179=2;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==49) ) {
                        alt179=1;
                    }


                    switch (alt179) {
                	case 1 :
                	    // JavaP.g:386:14: imp= importDeclaration
                	    {
                	    pushFollow(FOLLOW_importDeclaration_in_synpred5_JavaP177);
                	    imp=importDeclaration();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop179;
                    }
                } while (true);

                // JavaP.g:387:13: (typech= typeDeclaration )*
                loop180:
                do {
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==ENUM||LA180_0==48||LA180_0==50||(LA180_0>=53 && LA180_0<=59)||LA180_0==68||LA180_0==96) ) {
                        alt180=1;
                    }


                    switch (alt180) {
                	case 1 :
                	    // JavaP.g:387:14: typech= typeDeclaration
                	    {
                	    pushFollow(FOLLOW_typeDeclaration_in_synpred5_JavaP197);
                	    typech=typeDeclaration();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop180;
                    }
                } while (true);


                }
                break;
            case 2 :
                // JavaP.g:391:13: cd= classOrInterfaceDeclaration (typech= typeDeclaration )*
                {
                pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred5_JavaP246);
                cd=classOrInterfaceDeclaration();

                state._fsp--;
                if (state.failed) return ;
                // JavaP.g:396:13: (typech= typeDeclaration )*
                loop181:
                do {
                    int alt181=2;
                    int LA181_0 = input.LA(1);

                    if ( (LA181_0==ENUM||LA181_0==48||LA181_0==50||(LA181_0>=53 && LA181_0<=59)||LA181_0==68||LA181_0==96) ) {
                        alt181=1;
                    }


                    switch (alt181) {
                	case 1 :
                	    // JavaP.g:396:14: typech= typeDeclaration
                	    {
                	    pushFollow(FOLLOW_typeDeclaration_in_synpred5_JavaP280);
                	    typech=typeDeclaration();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop181;
                    }
                } while (true);


                }
                break;

        }


        }
    }
    // $ANTLR end synpred5_JavaP

    // $ANTLR start synpred52_JavaP
    public final void synpred52_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.methodDeclaration_return method = null;


        // JavaP.g:711:9: (method= methodDeclaration )
        // JavaP.g:711:9: method= methodDeclaration
        {
        pushFollow(FOLLOW_methodDeclaration_in_synpred52_JavaP2285);
        method=methodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred52_JavaP

    // $ANTLR start synpred60_JavaP
    public final void synpred60_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.interfaceConstant_return cst = null;


        // JavaP.g:771:9: (cst= interfaceConstant )
        // JavaP.g:771:9: cst= interfaceConstant
        {
        pushFollow(FOLLOW_interfaceConstant_in_synpred60_JavaP2695);
        cst=interfaceConstant();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred60_JavaP

    // $ANTLR start synpred106_JavaP
    public final void synpred106_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.variableModifiers_return mods = null;

        Java_JavaP.type_return t = null;

        Java_JavaP.variableDeclaratorId_return id = null;

        Java_JavaP.formalParameterDecls_return decls = null;


        // JavaP.g:1064:9: (mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )? )
        // JavaP.g:1064:9: mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )?
        {
        pushFollow(FOLLOW_variableModifiers_in_synpred106_JavaP4382);
        mods=variableModifiers();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred106_JavaP4386);
        t=type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_variableDeclaratorId_in_synpred106_JavaP4390);
        id=variableDeclaratorId();

        state._fsp--;
        if (state.failed) return ;
        // JavaP.g:1065:9: ( ',' decls= formalParameterDecls )?
        int alt189=2;
        int LA189_0 = input.LA(1);

        if ( (LA189_0==63) ) {
            alt189=1;
        }
        switch (alt189) {
            case 1 :
                // JavaP.g:1065:10: ',' decls= formalParameterDecls
                {
                match(input,63,FOLLOW_63_in_synpred106_JavaP4401); if (state.failed) return ;
                pushFollow(FOLLOW_formalParameterDecls_in_synpred106_JavaP4405);
                decls=formalParameterDecls();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred106_JavaP

    // $ANTLR start synpred107_JavaP
    public final void synpred107_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.explicitConstructorInvocation_return inv = null;


        // JavaP.g:1089:11: (inv= explicitConstructorInvocation )
        // JavaP.g:1089:11: inv= explicitConstructorInvocation
        {
        pushFollow(FOLLOW_explicitConstructorInvocation_in_synpred107_JavaP4518);
        inv=explicitConstructorInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred107_JavaP

    // $ANTLR start synpred110_JavaP
    public final void synpred110_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.arguments_return args = null;


        // JavaP.g:1095:9: ( ( nonWildcardTypeArguments )? 'this' args= arguments ';' )
        // JavaP.g:1095:9: ( nonWildcardTypeArguments )? 'this' args= arguments ';'
        {
        // JavaP.g:1095:9: ( nonWildcardTypeArguments )?
        int alt190=2;
        int LA190_0 = input.LA(1);

        if ( (LA190_0==62) ) {
            alt190=1;
        }
        switch (alt190) {
            case 1 :
                // JavaP.g:0:0: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred110_JavaP4569);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,92,FOLLOW_92_in_synpred110_JavaP4572); if (state.failed) return ;
        pushFollow(FOLLOW_arguments_in_synpred110_JavaP4576);
        args=arguments();

        state._fsp--;
        if (state.failed) return ;
        match(input,48,FOLLOW_48_in_synpred110_JavaP4578); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred110_JavaP

    // $ANTLR start synpred120_JavaP
    public final void synpred120_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.annotation_return a = null;


        // JavaP.g:1156:10: (a= annotation )
        // JavaP.g:1156:10: a= annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred120_JavaP4862);
        a=annotation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred120_JavaP

    // $ANTLR start synpred143_JavaP
    public final void synpred143_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.localVariableDeclarationStatement_return local = null;


        // JavaP.g:1253:9: (local= localVariableDeclarationStatement )
        // JavaP.g:1253:9: local= localVariableDeclarationStatement
        {
        pushFollow(FOLLOW_localVariableDeclarationStatement_in_synpred143_JavaP5520);
        local=localVariableDeclarationStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred143_JavaP

    // $ANTLR start synpred144_JavaP
    public final void synpred144_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.classOrInterfaceDeclaration_return cd = null;


        // JavaP.g:1254:9: (cd= classOrInterfaceDeclaration )
        // JavaP.g:1254:9: cd= classOrInterfaceDeclaration
        {
        pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred144_JavaP5534);
        cd=classOrInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred144_JavaP

    // $ANTLR start synpred149_JavaP
    public final void synpred149_JavaP_fragment() throws RecognitionException {   
        Token elsekey=null;
        Java_JavaP.statement_return ifelse = null;


        // JavaP.g:1277:72: (elsekey= 'else' ifelse= statement )
        // JavaP.g:1277:72: elsekey= 'else' ifelse= statement
        {
        elsekey=(Token)match(input,100,FOLLOW_100_in_synpred149_JavaP5750); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred149_JavaP5754);
        ifelse=statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred149_JavaP

    // $ANTLR start synpred155_JavaP
    public final void synpred155_JavaP_fragment() throws RecognitionException {   
        Token finkey=null;
        Java_JavaP.catches_return cts = null;

        Java_JavaP.block_return trybl = null;


        // JavaP.g:1300:11: (cts= catches finkey= 'finally' trybl= block )
        // JavaP.g:1300:11: cts= catches finkey= 'finally' trybl= block
        {
        pushFollow(FOLLOW_catches_in_synpred155_JavaP5912);
        cts=catches();

        state._fsp--;
        if (state.failed) return ;
        finkey=(Token)match(input,105,FOLLOW_105_in_synpred155_JavaP5916); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred155_JavaP5920);
        trybl=block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred155_JavaP

    // $ANTLR start synpred156_JavaP
    public final void synpred156_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.catches_return ctss = null;


        // JavaP.g:1305:11: (ctss= catches )
        // JavaP.g:1305:11: ctss= catches
        {
        pushFollow(FOLLOW_catches_in_synpred156_JavaP5947);
        ctss=catches();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred156_JavaP

    // $ANTLR start synpred175_JavaP
    public final void synpred175_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.constantExpression_return csexpr = null;


        // JavaP.g:1394:9: ( 'case' csexpr= constantExpression ':' )
        // JavaP.g:1394:9: 'case' csexpr= constantExpression ':'
        {
        match(input,112,FOLLOW_112_in_synpred175_JavaP6656); if (state.failed) return ;
        pushFollow(FOLLOW_constantExpression_in_synpred175_JavaP6660);
        csexpr=constantExpression();

        state._fsp--;
        if (state.failed) return ;
        match(input,98,FOLLOW_98_in_synpred175_JavaP6662); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_JavaP

    // $ANTLR start synpred176_JavaP
    public final void synpred176_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.enumConstantName_return enumname = null;


        // JavaP.g:1395:9: ( 'case' enumname= enumConstantName ':' )
        // JavaP.g:1395:9: 'case' enumname= enumConstantName ':'
        {
        match(input,112,FOLLOW_112_in_synpred176_JavaP6674); if (state.failed) return ;
        pushFollow(FOLLOW_enumConstantName_in_synpred176_JavaP6678);
        enumname=enumConstantName();

        state._fsp--;
        if (state.failed) return ;
        match(input,98,FOLLOW_98_in_synpred176_JavaP6680); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_JavaP

    // $ANTLR start synpred177_JavaP
    public final void synpred177_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.enhancedForControl_return enh = null;


        // JavaP.g:1402:9: (enh= enhancedForControl )
        // JavaP.g:1402:9: enh= enhancedForControl
        {
        pushFollow(FOLLOW_enhancedForControl_in_synpred177_JavaP6732);
        enh=enhancedForControl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_JavaP

    // $ANTLR start synpred181_JavaP
    public final void synpred181_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.localVariableDeclaration_return local = null;


        // JavaP.g:1408:9: (local= localVariableDeclaration )
        // JavaP.g:1408:9: local= localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred181_JavaP6792);
        local=localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_JavaP

    // $ANTLR start synpred183_JavaP
    public final void synpred183_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.assignmentOperator_return op = null;

        Java_JavaP.expression_return exx = null;


        // JavaP.g:1455:64: (op= assignmentOperator exx= expression )
        // JavaP.g:1455:64: op= assignmentOperator exx= expression
        {
        pushFollow(FOLLOW_assignmentOperator_in_synpred183_JavaP7074);
        op=assignmentOperator();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred183_JavaP7078);
        exx=expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_JavaP

    // $ANTLR start synpred193_JavaP
    public final void synpred193_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1479:9: ( '<' '<' '=' )
        // JavaP.g:1479:10: '<' '<' '='
        {
        match(input,62,FOLLOW_62_in_synpred193_JavaP7209); if (state.failed) return ;
        match(input,62,FOLLOW_62_in_synpred193_JavaP7211); if (state.failed) return ;
        match(input,73,FOLLOW_73_in_synpred193_JavaP7213); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_JavaP

    // $ANTLR start synpred194_JavaP
    public final void synpred194_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1484:9: ( '>' '>' '>' '=' )
        // JavaP.g:1484:10: '>' '>' '>' '='
        {
        match(input,64,FOLLOW_64_in_synpred194_JavaP7248); if (state.failed) return ;
        match(input,64,FOLLOW_64_in_synpred194_JavaP7250); if (state.failed) return ;
        match(input,64,FOLLOW_64_in_synpred194_JavaP7252); if (state.failed) return ;
        match(input,73,FOLLOW_73_in_synpred194_JavaP7254); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred194_JavaP

    // $ANTLR start synpred195_JavaP
    public final void synpred195_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1491:9: ( '>' '>' '=' )
        // JavaP.g:1491:10: '>' '>' '='
        {
        match(input,64,FOLLOW_64_in_synpred195_JavaP7293); if (state.failed) return ;
        match(input,64,FOLLOW_64_in_synpred195_JavaP7295); if (state.failed) return ;
        match(input,73,FOLLOW_73_in_synpred195_JavaP7297); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_JavaP

    // $ANTLR start synpred206_JavaP
    public final void synpred206_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1599:9: ( '<' '=' )
        // JavaP.g:1599:10: '<' '='
        {
        match(input,62,FOLLOW_62_in_synpred206_JavaP7839); if (state.failed) return ;
        match(input,73,FOLLOW_73_in_synpred206_JavaP7841); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred206_JavaP

    // $ANTLR start synpred207_JavaP
    public final void synpred207_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1602:9: ( '>' '=' )
        // JavaP.g:1602:10: '>' '='
        {
        match(input,64,FOLLOW_64_in_synpred207_JavaP7872); if (state.failed) return ;
        match(input,73,FOLLOW_73_in_synpred207_JavaP7874); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred207_JavaP

    // $ANTLR start synpred210_JavaP
    public final void synpred210_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1620:9: ( '<' '<' )
        // JavaP.g:1620:10: '<' '<'
        {
        match(input,62,FOLLOW_62_in_synpred210_JavaP7984); if (state.failed) return ;
        match(input,62,FOLLOW_62_in_synpred210_JavaP7986); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred210_JavaP

    // $ANTLR start synpred211_JavaP
    public final void synpred211_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1623:9: ( '>' '>' '>' )
        // JavaP.g:1623:10: '>' '>' '>'
        {
        match(input,64,FOLLOW_64_in_synpred211_JavaP8017); if (state.failed) return ;
        match(input,64,FOLLOW_64_in_synpred211_JavaP8019); if (state.failed) return ;
        match(input,64,FOLLOW_64_in_synpred211_JavaP8021); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred211_JavaP

    // $ANTLR start synpred212_JavaP
    public final void synpred212_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1628:9: ( '>' '>' )
        // JavaP.g:1628:10: '>' '>'
        {
        match(input,64,FOLLOW_64_in_synpred212_JavaP8056); if (state.failed) return ;
        match(input,64,FOLLOW_64_in_synpred212_JavaP8058); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred212_JavaP

    // $ANTLR start synpred224_JavaP
    public final void synpred224_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.castExpression_return castex = null;


        // JavaP.g:1686:9: (castex= castExpression )
        // JavaP.g:1686:9: castex= castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred224_JavaP8381);
        castex=castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred224_JavaP

    // $ANTLR start synpred233_JavaP
    public final void synpred233_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.primitiveType_return tref = null;

        Java_JavaP.unaryExpression_return unex = null;


        // JavaP.g:1755:8: ( '(' tref= primitiveType ')' unex= unaryExpression )
        // JavaP.g:1755:8: '(' tref= primitiveType ')' unex= unaryExpression
        {
        match(input,89,FOLLOW_89_in_synpred233_JavaP8708); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred233_JavaP8712);
        tref=primitiveType();

        state._fsp--;
        if (state.failed) return ;
        match(input,90,FOLLOW_90_in_synpred233_JavaP8714); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred233_JavaP8718);
        unex=unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_JavaP

    // $ANTLR start synpred239_JavaP
    public final void synpred239_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.moreidentifierRuleSuffixRubbish_return morerubex = null;


        // JavaP.g:1783:9: (morerubex= moreidentifierRuleSuffixRubbish )
        // JavaP.g:1783:9: morerubex= moreidentifierRuleSuffixRubbish
        {
        pushFollow(FOLLOW_moreidentifierRuleSuffixRubbish_in_synpred239_JavaP8878);
        morerubex=moreidentifierRuleSuffixRubbish();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_JavaP

    // $ANTLR start synpred241_JavaP
    public final void synpred241_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.identifierRule_return idx = null;


        // JavaP.g:1814:5: ( '.' idx= identifierRule )
        // JavaP.g:1814:5: '.' idx= identifierRule
        {
        match(input,51,FOLLOW_51_in_synpred241_JavaP9002); if (state.failed) return ;
        pushFollow(FOLLOW_identifierRule_in_synpred241_JavaP9006);
        idx=identifierRule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_JavaP

    // $ANTLR start synpred243_JavaP
    public final void synpred243_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1825:9: ( ( '[' ']' )+ '.' 'class' )
        // JavaP.g:1825:9: ( '[' ']' )+ '.' 'class'
        {
        // JavaP.g:1825:9: ( '[' ']' )+
        int cnt204=0;
        loop204:
        do {
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==70) ) {
                alt204=1;
            }


            switch (alt204) {
        	case 1 :
        	    // JavaP.g:1825:10: '[' ']'
        	    {
        	    match(input,70,FOLLOW_70_in_synpred243_JavaP9036); if (state.failed) return ;
        	    match(input,71,FOLLOW_71_in_synpred243_JavaP9038); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt204 >= 1 ) break loop204;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(204, input);
                    throw eee;
            }
            cnt204++;
        } while (true);

        match(input,51,FOLLOW_51_in_synpred243_JavaP9042); if (state.failed) return ;
        match(input,59,FOLLOW_59_in_synpred243_JavaP9044); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_JavaP

    // $ANTLR start synpred244_JavaP
    public final void synpred244_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.arrayAccessSuffixRubbish_return arr = null;


        // JavaP.g:1827:9: (arr= arrayAccessSuffixRubbish )
        // JavaP.g:1827:9: arr= arrayAccessSuffixRubbish
        {
        pushFollow(FOLLOW_arrayAccessSuffixRubbish_in_synpred244_JavaP9062);
        arr=arrayAccessSuffixRubbish();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_JavaP

    // $ANTLR start synpred246_JavaP
    public final void synpred246_JavaP_fragment() throws RecognitionException {   
        Token clkw=null;

        // JavaP.g:1829:9: ( '.' clkw= 'class' )
        // JavaP.g:1829:9: '.' clkw= 'class'
        {
        match(input,51,FOLLOW_51_in_synpred246_JavaP9089); if (state.failed) return ;
        clkw=(Token)match(input,59,FOLLOW_59_in_synpred246_JavaP9093); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred246_JavaP

    // $ANTLR start synpred247_JavaP
    public final void synpred247_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.explicitGenericInvocation_return gen = null;


        // JavaP.g:1834:9: ( '.' gen= explicitGenericInvocation )
        // JavaP.g:1834:9: '.' gen= explicitGenericInvocation
        {
        match(input,51,FOLLOW_51_in_synpred247_JavaP9114); if (state.failed) return ;
        pushFollow(FOLLOW_explicitGenericInvocation_in_synpred247_JavaP9118);
        gen=explicitGenericInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred247_JavaP

    // $ANTLR start synpred248_JavaP
    public final void synpred248_JavaP_fragment() throws RecognitionException {   
        Token thiskw=null;

        // JavaP.g:1835:9: ( '.' thiskw= 'this' )
        // JavaP.g:1835:9: '.' thiskw= 'this'
        {
        match(input,51,FOLLOW_51_in_synpred248_JavaP9131); if (state.failed) return ;
        thiskw=(Token)match(input,92,FOLLOW_92_in_synpred248_JavaP9135); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred248_JavaP

    // $ANTLR start synpred249_JavaP
    public final void synpred249_JavaP_fragment() throws RecognitionException {   
        Token supkw=null;
        Java_JavaP.superSuffix_return supsuf = null;


        // JavaP.g:1840:9: ( '.' supkw= 'super' supsuf= superSuffix )
        // JavaP.g:1840:9: '.' supkw= 'super' supsuf= superSuffix
        {
        match(input,51,FOLLOW_51_in_synpred249_JavaP9155); if (state.failed) return ;
        supkw=(Token)match(input,88,FOLLOW_88_in_synpred249_JavaP9159); if (state.failed) return ;
        pushFollow(FOLLOW_superSuffix_in_synpred249_JavaP9175);
        supsuf=superSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_JavaP

    // $ANTLR start synpred250_JavaP
    public final void synpred250_JavaP_fragment() throws RecognitionException {   
        Token newkw=null;
        Java_JavaP.innerCreator_return in = null;


        // JavaP.g:1849:9: ( '.' newkw= 'new' in= innerCreator )
        // JavaP.g:1849:9: '.' newkw= 'new' in= innerCreator
        {
        match(input,51,FOLLOW_51_in_synpred250_JavaP9187); if (state.failed) return ;
        newkw=(Token)match(input,135,FOLLOW_135_in_synpred250_JavaP9191); if (state.failed) return ;
        pushFollow(FOLLOW_innerCreator_in_synpred250_JavaP9195);
        in=innerCreator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_JavaP

    // $ANTLR start synpred251_JavaP
    public final void synpred251_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.identifierRule_return id = null;


        // JavaP.g:1854:55: ( '.' id= identifierRule )
        // JavaP.g:1854:55: '.' id= identifierRule
        {
        match(input,51,FOLLOW_51_in_synpred251_JavaP9223); if (state.failed) return ;
        pushFollow(FOLLOW_identifierRule_in_synpred251_JavaP9227);
        id=identifierRule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_JavaP

    // $ANTLR start synpred252_JavaP
    public final void synpred252_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.arrayAccessSuffixRubbish_return arr = null;


        // JavaP.g:1861:9: (arr= arrayAccessSuffixRubbish )
        // JavaP.g:1861:9: arr= arrayAccessSuffixRubbish
        {
        pushFollow(FOLLOW_arrayAccessSuffixRubbish_in_synpred252_JavaP9251);
        arr=arrayAccessSuffixRubbish();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_JavaP

    // $ANTLR start synpred254_JavaP
    public final void synpred254_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1863:9: ( '.' 'class' )
        // JavaP.g:1863:9: '.' 'class'
        {
        match(input,51,FOLLOW_51_in_synpred254_JavaP9277); if (state.failed) return ;
        match(input,59,FOLLOW_59_in_synpred254_JavaP9279); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_JavaP

    // $ANTLR start synpred255_JavaP
    public final void synpred255_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.explicitGenericInvocation_return gen = null;


        // JavaP.g:1864:9: ( '.' gen= explicitGenericInvocation )
        // JavaP.g:1864:9: '.' gen= explicitGenericInvocation
        {
        match(input,51,FOLLOW_51_in_synpred255_JavaP9291); if (state.failed) return ;
        pushFollow(FOLLOW_explicitGenericInvocation_in_synpred255_JavaP9295);
        gen=explicitGenericInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_JavaP

    // $ANTLR start synpred256_JavaP
    public final void synpred256_JavaP_fragment() throws RecognitionException {   
        Token supkw=null;
        Java_JavaP.superSuffix_return supsuf = null;


        // JavaP.g:1865:9: ( '.' supkw= 'super' supsuf= superSuffix )
        // JavaP.g:1865:9: '.' supkw= 'super' supsuf= superSuffix
        {
        match(input,51,FOLLOW_51_in_synpred256_JavaP9307); if (state.failed) return ;
        supkw=(Token)match(input,88,FOLLOW_88_in_synpred256_JavaP9311); if (state.failed) return ;
        pushFollow(FOLLOW_superSuffix_in_synpred256_JavaP9315);
        supsuf=superSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_JavaP

    // $ANTLR start synpred257_JavaP
    public final void synpred257_JavaP_fragment() throws RecognitionException {   
        Token newkw=null;
        Java_JavaP.innerCreator_return in = null;


        // JavaP.g:1872:9: ( '.' newkw= 'new' in= innerCreator )
        // JavaP.g:1872:9: '.' newkw= 'new' in= innerCreator
        {
        match(input,51,FOLLOW_51_in_synpred257_JavaP9327); if (state.failed) return ;
        newkw=(Token)match(input,135,FOLLOW_135_in_synpred257_JavaP9331); if (state.failed) return ;
        pushFollow(FOLLOW_innerCreator_in_synpred257_JavaP9335);
        in=innerCreator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_JavaP

    // $ANTLR start synpred258_JavaP
    public final void synpred258_JavaP_fragment() throws RecognitionException {   
        Token open=null;
        Token close=null;
        Java_JavaP.expression_return arrex = null;


        // JavaP.g:1903:11: (open= '[' arrex= expression close= ']' )
        // JavaP.g:1903:11: open= '[' arrex= expression close= ']'
        {
        open=(Token)match(input,70,FOLLOW_70_in_synpred258_JavaP9408); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred258_JavaP9412);
        arrex=expression();

        state._fsp--;
        if (state.failed) return ;
        close=(Token)match(input,71,FOLLOW_71_in_synpred258_JavaP9416); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_JavaP

    // $ANTLR start synpred262_JavaP
    public final void synpred262_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.createdName_return tt = null;

        Java_JavaP.arrayInitializer_return init = null;


        // JavaP.g:1923:10: (tt= createdName ( '[' ']' )+ init= arrayInitializer )
        // JavaP.g:1923:10: tt= createdName ( '[' ']' )+ init= arrayInitializer
        {
        pushFollow(FOLLOW_createdName_in_synpred262_JavaP9511);
        tt=createdName();

        state._fsp--;
        if (state.failed) return ;
        // JavaP.g:1924:14: ( '[' ']' )+
        int cnt206=0;
        loop206:
        do {
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==70) ) {
                alt206=1;
            }


            switch (alt206) {
        	case 1 :
        	    // JavaP.g:1924:15: '[' ']'
        	    {
        	    match(input,70,FOLLOW_70_in_synpred262_JavaP9529); if (state.failed) return ;
        	    match(input,71,FOLLOW_71_in_synpred262_JavaP9531); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt206 >= 1 ) break loop206;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(206, input);
                    throw eee;
            }
            cnt206++;
        } while (true);

        pushFollow(FOLLOW_arrayInitializer_in_synpred262_JavaP9539);
        init=arrayInitializer();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_JavaP

    // $ANTLR start synpred263_JavaP
    public final void synpred263_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.expression_return exx = null;


        // JavaP.g:1927:12: ( '[' exx= expression ']' )
        // JavaP.g:1927:12: '[' exx= expression ']'
        {
        match(input,70,FOLLOW_70_in_synpred263_JavaP9578); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred263_JavaP9582);
        exx=expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,71,FOLLOW_71_in_synpred263_JavaP9584); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_JavaP

    // $ANTLR start synpred265_JavaP
    public final void synpred265_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.createdName_return ttt = null;

        Java_JavaP.expression_return exx = null;


        // JavaP.g:1926:10: (ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )* )
        // JavaP.g:1926:10: ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )*
        {
        pushFollow(FOLLOW_createdName_in_synpred265_JavaP9562);
        ttt=createdName();

        state._fsp--;
        if (state.failed) return ;
        // JavaP.g:1927:11: ( '[' exx= expression ']' )+
        int cnt207=0;
        loop207:
        do {
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==70) ) {
                int LA207_1 = input.LA(2);

                if ( (LA207_1==IntegerLiteral||LA207_1==FloatingPointLiteral||(LA207_1>=CharacterLiteral && LA207_1<=StringLiteral)||LA207_1==Identifier||LA207_1==69||(LA207_1>=79 && LA207_1<=86)||(LA207_1>=88 && LA207_1<=89)||(LA207_1>=92 && LA207_1<=95)||(LA207_1>=127 && LA207_1<=128)||(LA207_1>=131 && LA207_1<=135)) ) {
                    alt207=1;
                }


            }


            switch (alt207) {
        	case 1 :
        	    // JavaP.g:1927:12: '[' exx= expression ']'
        	    {
        	    match(input,70,FOLLOW_70_in_synpred265_JavaP9578); if (state.failed) return ;
        	    pushFollow(FOLLOW_expression_in_synpred265_JavaP9582);
        	    exx=expression();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    match(input,71,FOLLOW_71_in_synpred265_JavaP9584); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt207 >= 1 ) break loop207;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(207, input);
                    throw eee;
            }
            cnt207++;
        } while (true);

        // JavaP.g:1928:13: ( '[' ']' )*
        loop208:
        do {
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==70) ) {
                alt208=1;
            }


            switch (alt208) {
        	case 1 :
        	    // JavaP.g:1928:14: '[' ']'
        	    {
        	    match(input,70,FOLLOW_70_in_synpred265_JavaP9603); if (state.failed) return ;
        	    match(input,71,FOLLOW_71_in_synpred265_JavaP9605); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop208;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred265_JavaP

    // Delegated rules

    public final boolean synpred243_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA8 dfa8 = new DFA8(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA162 dfa162 = new DFA162(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA171 dfa171 = new DFA171(this);
    protected DFA168 dfa168 = new DFA168(this);
    static final String DFA8_eotS =
        "\21\uffff";
    static final String DFA8_eofS =
        "\1\2\20\uffff";
    static final String DFA8_minS =
        "\1\47\1\0\17\uffff";
    static final String DFA8_maxS =
        "\1\140\1\0\17\uffff";
    static final String DFA8_acceptS =
        "\2\uffff\1\2\15\uffff\1\1";
    static final String DFA8_specialS =
        "\1\uffff\1\0\17\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\2\7\uffff\4\2\2\uffff\7\2\10\uffff\1\2\33\uffff\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "376:1: compilationUnit returns [Document element] : ( annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* ) | (np= packageDeclaration )? (imp= importDeclaration )* (typech= typeDeclaration )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_JavaP()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA41_eotS =
        "\14\uffff";
    static final String DFA41_eofS =
        "\14\uffff";
    static final String DFA41_minS =
        "\1\53\11\0\2\uffff";
    static final String DFA41_maxS =
        "\1\126\11\0\2\uffff";
    static final String DFA41_acceptS =
        "\12\uffff\1\1\1\2";
    static final String DFA41_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\uffff}>";
    static final String[] DFA41_transitionS = {
            "\1\1\43\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "710:1: memberDeclaration returns [TypeElement element] : (method= methodDeclaration | field= fieldDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_1 = input.LA(1);

                         
                        int index41_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA41_2 = input.LA(1);

                         
                        int index41_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA41_3 = input.LA(1);

                         
                        int index41_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA41_4 = input.LA(1);

                         
                        int index41_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA41_5 = input.LA(1);

                         
                        int index41_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA41_6 = input.LA(1);

                         
                        int index41_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA41_7 = input.LA(1);

                         
                        int index41_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA41_8 = input.LA(1);

                         
                        int index41_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA41_9 = input.LA(1);

                         
                        int index41_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA46_eotS =
        "\14\uffff";
    static final String DFA46_eofS =
        "\14\uffff";
    static final String DFA46_minS =
        "\1\53\11\0\2\uffff";
    static final String DFA46_maxS =
        "\1\126\11\0\2\uffff";
    static final String DFA46_acceptS =
        "\12\uffff\1\1\1\2";
    static final String DFA46_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\1\43\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "770:1: interfaceMethodOrFieldDecl returns [TypeElement element] : (cst= interfaceConstant | m= interfaceMethod );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_1 = input.LA(1);

                         
                        int index46_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA46_2 = input.LA(1);

                         
                        int index46_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA46_3 = input.LA(1);

                         
                        int index46_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA46_4 = input.LA(1);

                         
                        int index46_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA46_5 = input.LA(1);

                         
                        int index46_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA46_6 = input.LA(1);

                         
                        int index46_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA46_7 = input.LA(1);

                         
                        int index46_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA46_8 = input.LA(1);

                         
                        int index46_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA46_9 = input.LA(1);

                         
                        int index46_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA83_eotS =
        "\16\uffff";
    static final String DFA83_eofS =
        "\16\uffff";
    static final String DFA83_minS =
        "\1\53\13\0\2\uffff";
    static final String DFA83_maxS =
        "\1\140\13\0\2\uffff";
    static final String DFA83_acceptS =
        "\14\uffff\1\1\1\2";
    static final String DFA83_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff}>";
    static final String[] DFA83_transitionS = {
            "\1\3\15\uffff\1\1\25\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1"+
            "\13\11\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "1063:1: formalParameterDecls returns [List<FormalParameter> element] : (mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )? | modss= variableModifiers tt= type '...' idd= variableDeclaratorId );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA83_1 = input.LA(1);

                         
                        int index83_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index83_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA83_2 = input.LA(1);

                         
                        int index83_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index83_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA83_3 = input.LA(1);

                         
                        int index83_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index83_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA83_4 = input.LA(1);

                         
                        int index83_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index83_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA83_5 = input.LA(1);

                         
                        int index83_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index83_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA83_6 = input.LA(1);

                         
                        int index83_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index83_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA83_7 = input.LA(1);

                         
                        int index83_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index83_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA83_8 = input.LA(1);

                         
                        int index83_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index83_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA83_9 = input.LA(1);

                         
                        int index83_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index83_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA83_10 = input.LA(1);

                         
                        int index83_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index83_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA83_11 = input.LA(1);

                         
                        int index83_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index83_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 83, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA84_eotS =
        "\67\uffff";
    static final String DFA84_eofS =
        "\67\uffff";
    static final String DFA84_minS =
        "\1\10\1\uffff\25\0\40\uffff";
    static final String DFA84_maxS =
        "\1\u0087\1\uffff\25\0\40\uffff";
    static final String DFA84_acceptS =
        "\1\uffff\1\1\25\uffff\1\2\37\uffff";
    static final String DFA84_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\40\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\5\20\uffff\1\6\11\uffff\1\7\1\10\2\uffff\2\27\2\uffff\1\15"+
            "\4\uffff\1\27\1\uffff\1\27\2\uffff\7\27\2\uffff\1\1\3\uffff"+
            "\3\27\1\16\5\uffff\1\27\3\uffff\1\17\1\20\1\21\1\22\1\23\1\24"+
            "\1\25\1\26\1\uffff\1\4\1\3\2\uffff\1\2\1\13\1\11\1\12\1\27\2"+
            "\uffff\1\27\1\uffff\4\27\1\uffff\5\27\20\uffff\2\27\2\uffff"+
            "\4\27\1\14",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "1089:10: (inv= explicitConstructorInvocation )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA84_2 = input.LA(1);

                         
                        int index84_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA84_3 = input.LA(1);

                         
                        int index84_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA84_4 = input.LA(1);

                         
                        int index84_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA84_5 = input.LA(1);

                         
                        int index84_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA84_6 = input.LA(1);

                         
                        int index84_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA84_7 = input.LA(1);

                         
                        int index84_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA84_8 = input.LA(1);

                         
                        int index84_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA84_9 = input.LA(1);

                         
                        int index84_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA84_10 = input.LA(1);

                         
                        int index84_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA84_11 = input.LA(1);

                         
                        int index84_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA84_12 = input.LA(1);

                         
                        int index84_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA84_13 = input.LA(1);

                         
                        int index84_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA84_14 = input.LA(1);

                         
                        int index84_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA84_15 = input.LA(1);

                         
                        int index84_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA84_16 = input.LA(1);

                         
                        int index84_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA84_17 = input.LA(1);

                         
                        int index84_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA84_18 = input.LA(1);

                         
                        int index84_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA84_19 = input.LA(1);

                         
                        int index84_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA84_20 = input.LA(1);

                         
                        int index84_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA84_21 = input.LA(1);

                         
                        int index84_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA84_22 = input.LA(1);

                         
                        int index84_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index84_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA89_eotS =
        "\30\uffff";
    static final String DFA89_eofS =
        "\30\uffff";
    static final String DFA89_minS =
        "\1\10\2\0\25\uffff";
    static final String DFA89_maxS =
        "\1\u0087\2\0\25\uffff";
    static final String DFA89_acceptS =
        "\3\uffff\1\2\23\uffff\1\1";
    static final String DFA89_specialS =
        "\1\uffff\1\0\1\1\25\uffff}>";
    static final String[] DFA89_transitionS = {
            "\1\3\20\uffff\1\3\11\uffff\2\3\6\uffff\1\3\22\uffff\1\1\6\uffff"+
            "\1\3\11\uffff\10\3\1\uffff\2\3\2\uffff\1\2\3\3\47\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "1093:1: explicitConstructorInvocation returns [MethodInvocation element] : ( ( nonWildcardTypeArguments )? 'this' args= arguments ';' | (prim= primary '.' )? ( nonWildcardTypeArguments )? 'super' argsx= arguments ';' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA89_1 = input.LA(1);

                         
                        int index89_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_JavaP()) ) {s = 23;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index89_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA89_2 = input.LA(1);

                         
                        int index89_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_JavaP()) ) {s = 23;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index89_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 89, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA111_eotS =
        "\66\uffff";
    static final String DFA111_eofS =
        "\66\uffff";
    static final String DFA111_minS =
        "\1\10\13\0\52\uffff";
    static final String DFA111_maxS =
        "\1\u0087\13\0\52\uffff";
    static final String DFA111_acceptS =
        "\14\uffff\1\2\10\uffff\1\3\37\uffff\1\1";
    static final String DFA111_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\52\uffff}>";
    static final String[] DFA111_transitionS = {
            "\1\25\20\uffff\1\25\11\uffff\2\25\2\uffff\1\14\1\25\2\uffff"+
            "\1\3\4\uffff\1\25\1\uffff\1\14\2\uffff\4\14\1\1\2\14\6\uffff"+
            "\1\25\1\uffff\1\14\1\25\5\uffff\1\25\3\uffff\1\4\1\5\1\6\1\7"+
            "\1\10\1\11\1\12\1\13\1\uffff\2\25\2\uffff\4\25\1\2\2\uffff\1"+
            "\25\1\uffff\4\25\1\uffff\5\25\20\uffff\2\25\2\uffff\5\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "1251:1: blockStatement returns [Statement element] : (local= localVariableDeclarationStatement | cd= classOrInterfaceDeclaration | stat= statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA111_1 = input.LA(1);

                         
                        int index111_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_JavaP()) ) {s = 53;}

                        else if ( (synpred144_JavaP()) ) {s = 12;}

                         
                        input.seek(index111_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA111_2 = input.LA(1);

                         
                        int index111_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_JavaP()) ) {s = 53;}

                        else if ( (synpred144_JavaP()) ) {s = 12;}

                         
                        input.seek(index111_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA111_3 = input.LA(1);

                         
                        int index111_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA111_4 = input.LA(1);

                         
                        int index111_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA111_5 = input.LA(1);

                         
                        int index111_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA111_6 = input.LA(1);

                         
                        int index111_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA111_7 = input.LA(1);

                         
                        int index111_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA111_8 = input.LA(1);

                         
                        int index111_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA111_9 = input.LA(1);

                         
                        int index111_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA111_10 = input.LA(1);

                         
                        int index111_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA111_11 = input.LA(1);

                         
                        int index111_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA120_eotS =
        "\22\uffff";
    static final String DFA120_eofS =
        "\22\uffff";
    static final String DFA120_minS =
        "\1\10\17\uffff\1\60\1\uffff";
    static final String DFA120_maxS =
        "\1\u0087\17\uffff\1\u0084\1\uffff";
    static final String DFA120_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\uffff\1\20";
    static final String DFA120_specialS =
        "\22\uffff}>";
    static final String[] DFA120_transitionS = {
            "\1\17\20\uffff\1\17\11\uffff\2\17\3\uffff\1\2\2\uffff\1\20\4"+
            "\uffff\1\16\21\uffff\1\1\2\uffff\1\17\5\uffff\1\11\3\uffff\10"+
            "\17\1\uffff\2\17\2\uffff\4\17\3\uffff\1\3\1\uffff\1\4\1\5\1"+
            "\6\1\7\1\uffff\1\10\1\12\1\13\1\14\1\15\20\uffff\2\17\2\uffff"+
            "\5\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\17\2\uffff\2\17\11\uffff\1\17\1\uffff\2\17\4\uffff\1\17"+
            "\2\uffff\1\17\4\uffff\1\17\10\uffff\1\17\1\uffff\1\17\10\uffff"+
            "\1\21\16\uffff\24\17",
            ""
    };

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "1272:1: statement returns [Statement element] : (bl= block | ASSERT asexpr= expression ( ':' asexprx= expression )? ';' | ifkey= 'if' ifexpr= parExpression ifif= statement ( options {k=1; } : elsekey= 'else' ifelse= statement )? | forkey= 'for' '(' forc= forControl ')' forstat= statement | whilkey= 'while' wexs= parExpression wstat= statement | dokey= 'do' dostat= statement whilekey= 'while' doex= parExpression ';' | trykey= 'try' (ress= resources )? traaibl= block (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block )? | switchkey= 'switch' swexpr= parExpression '{' cases= switchBlockStatementGroups '}' | synkey= 'synchronized' synexpr= parExpression synstat= block | retkey= 'return' (retex= expression )? ';' | throwkey= 'throw' threx= expression ';' | breakkey= 'break' (name= identifierRule )? ';' | continuekey= 'continue' (name= identifierRule )? ';' | ';' | stattex= statementExpression ';' | name= identifierRule ':' labstat= statement );";
        }
    }
    static final String DFA116_eotS =
        "\76\uffff";
    static final String DFA116_eofS =
        "\1\3\75\uffff";
    static final String DFA116_minS =
        "\1\10\1\0\74\uffff";
    static final String DFA116_maxS =
        "\1\u0087\1\0\74\uffff";
    static final String DFA116_acceptS =
        "\2\uffff\1\3\1\4\70\uffff\1\1\1\2";
    static final String DFA116_specialS =
        "\1\uffff\1\0\74\uffff}>";
    static final String[] DFA116_transitionS = {
            "\1\3\20\uffff\1\3\11\uffff\2\3\2\uffff\2\3\2\uffff\1\3\4\uffff"+
            "\1\3\1\uffff\1\3\2\uffff\7\3\6\uffff\4\3\5\uffff\1\3\3\uffff"+
            "\10\3\1\uffff\2\3\2\uffff\6\3\1\uffff\6\3\1\2\5\3\1\1\1\3\16"+
            "\uffff\2\3\2\uffff\5\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "1300:9: (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA116_1 = input.LA(1);

                         
                        int index116_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_JavaP()) ) {s = 60;}

                        else if ( (synpred156_JavaP()) ) {s = 61;}

                         
                        input.seek(index116_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 116, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA130_eotS =
        "\u0106\uffff";
    static final String DFA130_eofS =
        "\u0106\uffff";
    static final String DFA130_minS =
        "\1\10\13\53\23\uffff\14\53\1\10\1\53\1\10\1\60\35\uffff\1\107\1"+
        "\60\1\uffff\1\107\1\60\1\uffff\1\107\1\60\1\uffff\1\107\1\60\1\uffff"+
        "\1\107\1\60\1\uffff\1\107\1\60\1\uffff\1\107\1\60\1\uffff\1\107"+
        "\1\60\1\uffff\55\0\2\uffff\12\0\26\uffff\1\0\1\uffff\1\0\33\uffff"+
        "\3\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0"+
        "\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff";
    static final String DFA130_maxS =
        "\1\u0087\1\140\1\53\1\u0084\10\106\23\uffff\11\106\1\140\1\53\1"+
        "\140\3\u0087\1\142\35\uffff\1\107\1\142\1\uffff\1\107\1\142\1\uffff"+
        "\1\107\1\142\1\uffff\1\107\1\142\1\uffff\1\107\1\142\1\uffff\1\107"+
        "\1\142\1\uffff\1\107\1\142\1\uffff\1\107\1\142\1\uffff\55\0\2\uffff"+
        "\12\0\26\uffff\1\0\1\uffff\1\0\33\uffff\3\0\2\uffff\4\0\2\uffff"+
        "\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0"+
        "\2\uffff\4\0\2\uffff";
    static final String DFA130_acceptS =
        "\14\uffff\1\2\u00c7\uffff\1\1\61\uffff";
    static final String DFA130_specialS =
        "\144\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\2\uffff\1\55\1\56\1\57\1\60"+
        "\1\61\1\62\1\63\1\64\1\65\1\66\26\uffff\1\67\1\uffff\1\70\33\uffff"+
        "\1\71\1\72\1\73\2\uffff\1\74\1\75\1\76\1\77\2\uffff\1\100\1\101"+
        "\1\102\1\103\2\uffff\1\104\1\105\1\106\1\107\2\uffff\1\110\1\111"+
        "\1\112\1\113\2\uffff\1\114\1\115\1\116\1\117\2\uffff\1\120\1\121"+
        "\1\122\1\123\2\uffff\1\124\1\125\1\126\1\127\2\uffff\1\130\1\131"+
        "\1\132\1\133\2\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\14\20\uffff\1\14\11\uffff\2\14\6\uffff\1\3\4\uffff\1\14\10"+
            "\uffff\1\1\13\uffff\1\14\11\uffff\1\4\1\5\1\6\1\7\1\10\1\11"+
            "\1\12\1\13\1\uffff\2\14\2\uffff\4\14\1\2\36\uffff\2\14\2\uffff"+
            "\5\14",
            "\1\37\15\uffff\1\50\25\uffff\1\40\1\41\1\42\1\43\1\44\1\45"+
            "\1\46\1\47\11\uffff\1\51",
            "\1\52",
            "\1\56\4\uffff\1\14\2\uffff\1\54\1\14\11\uffff\1\53\3\14\4\uffff"+
            "\1\55\2\uffff\1\14\4\uffff\1\14\10\uffff\1\14\1\uffff\1\14\27"+
            "\uffff\24\14",
            "\1\115\7\uffff\1\14\22\uffff\1\114",
            "\1\120\7\uffff\1\14\22\uffff\1\117",
            "\1\123\7\uffff\1\14\22\uffff\1\122",
            "\1\126\7\uffff\1\14\22\uffff\1\125",
            "\1\131\7\uffff\1\14\22\uffff\1\130",
            "\1\134\7\uffff\1\14\22\uffff\1\133",
            "\1\137\7\uffff\1\14\22\uffff\1\136",
            "\1\142\7\uffff\1\14\22\uffff\1\141",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\147\7\uffff\1\145\12\uffff\1\144\7\uffff\1\146",
            "\1\151\32\uffff\1\150",
            "\1\153\32\uffff\1\152",
            "\1\155\32\uffff\1\154",
            "\1\157\32\uffff\1\156",
            "\1\161\32\uffff\1\160",
            "\1\163\32\uffff\1\162",
            "\1\165\32\uffff\1\164",
            "\1\167\32\uffff\1\166",
            "\1\170\15\uffff\1\u0081\25\uffff\1\171\1\172\1\173\1\174\1"+
            "\175\1\176\1\177\1\u0080\11\uffff\1\u0082",
            "\1\u0083",
            "\1\u0086\7\uffff\1\u0084\5\uffff\1\u008f\25\uffff\1\u0087\1"+
            "\u0088\1\u0089\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\2\uffff"+
            "\1\u0085\6\uffff\1\u0090",
            "\1\14\20\uffff\1\14\11\uffff\2\14\6\uffff\1\u0093\22\uffff"+
            "\1\14\6\uffff\1\14\3\uffff\1\14\5\uffff\1\u0094\1\u0095\1\u0096"+
            "\1\u0097\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c\2\14\2\uffff"+
            "\4\14\37\uffff\2\14\2\uffff\5\14",
            "\1\u00b3\17\uffff\1\14\2\uffff\1\14\31\uffff\1\14\3\uffff\1"+
            "\14\52\uffff\1\14",
            "\1\14\20\uffff\1\14\11\uffff\2\14\6\uffff\1\14\31\uffff\1\14"+
            "\1\uffff\1\u00b5\7\uffff\10\14\1\uffff\2\14\2\uffff\4\14\37"+
            "\uffff\2\14\2\uffff\5\14",
            "\1\14\16\uffff\1\u00d3\6\uffff\1\u00d1\2\uffff\1\u00d2\30\uffff"+
            "\1\u00d4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00d6",
            "\1\14\16\uffff\1\u00d9\6\uffff\1\u00d7\2\uffff\1\u00d8\30\uffff"+
            "\1\u00d4",
            "",
            "\1\u00dc",
            "\1\14\16\uffff\1\u00df\6\uffff\1\u00dd\2\uffff\1\u00de\30\uffff"+
            "\1\u00d4",
            "",
            "\1\u00e2",
            "\1\14\16\uffff\1\u00e5\6\uffff\1\u00e3\2\uffff\1\u00e4\30\uffff"+
            "\1\u00d4",
            "",
            "\1\u00e8",
            "\1\14\16\uffff\1\u00eb\6\uffff\1\u00e9\2\uffff\1\u00ea\30\uffff"+
            "\1\u00d4",
            "",
            "\1\u00ee",
            "\1\14\16\uffff\1\u00f1\6\uffff\1\u00ef\2\uffff\1\u00f0\30\uffff"+
            "\1\u00d4",
            "",
            "\1\u00f4",
            "\1\14\16\uffff\1\u00f7\6\uffff\1\u00f5\2\uffff\1\u00f6\30\uffff"+
            "\1\u00d4",
            "",
            "\1\u00fa",
            "\1\14\16\uffff\1\u00fd\6\uffff\1\u00fb\2\uffff\1\u00fc\30\uffff"+
            "\1\u00d4",
            "",
            "\1\u0100",
            "\1\14\16\uffff\1\u0103\6\uffff\1\u0101\2\uffff\1\u0102\30\uffff"+
            "\1\u00d4",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "1399:1: forControl returns [ForControl element] options {k=3; } : (enh= enhancedForControl | (in= forInit )? ';' (e= expression )? ';' (u= forUpdate )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA130_100 = input.LA(1);

                         
                        int index130_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_100);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA130_101 = input.LA(1);

                         
                        int index130_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_101);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA130_102 = input.LA(1);

                         
                        int index130_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_102);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA130_103 = input.LA(1);

                         
                        int index130_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_103);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA130_104 = input.LA(1);

                         
                        int index130_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_104);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA130_105 = input.LA(1);

                         
                        int index130_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_105);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA130_106 = input.LA(1);

                         
                        int index130_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_106);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA130_107 = input.LA(1);

                         
                        int index130_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_107);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA130_108 = input.LA(1);

                         
                        int index130_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_108);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA130_109 = input.LA(1);

                         
                        int index130_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_109);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA130_110 = input.LA(1);

                         
                        int index130_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_110);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA130_111 = input.LA(1);

                         
                        int index130_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_111);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA130_112 = input.LA(1);

                         
                        int index130_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_112);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA130_113 = input.LA(1);

                         
                        int index130_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_113);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA130_114 = input.LA(1);

                         
                        int index130_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_114);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA130_115 = input.LA(1);

                         
                        int index130_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_115);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA130_116 = input.LA(1);

                         
                        int index130_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_116);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA130_117 = input.LA(1);

                         
                        int index130_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_117);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA130_118 = input.LA(1);

                         
                        int index130_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_118);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA130_119 = input.LA(1);

                         
                        int index130_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_119);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA130_120 = input.LA(1);

                         
                        int index130_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_120);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA130_121 = input.LA(1);

                         
                        int index130_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_121);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA130_122 = input.LA(1);

                         
                        int index130_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_122);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA130_123 = input.LA(1);

                         
                        int index130_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_123);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA130_124 = input.LA(1);

                         
                        int index130_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_124);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA130_125 = input.LA(1);

                         
                        int index130_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_125);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA130_126 = input.LA(1);

                         
                        int index130_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_126);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA130_127 = input.LA(1);

                         
                        int index130_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_127);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA130_128 = input.LA(1);

                         
                        int index130_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_128);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA130_129 = input.LA(1);

                         
                        int index130_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_129);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA130_130 = input.LA(1);

                         
                        int index130_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_130);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA130_131 = input.LA(1);

                         
                        int index130_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_131);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA130_132 = input.LA(1);

                         
                        int index130_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_132);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA130_133 = input.LA(1);

                         
                        int index130_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_133);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA130_134 = input.LA(1);

                         
                        int index130_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_134);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA130_135 = input.LA(1);

                         
                        int index130_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_135);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA130_136 = input.LA(1);

                         
                        int index130_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_136);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA130_137 = input.LA(1);

                         
                        int index130_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_137);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA130_138 = input.LA(1);

                         
                        int index130_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_138);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA130_139 = input.LA(1);

                         
                        int index130_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_139);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA130_140 = input.LA(1);

                         
                        int index130_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_140);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA130_141 = input.LA(1);

                         
                        int index130_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_141);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA130_142 = input.LA(1);

                         
                        int index130_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_142);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA130_143 = input.LA(1);

                         
                        int index130_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_143);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA130_144 = input.LA(1);

                         
                        int index130_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_144);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA130_147 = input.LA(1);

                         
                        int index130_147 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_147);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA130_148 = input.LA(1);

                         
                        int index130_148 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_148);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA130_149 = input.LA(1);

                         
                        int index130_149 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_149);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA130_150 = input.LA(1);

                         
                        int index130_150 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_150);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA130_151 = input.LA(1);

                         
                        int index130_151 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_151);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA130_152 = input.LA(1);

                         
                        int index130_152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_152);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA130_153 = input.LA(1);

                         
                        int index130_153 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_153);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA130_154 = input.LA(1);

                         
                        int index130_154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_154);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA130_155 = input.LA(1);

                         
                        int index130_155 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_155);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA130_156 = input.LA(1);

                         
                        int index130_156 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_156);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA130_179 = input.LA(1);

                         
                        int index130_179 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_179);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA130_181 = input.LA(1);

                         
                        int index130_181 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_181);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA130_209 = input.LA(1);

                         
                        int index130_209 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_209);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA130_210 = input.LA(1);

                         
                        int index130_210 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_210);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA130_211 = input.LA(1);

                         
                        int index130_211 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_211);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA130_214 = input.LA(1);

                         
                        int index130_214 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_214);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA130_215 = input.LA(1);

                         
                        int index130_215 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_215);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA130_216 = input.LA(1);

                         
                        int index130_216 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_216);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA130_217 = input.LA(1);

                         
                        int index130_217 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_217);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA130_220 = input.LA(1);

                         
                        int index130_220 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_220);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA130_221 = input.LA(1);

                         
                        int index130_221 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_221);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA130_222 = input.LA(1);

                         
                        int index130_222 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_222);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA130_223 = input.LA(1);

                         
                        int index130_223 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_223);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA130_226 = input.LA(1);

                         
                        int index130_226 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_226);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA130_227 = input.LA(1);

                         
                        int index130_227 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_227);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA130_228 = input.LA(1);

                         
                        int index130_228 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_228);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA130_229 = input.LA(1);

                         
                        int index130_229 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_229);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA130_232 = input.LA(1);

                         
                        int index130_232 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_232);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA130_233 = input.LA(1);

                         
                        int index130_233 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_233);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA130_234 = input.LA(1);

                         
                        int index130_234 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_234);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA130_235 = input.LA(1);

                         
                        int index130_235 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_235);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA130_238 = input.LA(1);

                         
                        int index130_238 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_238);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA130_239 = input.LA(1);

                         
                        int index130_239 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_239);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA130_240 = input.LA(1);

                         
                        int index130_240 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_240);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA130_241 = input.LA(1);

                         
                        int index130_241 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_241);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA130_244 = input.LA(1);

                         
                        int index130_244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_244);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA130_245 = input.LA(1);

                         
                        int index130_245 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_245);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA130_246 = input.LA(1);

                         
                        int index130_246 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_246);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA130_247 = input.LA(1);

                         
                        int index130_247 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_247);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA130_250 = input.LA(1);

                         
                        int index130_250 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_250);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA130_251 = input.LA(1);

                         
                        int index130_251 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_251);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA130_252 = input.LA(1);

                         
                        int index130_252 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_252);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA130_253 = input.LA(1);

                         
                        int index130_253 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_253);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA130_256 = input.LA(1);

                         
                        int index130_256 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_256);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA130_257 = input.LA(1);

                         
                        int index130_257 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_257);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA130_258 = input.LA(1);

                         
                        int index130_258 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_258);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA130_259 = input.LA(1);

                         
                        int index130_259 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_JavaP()) ) {s = 212;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_259);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA131_eotS =
        "\36\uffff";
    static final String DFA131_eofS =
        "\36\uffff";
    static final String DFA131_minS =
        "\1\10\2\uffff\11\0\22\uffff";
    static final String DFA131_maxS =
        "\1\u0087\2\uffff\11\0\22\uffff";
    static final String DFA131_acceptS =
        "\1\uffff\1\1\12\uffff\1\2\21\uffff";
    static final String DFA131_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\22\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\14\20\uffff\1\14\11\uffff\2\14\6\uffff\1\3\15\uffff\1\1\13"+
            "\uffff\1\14\11\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff"+
            "\2\14\2\uffff\4\14\1\1\36\uffff\2\14\2\uffff\5\14",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "1406:1: forInit returns [ForInit element] : (local= localVariableDeclaration | el= expressionList );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA131_3 = input.LA(1);

                         
                        int index131_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA131_4 = input.LA(1);

                         
                        int index131_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA131_5 = input.LA(1);

                         
                        int index131_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA131_6 = input.LA(1);

                         
                        int index131_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA131_7 = input.LA(1);

                         
                        int index131_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA131_8 = input.LA(1);

                         
                        int index131_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA131_9 = input.LA(1);

                         
                        int index131_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA131_10 = input.LA(1);

                         
                        int index131_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA131_11 = input.LA(1);

                         
                        int index131_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA133_eotS =
        "\16\uffff";
    static final String DFA133_eofS =
        "\1\14\15\uffff";
    static final String DFA133_minS =
        "\1\60\13\0\2\uffff";
    static final String DFA133_maxS =
        "\1\170\13\0\2\uffff";
    static final String DFA133_acceptS =
        "\14\uffff\1\2\1\1";
    static final String DFA133_specialS =
        "\1\uffff\1\10\1\6\1\3\1\0\1\11\1\7\1\4\1\1\1\12\1\2\1\5\2\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\14\15\uffff\1\12\1\14\1\13\2\uffff\1\14\3\uffff\1\14\1\uffff"+
            "\1\1\20\uffff\1\14\7\uffff\1\14\16\uffff\1\2\1\3\1\4\1\5\1\6"+
            "\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "1455:63: (op= assignmentOperator exx= expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA133_4 = input.LA(1);

                         
                        int index133_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index133_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA133_8 = input.LA(1);

                         
                        int index133_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index133_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA133_10 = input.LA(1);

                         
                        int index133_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index133_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA133_3 = input.LA(1);

                         
                        int index133_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index133_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA133_7 = input.LA(1);

                         
                        int index133_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index133_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA133_11 = input.LA(1);

                         
                        int index133_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index133_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA133_2 = input.LA(1);

                         
                        int index133_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index133_2);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA133_6 = input.LA(1);

                         
                        int index133_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index133_6);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA133_1 = input.LA(1);

                         
                        int index133_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index133_1);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA133_5 = input.LA(1);

                         
                        int index133_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index133_5);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA133_9 = input.LA(1);

                         
                        int index133_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index133_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA134_eotS =
        "\17\uffff";
    static final String DFA134_eofS =
        "\17\uffff";
    static final String DFA134_minS =
        "\1\76\12\uffff\2\100\2\uffff";
    static final String DFA134_maxS =
        "\1\170\12\uffff\1\100\1\111\2\uffff";
    static final String DFA134_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13"+
        "\1\14";
    static final String DFA134_specialS =
        "\1\0\13\uffff\1\1\2\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\12\1\uffff\1\13\10\uffff\1\1\47\uffff\1\2\1\3\1\4\1\5\1\6"+
            "\1\7\1\10\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14",
            "\1\15\10\uffff\1\16",
            "",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "1469:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}? | ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? | ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA134_0 = input.LA(1);

                         
                        int index134_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA134_0==73) ) {s = 1;}

                        else if ( (LA134_0==113) ) {s = 2;}

                        else if ( (LA134_0==114) ) {s = 3;}

                        else if ( (LA134_0==115) ) {s = 4;}

                        else if ( (LA134_0==116) ) {s = 5;}

                        else if ( (LA134_0==117) ) {s = 6;}

                        else if ( (LA134_0==118) ) {s = 7;}

                        else if ( (LA134_0==119) ) {s = 8;}

                        else if ( (LA134_0==120) ) {s = 9;}

                        else if ( (LA134_0==62) && (synpred193_JavaP())) {s = 10;}

                        else if ( (LA134_0==64) ) {s = 11;}

                         
                        input.seek(index134_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA134_12 = input.LA(1);

                         
                        int index134_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA134_12==64) && (synpred194_JavaP())) {s = 13;}

                        else if ( (LA134_12==73) && (synpred195_JavaP())) {s = 14;}

                         
                        input.seek(index134_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA147_eotS =
        "\40\uffff";
    static final String DFA147_eofS =
        "\40\uffff";
    static final String DFA147_minS =
        "\1\76\1\uffff\1\100\1\10\34\uffff";
    static final String DFA147_maxS =
        "\1\100\1\uffff\1\100\1\u0087\34\uffff";
    static final String DFA147_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\33\3";
    static final String DFA147_specialS =
        "\1\1\2\uffff\1\0\34\uffff}>";
    static final String[] DFA147_transitionS = {
            "\1\1\1\uffff\1\2",
            "",
            "\1\3",
            "\1\16\20\uffff\1\17\11\uffff\1\20\1\21\6\uffff\1\26\24\uffff"+
            "\1\4\4\uffff\1\27\11\uffff\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
            "\1\37\1\uffff\1\15\1\13\2\uffff\1\14\1\24\1\22\1\23\37\uffff"+
            "\1\5\1\6\2\uffff\1\7\1\10\1\11\1\12\1\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "1619:1: shiftOp : ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA147_3 = input.LA(1);

                         
                        int index147_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_3==64) && (synpred211_JavaP())) {s = 4;}

                        else if ( (LA147_3==127) && (synpred212_JavaP())) {s = 5;}

                        else if ( (LA147_3==128) && (synpred212_JavaP())) {s = 6;}

                        else if ( (LA147_3==131) && (synpred212_JavaP())) {s = 7;}

                        else if ( (LA147_3==132) && (synpred212_JavaP())) {s = 8;}

                        else if ( (LA147_3==133) && (synpred212_JavaP())) {s = 9;}

                        else if ( (LA147_3==134) && (synpred212_JavaP())) {s = 10;}

                        else if ( (LA147_3==89) && (synpred212_JavaP())) {s = 11;}

                        else if ( (LA147_3==92) && (synpred212_JavaP())) {s = 12;}

                        else if ( (LA147_3==88) && (synpred212_JavaP())) {s = 13;}

                        else if ( (LA147_3==IntegerLiteral) && (synpred212_JavaP())) {s = 14;}

                        else if ( (LA147_3==FloatingPointLiteral) && (synpred212_JavaP())) {s = 15;}

                        else if ( (LA147_3==CharacterLiteral) && (synpred212_JavaP())) {s = 16;}

                        else if ( (LA147_3==StringLiteral) && (synpred212_JavaP())) {s = 17;}

                        else if ( (LA147_3==94) && (synpred212_JavaP())) {s = 18;}

                        else if ( (LA147_3==95) && (synpred212_JavaP())) {s = 19;}

                        else if ( (LA147_3==93) && (synpred212_JavaP())) {s = 20;}

                        else if ( (LA147_3==135) && (synpred212_JavaP())) {s = 21;}

                        else if ( (LA147_3==Identifier) && (synpred212_JavaP())) {s = 22;}

                        else if ( (LA147_3==69) && (synpred212_JavaP())) {s = 23;}

                        else if ( (LA147_3==79) && (synpred212_JavaP())) {s = 24;}

                        else if ( (LA147_3==80) && (synpred212_JavaP())) {s = 25;}

                        else if ( (LA147_3==81) && (synpred212_JavaP())) {s = 26;}

                        else if ( (LA147_3==82) && (synpred212_JavaP())) {s = 27;}

                        else if ( (LA147_3==83) && (synpred212_JavaP())) {s = 28;}

                        else if ( (LA147_3==84) && (synpred212_JavaP())) {s = 29;}

                        else if ( (LA147_3==85) && (synpred212_JavaP())) {s = 30;}

                        else if ( (LA147_3==86) && (synpred212_JavaP())) {s = 31;}

                         
                        input.seek(index147_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA147_0 = input.LA(1);

                         
                        int index147_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_0==62) && (synpred210_JavaP())) {s = 1;}

                        else if ( (LA147_0==64) ) {s = 2;}

                         
                        input.seek(index147_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 147, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA155_eotS =
        "\31\uffff";
    static final String DFA155_eofS =
        "\31\uffff";
    static final String DFA155_minS =
        "\1\10\2\uffff\1\0\25\uffff";
    static final String DFA155_maxS =
        "\1\u0087\2\uffff\1\0\25\uffff";
    static final String DFA155_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\23\uffff\1\3";
    static final String DFA155_specialS =
        "\3\uffff\1\0\25\uffff}>";
    static final String[] DFA155_transitionS = {
            "\1\4\20\uffff\1\4\11\uffff\2\4\6\uffff\1\4\31\uffff\1\4\11\uffff"+
            "\10\4\1\uffff\1\4\1\3\2\uffff\4\4\45\uffff\1\1\1\2\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "1670:1: unaryExpressionNotPlusMinus returns [Expression element] : (a= '~' ex= unaryExpression | b= '!' exx= unaryExpression | castex= castExpression | prim= primary (sel= selector )* (c= '++' | d= '--' )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_3 = input.LA(1);

                         
                        int index155_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_JavaP()) ) {s = 24;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index155_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA159_eotS =
        "\27\uffff";
    static final String DFA159_eofS =
        "\27\uffff";
    static final String DFA159_minS =
        "\1\10\13\uffff\1\0\12\uffff";
    static final String DFA159_maxS =
        "\1\u0087\13\uffff\1\0\12\uffff";
    static final String DFA159_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\6\uffff\1\5\1\uffff\1\7\1\10\7\uffff\1"+
        "\6";
    static final String DFA159_specialS =
        "\14\uffff\1\0\12\uffff}>";
    static final String[] DFA159_transitionS = {
            "\1\4\20\uffff\1\4\11\uffff\2\4\6\uffff\1\14\31\uffff\1\15\11"+
            "\uffff\10\16\1\uffff\1\3\1\1\2\uffff\1\2\3\4\47\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "1759:1: primary returns [Expression element] : (parex= parExpression | rubex= identifierSuffixRubbush | skw= 'super' supsuf= superSuffix | nt= nonTargetPrimary | nkw= 'new' cr= creator | morerubex= moreidentifierRuleSuffixRubbish | vt= voidType '.' clkw= 'class' | tref= type '.' clkww= 'class' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_12 = input.LA(1);

                         
                        int index159_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_JavaP()) ) {s = 22;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index159_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA162_eotS =
        "\55\uffff";
    static final String DFA162_eofS =
        "\1\4\54\uffff";
    static final String DFA162_minS =
        "\1\60\1\0\1\uffff\1\0\51\uffff";
    static final String DFA162_maxS =
        "\1\u0084\1\0\1\uffff\1\0\51\uffff";
    static final String DFA162_acceptS =
        "\2\uffff\1\3\1\uffff\1\11\41\uffff\1\1\1\2\1\4\1\5\1\6\1\7\1\10";
    static final String DFA162_specialS =
        "\1\uffff\1\0\1\uffff\1\1\51\uffff}>";
    static final String[] DFA162_transitionS = {
            "\1\4\2\uffff\1\3\1\4\11\uffff\4\4\1\uffff\1\4\2\uffff\1\1\1"+
            "\4\1\uffff\1\4\4\uffff\1\4\10\uffff\1\4\1\uffff\1\2\1\4\7\uffff"+
            "\1\4\16\uffff\24\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA162_eot = DFA.unpackEncodedString(DFA162_eotS);
    static final short[] DFA162_eof = DFA.unpackEncodedString(DFA162_eofS);
    static final char[] DFA162_min = DFA.unpackEncodedStringToUnsignedChars(DFA162_minS);
    static final char[] DFA162_max = DFA.unpackEncodedStringToUnsignedChars(DFA162_maxS);
    static final short[] DFA162_accept = DFA.unpackEncodedString(DFA162_acceptS);
    static final short[] DFA162_special = DFA.unpackEncodedString(DFA162_specialS);
    static final short[][] DFA162_transition;

    static {
        int numStates = DFA162_transitionS.length;
        DFA162_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA162_transition[i] = DFA.unpackEncodedString(DFA162_transitionS[i]);
        }
    }

    class DFA162 extends DFA {

        public DFA162(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = DFA162_eot;
            this.eof = DFA162_eof;
            this.min = DFA162_min;
            this.max = DFA162_max;
            this.accept = DFA162_accept;
            this.special = DFA162_special;
            this.transition = DFA162_transition;
        }
        public String getDescription() {
            return "1825:1: ( ( '[' ']' )+ '.' 'class' | arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' clkw= 'class' | '.' gen= explicitGenericInvocation | '.' thiskw= 'this' | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA162_1 = input.LA(1);

                         
                        int index162_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_JavaP()) ) {s = 38;}

                        else if ( (synpred244_JavaP()) ) {s = 39;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index162_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA162_3 = input.LA(1);

                         
                        int index162_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_JavaP()) ) {s = 40;}

                        else if ( (synpred247_JavaP()) ) {s = 41;}

                        else if ( (synpred248_JavaP()) ) {s = 42;}

                        else if ( (synpred249_JavaP()) ) {s = 43;}

                        else if ( (synpred250_JavaP()) ) {s = 44;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index162_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 162, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA164_eotS =
        "\53\uffff";
    static final String DFA164_eofS =
        "\1\4\52\uffff";
    static final String DFA164_minS =
        "\1\60\1\0\1\uffff\1\0\47\uffff";
    static final String DFA164_maxS =
        "\1\u0084\1\0\1\uffff\1\0\47\uffff";
    static final String DFA164_acceptS =
        "\2\uffff\1\2\1\uffff\1\7\41\uffff\1\1\1\3\1\4\1\5\1\6";
    static final String DFA164_specialS =
        "\1\uffff\1\0\1\uffff\1\1\47\uffff}>";
    static final String[] DFA164_transitionS = {
            "\1\4\2\uffff\1\3\1\4\11\uffff\4\4\1\uffff\1\4\2\uffff\1\1\1"+
            "\4\1\uffff\1\4\4\uffff\1\4\10\uffff\1\4\1\uffff\1\2\1\4\7\uffff"+
            "\1\4\16\uffff\24\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "1860:4: (arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' 'class' | '.' gen= explicitGenericInvocation | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA164_1 = input.LA(1);

                         
                        int index164_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_JavaP()) ) {s = 38;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index164_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA164_3 = input.LA(1);

                         
                        int index164_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_JavaP()) ) {s = 39;}

                        else if ( (synpred255_JavaP()) ) {s = 40;}

                        else if ( (synpred256_JavaP()) ) {s = 41;}

                        else if ( (synpred257_JavaP()) ) {s = 42;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index164_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA165_eotS =
        "\46\uffff";
    static final String DFA165_eofS =
        "\1\1\45\uffff";
    static final String DFA165_minS =
        "\1\60\1\uffff\1\0\43\uffff";
    static final String DFA165_maxS =
        "\1\u0084\1\uffff\1\0\43\uffff";
    static final String DFA165_acceptS =
        "\1\uffff\1\2\43\uffff\1\1";
    static final String DFA165_specialS =
        "\2\uffff\1\0\43\uffff}>";
    static final String[] DFA165_transitionS = {
            "\1\1\2\uffff\2\1\11\uffff\4\1\1\uffff\1\1\2\uffff\1\2\1\1\1"+
            "\uffff\1\1\4\uffff\1\1\10\uffff\1\1\2\uffff\1\1\7\uffff\1\1"+
            "\16\uffff\24\1",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1903:10: (open= '[' arrex= expression close= ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA165_2 = input.LA(1);

                         
                        int index165_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_JavaP()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA171_eotS =
        "\16\uffff";
    static final String DFA171_eofS =
        "\16\uffff";
    static final String DFA171_minS =
        "\1\53\1\uffff\11\0\3\uffff";
    static final String DFA171_maxS =
        "\1\126\1\uffff\11\0\3\uffff";
    static final String DFA171_acceptS =
        "\1\uffff\1\1\11\uffff\1\2\1\3\1\4";
    static final String DFA171_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\3\uffff}>";
    static final String[] DFA171_transitionS = {
            "\1\2\22\uffff\1\1\20\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA171_eot = DFA.unpackEncodedString(DFA171_eotS);
    static final short[] DFA171_eof = DFA.unpackEncodedString(DFA171_eofS);
    static final char[] DFA171_min = DFA.unpackEncodedStringToUnsignedChars(DFA171_minS);
    static final char[] DFA171_max = DFA.unpackEncodedStringToUnsignedChars(DFA171_maxS);
    static final short[] DFA171_accept = DFA.unpackEncodedString(DFA171_acceptS);
    static final short[] DFA171_special = DFA.unpackEncodedString(DFA171_specialS);
    static final short[][] DFA171_transition;

    static {
        int numStates = DFA171_transitionS.length;
        DFA171_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA171_transition[i] = DFA.unpackEncodedString(DFA171_transitionS[i]);
        }
    }

    class DFA171 extends DFA {

        public DFA171(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 171;
            this.eot = DFA171_eot;
            this.eof = DFA171_eof;
            this.min = DFA171_min;
            this.max = DFA171_max;
            this.accept = DFA171_accept;
            this.special = DFA171_special;
            this.transition = DFA171_transition;
        }
        public String getDescription() {
            return "1913:1: creator returns [Expression element] : (targs= nonWildcardTypeArguments tx= createdName (dia= '<' '>' )? restx= classCreatorRest | tt= createdName ( '[' ']' )+ init= arrayInitializer | ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )* | t= createdName (diam= '<' '>' )? rest= classCreatorRest );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA171_2 = input.LA(1);

                         
                        int index171_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_JavaP()) ) {s = 11;}

                        else if ( (synpred265_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index171_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA171_3 = input.LA(1);

                         
                        int index171_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_JavaP()) ) {s = 11;}

                        else if ( (synpred265_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index171_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA171_4 = input.LA(1);

                         
                        int index171_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_JavaP()) ) {s = 11;}

                        else if ( (synpred265_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index171_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA171_5 = input.LA(1);

                         
                        int index171_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_JavaP()) ) {s = 11;}

                        else if ( (synpred265_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index171_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA171_6 = input.LA(1);

                         
                        int index171_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_JavaP()) ) {s = 11;}

                        else if ( (synpred265_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index171_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA171_7 = input.LA(1);

                         
                        int index171_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_JavaP()) ) {s = 11;}

                        else if ( (synpred265_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index171_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA171_8 = input.LA(1);

                         
                        int index171_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_JavaP()) ) {s = 11;}

                        else if ( (synpred265_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index171_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA171_9 = input.LA(1);

                         
                        int index171_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_JavaP()) ) {s = 11;}

                        else if ( (synpred265_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index171_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA171_10 = input.LA(1);

                         
                        int index171_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_JavaP()) ) {s = 11;}

                        else if ( (synpred265_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index171_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 171, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA168_eotS =
        "\46\uffff";
    static final String DFA168_eofS =
        "\1\2\45\uffff";
    static final String DFA168_minS =
        "\1\60\1\0\44\uffff";
    static final String DFA168_maxS =
        "\1\u0084\1\0\44\uffff";
    static final String DFA168_acceptS =
        "\2\uffff\1\2\42\uffff\1\1";
    static final String DFA168_specialS =
        "\1\uffff\1\0\44\uffff}>";
    static final String[] DFA168_transitionS = {
            "\1\2\2\uffff\2\2\11\uffff\4\2\1\uffff\1\2\2\uffff\1\1\1\2\1"+
            "\uffff\1\2\4\uffff\1\2\10\uffff\1\2\2\uffff\1\2\7\uffff\1\2"+
            "\16\uffff\24\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1927:11: ( '[' exx= expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA168_1 = input.LA(1);

                         
                        int index168_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_JavaP()) ) {s = 37;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index168_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_Identifier_in_identifierRule96 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_compilationUnit126 = new BitSet(new long[]{0x0FE4808000000000L,0x0000000100000010L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit142 = new BitSet(new long[]{0x0FE7808000000002L,0x0000000100000010L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit177 = new BitSet(new long[]{0x0FE7808000000002L,0x0000000100000010L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit197 = new BitSet(new long[]{0x0FE5808000000002L,0x0000000100000010L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_compilationUnit246 = new BitSet(new long[]{0x0FE5808000000002L,0x0000000100000010L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit280 = new BitSet(new long[]{0x0FE5808000000002L,0x0000000100000010L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit335 = new BitSet(new long[]{0x0FE7808000000002L,0x0000000100000010L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit384 = new BitSet(new long[]{0x0FE7808000000002L,0x0000000100000010L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit402 = new BitSet(new long[]{0x0FE5808000000002L,0x0000000100000010L});
    public static final BitSet FOLLOW_47_in_packageDeclaration432 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_qualifiedName_in_packageDeclaration436 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_packageDeclaration438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_importDeclaration474 = new BitSet(new long[]{0x0004080000000000L});
    public static final BitSet FOLLOW_50_in_importDeclaration478 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_qualifiedName_in_importDeclaration483 = new BitSet(new long[]{0x0009000000000000L});
    public static final BitSet FOLLOW_51_in_importDeclaration505 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_52_in_importDeclaration507 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_importDeclaration535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_typeDeclaration573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceModifiers_in_classOrInterfaceDeclaration609 = new BitSet(new long[]{0x0FE4808000000000L,0x0000000100000010L});
    public static final BitSet FOLLOW_classDeclaration_in_classOrInterfaceDeclaration641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceModifier_in_classOrInterfaceModifiers735 = new BitSet(new long[]{0x07E4000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_annotation_in_classOrInterfaceModifier767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_classOrInterfaceModifier781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_classOrInterfaceModifier797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_classOrInterfaceModifier810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_classOrInterfaceModifier825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_classOrInterfaceModifier839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_classOrInterfaceModifier855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_classOrInterfaceModifier872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifiers907 = new BitSet(new long[]{0x07E4000000000002L,0x0000000100003C00L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_classDeclaration939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classDeclaration953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_normalClassDeclaration980 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_nameAndParams_in_normalClassDeclaration984 = new BitSet(new long[]{0x3000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_60_in_normalClassDeclaration999 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_type_in_normalClassDeclaration1003 = new BitSet(new long[]{0x3000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_61_in_normalClassDeclaration1032 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_typeList_in_normalClassDeclaration1036 = new BitSet(new long[]{0x3000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classBody_in_normalClassDeclaration1065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createClassHereBecauseANTLRisAnnoying_in_nameAndParams1102 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_nameAndParams1109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_createClassHereBecauseANTLRisAnnoying1133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_typeParameters1161 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters1165 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_63_in_typeParameters1169 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters1173 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_typeParameters1178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_typeParameter1207 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_60_in_typeParameter1213 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_typeBound_in_typeParameter1217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeBound1259 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_typeBound1282 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_type_in_typeBound1286 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_in_enumDeclaration1336 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_enumDeclaration1340 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_61_in_enumDeclaration1363 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration1367 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration1439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_enumBody1469 = new BitSet(new long[]{0x8001080000000000L,0x0000000100000008L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody1474 = new BitSet(new long[]{0x8001000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_63_in_enumBody1492 = new BitSet(new long[]{0x0001000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody1498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_enumBody1504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants1529 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_enumConstants1534 = new BitSet(new long[]{0x0000080000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants1538 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_annotations_in_enumConstant1564 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_enumConstant1569 = new BitSet(new long[]{0x3000000000000002L,0x0000000002000004L});
    public static final BitSet FOLLOW_arguments_in_enumConstant1576 = new BitSet(new long[]{0x3000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_classBody_in_enumConstant1585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_enumBodyDeclarations1612 = new BitSet(new long[]{0x07E5000000000002L,0x0000000100003C04L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations1619 = new BitSet(new long[]{0x07E5000000000002L,0x0000000100003C04L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration1652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration1666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_normalInterfaceDeclaration1693 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_normalInterfaceDeclaration1697 = new BitSet(new long[]{0x7000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration1713 = new BitSet(new long[]{0x3000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_60_in_normalInterfaceDeclaration1730 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration1734 = new BitSet(new long[]{0x3000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classBody_in_normalInterfaceDeclaration1772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList1810 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_typeList1814 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_type_in_typeList1818 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_66_in_classBody1845 = new BitSet(new long[]{0x07E5000000000000L,0x0000000100003C0CL});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody1852 = new BitSet(new long[]{0x07E5000000000000L,0x0000000100003C0CL});
    public static final BitSet FOLLOW_67_in_classBody1858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_interfaceBody1881 = new BitSet(new long[]{0x07E5000000000000L,0x0000000100003C0CL});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody1900 = new BitSet(new long[]{0x07E5000000000000L,0x0000000100003C0CL});
    public static final BitSet FOLLOW_67_in_interfaceBody1946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_classBodyDeclaration1979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_classBodyDeclaration1993 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration1998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_classBodyDeclaration2012 = new BitSet(new long[]{0x4FE4888000000000L,0x00000001007F8030L});
    public static final BitSet FOLLOW_memberDecl_in_classBodyDeclaration2016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericMethodOrConstructorDecl_in_memberDecl2050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberDeclaration_in_memberDecl2064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidMethodDeclaration_in_memberDecl2078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructorDeclaration_in_memberDecl2092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_memberDecl2106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_memberDecl2120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidType_in_voidMethodDeclaration2155 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_voidMethodDeclaration2159 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_voidMethodDeclaration2169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_voidType2198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_constructorDeclaration2234 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_constructorDeclaration2263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_memberDeclaration2285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_memberDeclaration2299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_genericMethodOrConstructorDecl2326 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8020L});
    public static final BitSet FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl2330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericMethodOrConstructorRest2371 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_69_in_genericMethodOrConstructorRest2376 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_genericMethodOrConstructorRest2383 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest2395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_genericMethodOrConstructorRest2407 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest2419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_methodDeclaration2449 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_methodDeclaration2453 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_methodDeclaration2465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_fieldDeclaration2490 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_fieldDeclaration2496 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_fieldDeclaration2500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_interfaceBodyDeclaration2525 = new BitSet(new long[]{0x4FE4888000000000L,0x00000001007F8030L});
    public static final BitSet FOLLOW_interfaceMemberDecl_in_interfaceBodyDeclaration2529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_interfaceBodyDeclaration2541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl2566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl2580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaration_in_interfaceMemberDecl2594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_interfaceMemberDecl2608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceMemberDecl2622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidType_in_voidInterfaceMethodDeclaration2654 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_voidInterfaceMethodDeclaration2658 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaratorRest_in_voidInterfaceMethodDeclaration2669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceConstant_in_interfaceMethodOrFieldDecl2695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethod_in_interfaceMethodOrFieldDecl2709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceConstant2737 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_constantDeclarator_in_interfaceConstant2743 = new BitSet(new long[]{0x8001000000000000L});
    public static final BitSet FOLLOW_63_in_interfaceConstant2747 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_constantDeclarator_in_interfaceConstant2751 = new BitSet(new long[]{0x8001000000000000L});
    public static final BitSet FOLLOW_48_in_interfaceConstant2757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceMethod2782 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_interfaceMethod2786 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethod2798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaratorRest2821 = new BitSet(new long[]{0x0005000000000000L,0x0000000000000144L});
    public static final BitSet FOLLOW_70_in_methodDeclaratorRest2845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_methodDeclaratorRest2847 = new BitSet(new long[]{0x0005000000000000L,0x0000000000000144L});
    public static final BitSet FOLLOW_72_in_methodDeclaratorRest2874 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_methodDeclaratorRest2878 = new BitSet(new long[]{0x0005000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_methodBody_in_methodDeclaratorRest2898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_methodDeclaratorRest2914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidMethodDeclaratorRest2957 = new BitSet(new long[]{0x0005000000000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_72_in_voidMethodDeclaratorRest2973 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_voidMethodDeclaratorRest2977 = new BitSet(new long[]{0x0005000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_methodBody_in_voidMethodDeclaratorRest2997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_voidMethodDeclaratorRest3013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest3060 = new BitSet(new long[]{0x0001000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_70_in_interfaceMethodDeclaratorRest3072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_interfaceMethodDeclaratorRest3074 = new BitSet(new long[]{0x0001000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_72_in_interfaceMethodDeclaratorRest3100 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_interfaceMethodDeclaratorRest3104 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_interfaceMethodDeclaratorRest3110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceGenericMethodDecl3142 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8020L});
    public static final BitSet FOLLOW_type_in_interfaceGenericMethodDecl3145 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_69_in_interfaceGenericMethodDecl3149 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_interfaceGenericMethodDecl3152 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl3162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest3183 = new BitSet(new long[]{0x0001000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_voidInterfaceMethodDeclaratorRest3193 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_voidInterfaceMethodDeclaratorRest3197 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_voidInterfaceMethodDeclaratorRest3209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_constructorDeclaratorRest3230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_72_in_constructorDeclaratorRest3239 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_constructorDeclaratorRest3243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_constructorBody_in_constructorDeclaratorRest3256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_constantDeclarator3291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000240L});
    public static final BitSet FOLLOW_70_in_constantDeclarator3295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_constantDeclarator3297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000240L});
    public static final BitSet FOLLOW_73_in_constantDeclarator3303 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_variableInitializer_in_constantDeclarator3307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators3342 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_variableDeclarators3346 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators3350 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_variableDeclarator3383 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_variableDeclarator3401 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclarator3405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_variableDeclaratorId3440 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_variableDeclaratorId3443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_variableDeclaratorId3445 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer3476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer3490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_arrayInitializer3515 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F802CL,0x00000000000000F9L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer3522 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_63_in_arrayInitializer3526 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer3530 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_63_in_arrayInitializer3536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_arrayInitializer3543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceModifier_in_modifier3574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_modifier3586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_modifier3598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_modifier3610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_modifier3622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_enumConstantName3649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_typeName3676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_type3706 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_type3709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_type3711 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_primitiveType_in_type3733 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_type3736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_type3738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_type_in_possibleUnionType3767 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_possibleUnionType3775 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_type_in_possibleUnionType3779 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L});
    public static final BitSet FOLLOW_identifierRule_in_classOrInterfaceType3816 = new BitSet(new long[]{0x4008000000000002L});
    public static final BitSet FOLLOW_typeArguments_in_classOrInterfaceType3843 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_51_in_classOrInterfaceType3870 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_classOrInterfaceType3874 = new BitSet(new long[]{0x4008000000000002L});
    public static final BitSet FOLLOW_typeArguments_in_classOrInterfaceType3901 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_79_in_primitiveType3954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_primitiveType3966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_primitiveType3978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_primitiveType3990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_primitiveType4002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_primitiveType4014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_primitiveType4026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_primitiveType4038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_variableModifier4063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_variableModifier4077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_typeArguments4106 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF8000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments4118 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_63_in_typeArguments4131 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF8000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments4135 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_typeArguments4149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument4178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_typeArgument4190 = new BitSet(new long[]{0x1000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_60_in_typeArgument4225 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_88_in_typeArgument4229 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_type_in_typeArgument4245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList4306 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_qualifiedNameList4311 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList4315 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_89_in_formalParameters4346 = new BitSet(new long[]{0x0200080000000000L,0x00000001047F8000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters4351 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_formalParameters4357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_formalParameterDecls4382 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls4386 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDecls4390 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_formalParameterDecls4401 = new BitSet(new long[]{0x0200080000000000L,0x00000001007F8000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameterDecls4405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_formalParameterDecls4431 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls4435 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_91_in_formalParameterDecls4437 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDecls4441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_methodBody4477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_constructorBody4502 = new BitSet(new long[]{0x4FE5899802000100L,0x80007DE9F37F883CL,0x00000000000000F9L});
    public static final BitSet FOLLOW_explicitConstructorInvocation_in_constructorBody4518 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DE9F37F883CL,0x00000000000000F9L});
    public static final BitSet FOLLOW_blockStatement_in_constructorBody4536 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DE9F37F883CL,0x00000000000000F9L});
    public static final BitSet FOLLOW_67_in_constructorBody4542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4569 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_explicitConstructorInvocation4572 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_arguments_in_explicitConstructorInvocation4576 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_explicitConstructorInvocation4578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_explicitConstructorInvocation4598 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_explicitConstructorInvocation4600 = new BitSet(new long[]{0x4000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4606 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_explicitConstructorInvocation4609 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_arguments_in_explicitConstructorInvocation4613 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_explicitConstructorInvocation4615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_qualifiedName4653 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_51_in_qualifiedName4657 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_qualifiedName4661 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_integerLiteral_in_literal4690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FloatingPointLiteral_in_literal4704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CharacterLiteral_in_literal4718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal4732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal4746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_literal4758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IntegerLiteral_in_integerLiteral4791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_booleanLiteral4816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_booleanLiteral4828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotations4862 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_96_in_annotation4889 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_annotationName_in_annotation4893 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_89_in_annotation4899 = new BitSet(new long[]{0x0000081802000100L,0x80000001F77F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation4903 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_elementValue_in_annotation4907 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_annotation4912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_annotationName4932 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_51_in_annotationName4935 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_annotationName4937 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs4958 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_elementValuePairs4961 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs4963 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_elementValuePair4984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_elementValuePair4986 = new BitSet(new long[]{0x0000081802000100L,0x80000001F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair4988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue5007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue5017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue5027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_elementValueArrayInitializer5046 = new BitSet(new long[]{0x8000081802000100L,0x80000001F37F802CL,0x00000000000000F9L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer5049 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_63_in_elementValueArrayInitializer5052 = new BitSet(new long[]{0x0000081802000100L,0x80000001F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer5054 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_63_in_elementValueArrayInitializer5061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_elementValueArrayInitializer5065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_annotationTypeDeclaration5088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_annotationTypeDeclaration5090 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_annotationTypeDeclaration5094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration5126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_annotationTypeBody5155 = new BitSet(new long[]{0x07E5000000000000L,0x0000000100003C0CL});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeBody5158 = new BitSet(new long[]{0x07E5000000000000L,0x0000000100003C0CL});
    public static final BitSet FOLLOW_67_in_annotationTypeBody5162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_annotationTypeElementDeclaration5187 = new BitSet(new long[]{0x0FE4888000000000L,0x00000001007F8010L});
    public static final BitSet FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration5191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_annotationTypeElementRest5225 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest5229 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_annotationTypeElementRest5239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_annotationTypeElementRest5251 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_annotationTypeElementRest5254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_annotationTypeElementRest5267 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_annotationTypeElementRest5270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_annotationTypeElementRest5283 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_annotationTypeElementRest5287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest5300 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_annotationTypeElementRest5304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest5331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest5346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_annotationMethodRest5375 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_89_in_annotationMethodRest5377 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_annotationMethodRest5379 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_defaultValue_in_annotationMethodRest5392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_annotationConstantRest5422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_defaultValue5451 = new BitSet(new long[]{0x0000081802000100L,0x80000001F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_elementValue_in_defaultValue5453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_block5478 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DE9F37F883CL,0x00000000000000F9L});
    public static final BitSet FOLLOW_blockStatement_in_block5485 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DE9F37F883CL,0x00000000000000F9L});
    public static final BitSet FOLLOW_67_in_block5491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclarationStatement_in_blockStatement5520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_blockStatement5534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement5548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_localVariableDeclarationStatement5576 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_localVariableDeclarationStatement5580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_localVariableDeclaration5605 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration5609 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_localVariableDeclaration5615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_variableModifiers5657 = new BitSet(new long[]{0x0200000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_block_in_statement5688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_statement5700 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_statement5704 = new BitSet(new long[]{0x0001000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_statement5708 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_statement5712 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_statement5718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_statement5730 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_parExpression_in_statement5734 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DE9F37F8834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_statement_in_statement5738 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_100_in_statement5750 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DE9F37F8834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_statement_in_statement5754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_statement5779 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_89_in_statement5781 = new BitSet(new long[]{0x0201081802000100L,0x80000001F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_forControl_in_statement5785 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_statement5787 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DE9F37F8834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_statement_in_statement5791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_statement5813 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_parExpression_in_statement5817 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DE9F37F8834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_statement_in_statement5821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_statement5843 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DE9F37F8834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_statement_in_statement5847 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_102_in_statement5851 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_parExpression_in_statement5855 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_statement5857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_statement5879 = new BitSet(new long[]{0x0004000000000000L,0x0000000002000004L});
    public static final BitSet FOLLOW_resources_in_statement5883 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_statement5888 = new BitSet(new long[]{0x0000000000000002L,0x0000820000000000L});
    public static final BitSet FOLLOW_catches_in_statement5912 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_105_in_statement5916 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_statement5920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_statement5947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_statement5965 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_statement5969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_statement6005 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_parExpression_in_statement6009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_statement6033 = new BitSet(new long[]{0x0000000000000000L,0x0001000200000008L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_statement6037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_statement6040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_statement6052 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_parExpression_in_statement6056 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_statement6060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_statement6084 = new BitSet(new long[]{0x0001081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_statement6113 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_statement6119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_statement6131 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_statement6135 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_statement6155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_statement6167 = new BitSet(new long[]{0x0001080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_statement6190 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_statement6196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_statement6208 = new BitSet(new long[]{0x0001080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_statement6231 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_statement6237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_statement6247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementExpression_in_statement6261 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_statement6265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_statement6277 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_statement6279 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DE9F37F8834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_statement_in_statement6283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_resources6306 = new BitSet(new long[]{0x0200080000000000L,0x00000001007F8000L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_resources6325 = new BitSet(new long[]{0x0001000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_48_in_resources6340 = new BitSet(new long[]{0x0200080000000000L,0x00000001007F8000L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_resources6346 = new BitSet(new long[]{0x0001000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_48_in_resources6363 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_resources6373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches6405 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_catchClause6438 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_89_in_catchClause6440 = new BitSet(new long[]{0x0200080000000000L,0x00000001007F8000L});
    public static final BitSet FOLLOW_catchParameter_in_catchClause6444 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_catchClause6446 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_catchClause6450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_catchParameter6491 = new BitSet(new long[]{0x0200080000000000L,0x00000001007F8000L});
    public static final BitSet FOLLOW_possibleUnionType_in_catchParameter6495 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_catchParameter6499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_formalParameter6540 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_type_in_formalParameter6544 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameter6548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCase_in_switchBlockStatementGroups6589 = new BitSet(new long[]{0x0000000000000002L,0x0001000200000000L});
    public static final BitSet FOLLOW_switchLabel_in_switchCase6624 = new BitSet(new long[]{0x0FE5899802000102L,0x80007DE9F37F8834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_blockStatement_in_switchCase6628 = new BitSet(new long[]{0x0FE5899802000102L,0x80007DE9F37F8834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_112_in_switchLabel6656 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_constantExpression_in_switchLabel6660 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_switchLabel6662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_switchLabel6674 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_enumConstantName_in_switchLabel6678 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_switchLabel6680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_switchLabel6692 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_switchLabel6694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enhancedForControl_in_forControl6732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_forControl6746 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_forControl6749 = new BitSet(new long[]{0x0001081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_forControl6753 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_forControl6756 = new BitSet(new long[]{0x0200081802000102L,0x80000001F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_forUpdate_in_forControl6760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_forInit6792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit6806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_enhancedForControl6837 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_enhancedForControl6839 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_enhancedForControl6843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdate6870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_parExpression6907 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_parExpression6911 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_parExpression6917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList6954 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_expressionList6976 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_expressionList6980 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_expression_in_statementExpression7009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constantExpression7036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression7067 = new BitSet(new long[]{0x4000000000000002L,0x01FE000000000201L});
    public static final BitSet FOLLOW_assignmentOperator_in_expression7074 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_expression7078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_assignmentOperator7118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_assignmentOperator7128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_assignmentOperator7138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_assignmentOperator7148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_assignmentOperator7158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_assignmentOperator7168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_assignmentOperator7178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_assignmentOperator7188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_assignmentOperator7198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_assignmentOperator7219 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_62_in_assignmentOperator7223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_assignmentOperator7227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_assignmentOperator7260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_assignmentOperator7264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_assignmentOperator7268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_assignmentOperator7272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_assignmentOperator7303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_assignmentOperator7307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_assignmentOperator7311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression7350 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_conditionalExpression7355 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression7359 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_conditionalExpression7361 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression7365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression7411 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_conditionalOrExpression7417 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression7421 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7462 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_conditionalAndExpression7468 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7472 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7513 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_inclusiveOrExpression7519 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7523 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression7564 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_exclusiveOrExpression7570 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression7574 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression7612 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_andExpression7618 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression7622 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression7664 = new BitSet(new long[]{0x0000000000000002L,0x3000000000000000L});
    public static final BitSet FOLLOW_124_in_equalityExpression7682 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_125_in_equalityExpression7688 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression7695 = new BitSet(new long[]{0x0000000000000002L,0x3000000000000000L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression7737 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_instanceOfExpression7749 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression7753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression7790 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression7798 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression7802 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_62_in_relationalOp7847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_relationalOp7851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_relationalOp7880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_relationalOp7884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_relationalOp7904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_relationalOp7914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression7939 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression7947 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression7951 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_62_in_shiftOp7992 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_62_in_shiftOp7996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_shiftOp8027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_shiftOp8031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_shiftOp8035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_shiftOp8064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_shiftOp8068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression8108 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_127_in_additiveExpression8115 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_128_in_additiveExpression8121 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression8128 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression8165 = new BitSet(new long[]{0x0010000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_52_in_multiplicativeExpression8173 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_129_in_multiplicativeExpression8179 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_130_in_multiplicativeExpression8185 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression8192 = new BitSet(new long[]{0x0010000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_127_in_unaryExpression8223 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_unaryExpression8239 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_unaryExpression8255 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_unaryExpression8271 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression8289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_unaryExpressionNotPlusMinus8325 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus8331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_unaryExpressionNotPlusMinus8353 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus8359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus8381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus8395 = new BitSet(new long[]{0x0008000000000002L,0x0000000000000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus8421 = new BitSet(new long[]{0x0008000000000002L,0x0000000000000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_131_in_unaryExpressionNotPlusMinus8470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_unaryExpressionNotPlusMinus8487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_selector8526 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_selector8530 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_arguments_in_selector8551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_selector8585 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_selector8589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_selector8601 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_selector8605 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_superSuffix_in_selector8621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_selector8645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_selector8649 = new BitSet(new long[]{0x4000080000000000L});
    public static final BitSet FOLLOW_innerCreator_in_selector8653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_selector8665 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_selector8669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_selector8673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_castExpression8708 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression8712 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_castExpression8714 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression8718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_castExpression8729 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_type_in_castExpression8733 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_castExpression8735 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression8739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary8779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffixRubbush_in_primary8793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_primary8808 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_superSuffix_in_primary8822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonTargetPrimary_in_primary8844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_primary8858 = new BitSet(new long[]{0x4000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_creator_in_primary8864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moreidentifierRuleSuffixRubbish_in_primary8878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidType_in_primary8892 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_primary8894 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_primary8898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_primary8912 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_primary8914 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_primary8918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_nonTargetPrimary8947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_moreidentifierRuleSuffixRubbish8982 = new BitSet(new long[]{0x0008000000000002L,0x0000000002000040L});
    public static final BitSet FOLLOW_51_in_moreidentifierRuleSuffixRubbish9002 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_moreidentifierRuleSuffixRubbish9006 = new BitSet(new long[]{0x0008000000000002L,0x0000000002000040L});
    public static final BitSet FOLLOW_70_in_moreidentifierRuleSuffixRubbish9036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_moreidentifierRuleSuffixRubbish9038 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_51_in_moreidentifierRuleSuffixRubbish9042 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_moreidentifierRuleSuffixRubbish9044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayAccessSuffixRubbish_in_moreidentifierRuleSuffixRubbish9062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argumentsSuffixRubbish_in_moreidentifierRuleSuffixRubbish9076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_moreidentifierRuleSuffixRubbish9089 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_moreidentifierRuleSuffixRubbish9093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_moreidentifierRuleSuffixRubbish9114 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_moreidentifierRuleSuffixRubbish9118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_moreidentifierRuleSuffixRubbish9131 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_moreidentifierRuleSuffixRubbish9135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_moreidentifierRuleSuffixRubbish9155 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_moreidentifierRuleSuffixRubbish9159 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_superSuffix_in_moreidentifierRuleSuffixRubbish9175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_moreidentifierRuleSuffixRubbish9187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_moreidentifierRuleSuffixRubbish9191 = new BitSet(new long[]{0x4000080000000000L});
    public static final BitSet FOLLOW_innerCreator_in_moreidentifierRuleSuffixRubbish9195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_identifierSuffixRubbush9219 = new BitSet(new long[]{0x0008000000000002L,0x0000000002000040L});
    public static final BitSet FOLLOW_51_in_identifierSuffixRubbush9223 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_identifierSuffixRubbush9227 = new BitSet(new long[]{0x0008000000000002L,0x0000000002000040L});
    public static final BitSet FOLLOW_arrayAccessSuffixRubbish_in_identifierSuffixRubbush9251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argumentsSuffixRubbish_in_identifierSuffixRubbush9265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_identifierSuffixRubbush9277 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_identifierSuffixRubbush9279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_identifierSuffixRubbush9291 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_identifierSuffixRubbush9295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_identifierSuffixRubbush9307 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_identifierSuffixRubbush9311 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_superSuffix_in_identifierSuffixRubbush9315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_identifierSuffixRubbush9327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_identifierSuffixRubbush9331 = new BitSet(new long[]{0x4000080000000000L});
    public static final BitSet FOLLOW_innerCreator_in_identifierSuffixRubbush9335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_argumentsSuffixRubbish9362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_arrayAccessSuffixRubbish9408 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_arrayAccessSuffixRubbish9412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_arrayAccessSuffixRubbish9416 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_creator9471 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_createdName_in_creator9475 = new BitSet(new long[]{0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_62_in_creator9480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_creator9481 = new BitSet(new long[]{0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator9487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createdName_in_creator9511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_creator9529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_creator9531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_arrayInitializer_in_creator9539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createdName_in_creator9562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_creator9578 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_creator9582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_creator9584 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_creator9603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_creator9605 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_createdName_in_creator9621 = new BitSet(new long[]{0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_62_in_creator9626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_creator9627 = new BitSet(new long[]{0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator9633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_createdName9670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_createdName9684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_innerCreator9714 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_innerCreator9728 = new BitSet(new long[]{0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator9732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest9768 = new BitSet(new long[]{0x3000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest9774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation9804 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_explicitGenericInvocation9808 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocation9812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_nonWildcardTypeArguments9847 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments9851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_nonWildcardTypeArguments9854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_superSuffix9900 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_superSuffix9904 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_arguments_in_superSuffix9919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_arguments9979 = new BitSet(new long[]{0x0200081802000100L,0x80000001F77F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expressionList_in_arguments9984 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_arguments9991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_synpred5_JavaP126 = new BitSet(new long[]{0x0FE4808000000000L,0x0000000100000010L});
    public static final BitSet FOLLOW_packageDeclaration_in_synpred5_JavaP142 = new BitSet(new long[]{0x0FE7808000000002L,0x0000000100000010L});
    public static final BitSet FOLLOW_importDeclaration_in_synpred5_JavaP177 = new BitSet(new long[]{0x0FE7808000000002L,0x0000000100000010L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred5_JavaP197 = new BitSet(new long[]{0x0FE5808000000002L,0x0000000100000010L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred5_JavaP246 = new BitSet(new long[]{0x0FE5808000000002L,0x0000000100000010L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred5_JavaP280 = new BitSet(new long[]{0x0FE5808000000002L,0x0000000100000010L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred52_JavaP2285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceConstant_in_synpred60_JavaP2695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_synpred106_JavaP4382 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_type_in_synpred106_JavaP4386 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_synpred106_JavaP4390 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_synpred106_JavaP4401 = new BitSet(new long[]{0x0200080000000000L,0x00000001007F8000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_synpred106_JavaP4405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicitConstructorInvocation_in_synpred107_JavaP4518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred110_JavaP4569 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_synpred110_JavaP4572 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_arguments_in_synpred110_JavaP4576 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_synpred110_JavaP4578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred120_JavaP4862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclarationStatement_in_synpred143_JavaP5520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred144_JavaP5534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_synpred149_JavaP5750 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DE9F37F8834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_statement_in_synpred149_JavaP5754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred155_JavaP5912 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_105_in_synpred155_JavaP5916 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_synpred155_JavaP5920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred156_JavaP5947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_synpred175_JavaP6656 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_constantExpression_in_synpred175_JavaP6660 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_synpred175_JavaP6662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_synpred176_JavaP6674 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_enumConstantName_in_synpred176_JavaP6678 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_synpred176_JavaP6680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enhancedForControl_in_synpred177_JavaP6732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred181_JavaP6792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentOperator_in_synpred183_JavaP7074 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_synpred183_JavaP7078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_synpred193_JavaP7209 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_62_in_synpred193_JavaP7211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_synpred193_JavaP7213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_synpred194_JavaP7248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_synpred194_JavaP7250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_synpred194_JavaP7252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_synpred194_JavaP7254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_synpred195_JavaP7293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_synpred195_JavaP7295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_synpred195_JavaP7297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_synpred206_JavaP7839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_synpred206_JavaP7841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_synpred207_JavaP7872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_synpred207_JavaP7874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_synpred210_JavaP7984 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_62_in_synpred210_JavaP7986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_synpred211_JavaP8017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_synpred211_JavaP8019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_synpred211_JavaP8021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_synpred212_JavaP8056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_synpred212_JavaP8058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred224_JavaP8381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_synpred233_JavaP8708 = new BitSet(new long[]{0x0000080000000000L,0x00000000007F8000L});
    public static final BitSet FOLLOW_primitiveType_in_synpred233_JavaP8712 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_synpred233_JavaP8714 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred233_JavaP8718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moreidentifierRuleSuffixRubbish_in_synpred239_JavaP8878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred241_JavaP9002 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_synpred241_JavaP9006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_synpred243_JavaP9036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred243_JavaP9038 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_51_in_synpred243_JavaP9042 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_synpred243_JavaP9044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayAccessSuffixRubbish_in_synpred244_JavaP9062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred246_JavaP9089 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_synpred246_JavaP9093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred247_JavaP9114 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_synpred247_JavaP9118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred248_JavaP9131 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_synpred248_JavaP9135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred249_JavaP9155 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_synpred249_JavaP9159 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_superSuffix_in_synpred249_JavaP9175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred250_JavaP9187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred250_JavaP9191 = new BitSet(new long[]{0x4000080000000000L});
    public static final BitSet FOLLOW_innerCreator_in_synpred250_JavaP9195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred251_JavaP9223 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_synpred251_JavaP9227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayAccessSuffixRubbish_in_synpred252_JavaP9251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred254_JavaP9277 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_synpred254_JavaP9279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred255_JavaP9291 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_synpred255_JavaP9295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred256_JavaP9307 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_synpred256_JavaP9311 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_superSuffix_in_synpred256_JavaP9315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred257_JavaP9327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred257_JavaP9331 = new BitSet(new long[]{0x4000080000000000L});
    public static final BitSet FOLLOW_innerCreator_in_synpred257_JavaP9335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_synpred258_JavaP9408 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_synpred258_JavaP9412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred258_JavaP9416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createdName_in_synpred262_JavaP9511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_synpred262_JavaP9529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred262_JavaP9531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_arrayInitializer_in_synpred262_JavaP9539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_synpred263_JavaP9578 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_synpred263_JavaP9582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred263_JavaP9584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createdName_in_synpred265_JavaP9562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_synpred265_JavaP9578 = new BitSet(new long[]{0x0000081802000100L,0x80000000F37F8024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_synpred265_JavaP9582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred265_JavaP9584 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_synpred265_JavaP9603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred265_JavaP9605 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});

}